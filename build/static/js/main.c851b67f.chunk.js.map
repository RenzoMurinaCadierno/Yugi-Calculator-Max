{"version":3,"sources":["components/DeckBuilder/CardSelection/CardSelection.module.css","components/CardSearch/DescScreen/DescScreen.module.css","components/DeckBuilder/SecondaryScreens/SecondaryScreens.module.css","components/Log/LogMenu/LogMenu.module.css","components/CardSearch/DescPriceScreen/DescPriceScreen.module.css","components/LifePointsCounter/LifePoints/LifePoints.module.css","components/CardSearch/SearchScreen/SearchScreen.module.css","components/DeckBuilder/HelpSection/HelpSection.module.css","components/Options/SecondaryScreens/SecondaryScreens.module.css","assets/uiIcons/cross.svg","components/LifePointsCounter/LifePointsGauge/LifePointsGauge.module.css","components/DeckBuilder/HelpDemoDrawCards/HelpDemoDrawCards.module.css","components/Options/LogSwitches/LogSwitches.module.css","App.module.css","components/LifePointsCounter/CalculatorLeftSide/CalculatorLeftSide.module.css","components/UI/ArrowIcon/ArrowIcon.module.css","assets/audios/clickOK.mp3","components/DeckBuilder/DeckSelectionAndHelpMenu/DeckSelectionAndHelpMenu.module.css","components/DeckBuilder/CardListItem/CardListItem.module.css","components/UI/SecondaryScreen/SecondaryScreen.module.css","components/LifePointsCounter/CalculatorRightSide/CalculatorRightSide.module.css","components/DeckBuilder/DeckCreatorScreen/DeckCreatorScreen.module.css","assets/uiIcons/arrow2.svg","assets/audios/clickCancel.mp3","assets/audios/switch.mp3","assets/uiIcons/trash.svg","assets/uiIcons/card.svg","components/LifePointsCounter/RestartConfirmScreen/RestartConfirmScreen.module.css","components/CardSearch/PriceScreen/PriceScreen.module.css","components/DeckBuilder/CardListStatsSVGs/CardListStatsSVGs.module.css","components/UI/Button/Button.module.css","components/LifePointsCounter/Token/Token.module.css","components/UI/InputWithLabel/InputWithLabel.module.css","components/DeckBuilder/SaveDeleteOrAddDeck/SaveDeleteOrAddDeck.module.css","components/UI/SVGImageWithNotifications/SVGImageWithNotifications.module.css","components/LifePointsCounter/Calculator/Calculator.module.css","components/CardSearch/SearchMenu/SearchMenu.module.css","components/DeckBuilder/CardSelectionItem/CardSelectionItem.module.css","components/Options/SFXSwitch/SFXSwitch.module.css","components/Options/DiceLimits/DiceLimits.module.css","components/UI/Slider/Slider.module.css","components/UI/SelectionMenuScreen/SelectionMenuScreen.module.css","components/UI/ExpandableIcon/ExpandableIcon.module.css","assets/tokenIcons/spell.svg","assets/uiIcons/tick.svg","assets/audios/swipe.mp3","assets/audios/switchTitles.mp3","assets/uiIcons/die.svg","assets/uiIcons/coin.svg","assets/audios/toast.mp3","assets/uiIcons/save.svg","pages/LifePointsCounterPage/LifePointsCounterPage.module.css","components/CardSearch/ListScreen/ListScreen.module.css","components/Options/LifePoints/LifePoints.module.css","components/DeckBuilder/DeckCreatorSideBar/DeckCreatorSideBar.module.css","components/UI/EditableSpan/EditableSpan.module.css","components/LifePointsCounter/TimerScreen/TimerScreen.module.css","components/CardSearch/AltArtImgDisplay/AltArtImgDisplay.module.css","components/DeckBuilder/DeckSelectionAndEditing/DeckSelectionAndEditing.module.css","components/DeckBuilder/CardListStatsItem/CardListStatsItem.module.css","components/Options/Configs/Configs.module.css","components/Options/Credits/Credits.module.css","components/UI/MiniCircle/MiniCircle.module.css","components/LifePointsCounter/PlayerNameTag/PlayerNameTag.module.css","components/UI/ProgressBar/ProgressBar.module.css","components/Log/LogScreen/LogScreen.module.css","components/Log/LogDeleteScreen/LogDeleteScreen.module.css","components/UI/RotatableArrowIcon/RotatableArrowIcon.module.css","assets/audios/dice.mp3","components/UI/Input/Input.module.css","assets/uiIcons/heart.svg","assets/uiIcons/clock.svg","components/UI/Spinner/Spinner.module.css","assets/uiIcons/help.svg","assets/uiIcons/add.svg","assets/uiIcons/deck.svg","assets/uiIcons/info.svg","components/UI/Toast/Toast.module.css","components/CardSearch/ImgScreen/ImgScreen.module.css","components/DeckBuilder/CardFilter/CardFilter.module.css","wrappers/CardSearchScreenDivision/CardSearchScreenDivision.module.css","assets/images/cardNotFound.jpg","wrappers/DeckBuilderTopScreen/DeckBuilderTopScreen.module.css","assets/audios/openModal.mp3","components/LifePointsCounter/Coin/Coin.module.css","components/UI/InputWithSubmit/InputWithSubmit.module.css","components/UI/SVGImage/SVGImage.module.css","components/DeckBuilder/DeckMenu/DeckMenu.module.css","components/DeckBuilder/CardListScreen/CardListScreen.module.css","components/UI/Card/Card.module.css","wrappers/DangerZoneSecondaryScreen/DangerZoneSecondaryScreen.module.css","assets/audios/closeModal.mp3","wrappers/ErrorMessage/ErrorMessage.module.css","assets/expandableIcons/linkedin.svg","assets/expandableIcons/github.svg","assets/expandableIcons/mail.svg","assets/expandableIcons/react.svg","assets/expandableIcons/nonYugiohAssets.svg","assets/expandableIcons/yugioh.svg","components/UI/GenericErrorMessage/GenericErrorMessage.module.css","assets/cardIcons/light.svg","assets/cardIcons/dark.svg","assets/cardIcons/earth.svg","assets/cardIcons/fire.svg","assets/cardIcons/water.svg","assets/cardIcons/wind.svg","assets/cardIcons/divine.svg","assets/cardIcons/spell.svg","assets/cardIcons/trap.svg","assets/cardIcons/trapspell.svg","assets/cardIcons/normal.svg","assets/cardIcons/continuous.svg","assets/cardIcons/quick.svg","assets/cardIcons/field.svg","assets/cardIcons/equip.svg","assets/cardIcons/ritual.svg","assets/cardIcons/lv-star.svg","assets/cardIcons/xyz-star.svg","assets/tokenIcons/light.svg","assets/tokenIcons/dark.svg","assets/tokenIcons/wind.svg","assets/tokenIcons/fire.svg","assets/tokenIcons/water.svg","assets/tokenIcons/earth.svg","wrappers/CoinDieTokenBottomScreen/CoinDieTokenBottomScreen.module.css","wrappers/CoinDieTokenTopScreen/CoinDieTokenTopScreen.module.css","components/LifePointsCounter/Die/Die.module.css","components/LifePointsCounter/DiceScreen/DiceScreen.module.css","assets/audios/coin.mp3","components/LifePointsCounter/CoinScreen/CoinScreen.module.css","components/LifePointsCounter/TokenScreen/TokenScreen.module.css","wrappers/TimerBottomScreen/TimerBottomScreen.module.css","wrappers/TimerTopScreen/TimerTopScreen.module.css","assets/audios/lpChange.mp3","assets/audios/lpChangeGameEnd.mp3","assets/audios/openToast.mp3","assets/audios/closeToast.mp3","assets/audios/lifepoints.mp3","components/LifePointsCounter/Timer/Timer.module.css","assets/uiIcons/token.svg","assets/uiIcons/calculator.svg","components/Log/LogItem/LogItem.module.css","pages/LogPage/LogPage.module.css","assets/cardIcons/sword.svg","assets/cardIcons/shield.svg","assets/uiIcons/search.svg","pages/CardSearchPage/CardSearchPage.module.css","wrappers/OptionsTitle/OptionsTitle.module.css","wrappers/HalfScreenDivision/HalfScreenDivision.module.css","wrappers/DeckBuilderBottomScreen/DeckBuilderBottomScreen.module.css","assets/uiIcons/shuffle.svg","assets/uiIcons/reload.svg","assets/audios/draw.mp3","assets/audios/shuffle.mp3","components/DeckBuilder/CardListStatsCards/CardListStatsCards.module.css","components/DeckBuilder/CardListStatsScreen/CardListStatsScreen.module.css","pages/DeckBuilderPage/DeckBuilderPage.module.css","assets/audios/toggler.mp3","wrappers/UICardContainer/UICardContainer.module.css","wrappers/OptionTitle/OptionTitle.module.css","wrappers/OptionBody/OptionBody.module.css","wrappers/OptionSwitchesCategory/OptionSwitchesCategory.module.css","assets/uiIcons/musicNote.svg","components/Options/DangerZoneSecondaryScreens/DangerZoneSecondaryScreens.module.css","components/Options/DangerZone/DangerZone.module.css","pages/OptionsPage/OptionsPage.module.css","assets/uiIcons/arrowPage.svg","wrappers/RouteComponents/RouteComponents.module.css","store/Toast/toastReducer.js","store/Toast/toastActionTypes.js","store/PageSwipe/pageSwipeActionTypes.js","store/PageSwipe/pageSwipeReducer.js","hooks/useToggle.js","contexts/UIContext.js","hooks/useToggleSecondScreen.js","store/PageSwipe/pageSwipeActionCreators.js","store/Toast/toastActionCreators.js","hooks/useAudioControls.js","hooks/useAudio.js","hooks/useReRender.js","components/UI/SecondaryScreen/SecondaryScreen.jsx","wrappers/ErrorMessage/ErrorMessage.jsx","utils/utilityObjects.js","components/UI/ErrorBoundary/ErrorBoundary.jsx","components/UI/GenericErrorMessage/GenericErrorMessage.jsx","hooks/useLocalStorage.js","store/LogPage/logPageActionTypes.js","store/LogPage/logPageReducer.js","store/LogPage/logPageActionCreators.js","contexts/LogContext.js","store/Log/logActionTypes.js","store/LifePoints/lifePointsActionTypes.js","store/Log/logReducer.js","components/UI/MiniCircle/MiniCircle.utils.js","components/UI/MiniCircle/MiniCircle.jsx","utils/yugiohSpecificFunctions.js","utils/validators.js","utils/utilityFunctions.js","hooks/useLogReducer.js","store/CoinDieToken/coinDieTokenReducer.js","store/CoinDieToken/coinDieTokenActionTypes.js","contexts/CoinDieTokenContext.js","contexts/MediaQueryContext.js","contexts/LocalStorageContext.js","store/Log/logActionCreators.js","store/CoinDieToken/coinDieTokenActionCreators.js","wrappers/CoinDieTokenBottomScreen/CoinDieTokenBottomScreen.jsx","wrappers/CoinDieTokenTopScreen/CoinDieTokenTopScreen.jsx","contexts/PlayerContext.js","hooks/usePlayerToggle.js","store/Timer/timerActionTypes.js","store/Timer/timerReducer.js","store/Timer/timerActionCreators.js","contexts/TimerContext.js","components/LifePointsCounter/Die/Die.jsx","components/UI/Button/Button.jsx","components/LifePointsCounter/DiceScreen/DiceScreen.utils.js","components/LifePointsCounter/DiceScreen/DiceScreen.jsx","components/LifePointsCounter/Coin/Coin.jsx","components/LifePointsCounter/CoinScreen/CoinScreen.utils.js","components/LifePointsCounter/CoinScreen/CoinScreen.jsx","components/UI/ArrowIcon/ArrowIcon.utils.js","components/UI/ArrowIcon/ArrowIcon.jsx","components/LifePointsCounter/Token/Token.utils.js","components/LifePointsCounter/Token/Token.jsx","components/LifePointsCounter/TokenScreen/TokenScreen.utils.js","components/LifePointsCounter/TokenScreen/TokenScreen.jsx","components/UI/Input/Input.utils.js","components/UI/Input/Input.jsx","components/UI/InputWithSubmit/InputWithSubmit.utils.js","components/UI/InputWithSubmit/InputWithSubmit.jsx","wrappers/TimerBottomScreen/TimerBottomScreen.jsx","wrappers/TimerTopScreen/TimerTopScreen.jsx","components/LifePointsCounter/TimerScreen/TimerScreen.utils.js","components/LifePointsCounter/TimerScreen/TimerScreen.jsx","store/LifePoints/lifePointsReducer.js","contexts/LPContext.js","hooks/useLPReducer.js","store/LifePoints/lifePointsActionCreators.js","components/LifePointsCounter/RestartConfirmScreen/RestartConfirmScreen.utils.js","components/LifePointsCounter/RestartConfirmScreen/RestartConfirmScreen.jsx","components/LifePointsCounter/SecondaryScreens/SecondaryScreens.jsx","store/DeckConstructor/deckConstructorActionTypes.js","store/DeckConstructor/deckConstructorReducer.js","store/DeckConstructor/deckConstructorActionCreators.js","contexts/DeckBuilderContext.js","hooks/useFetch.js","hooks/useDoubleTap.js","components/LifePointsCounter/PlayerNameTag/PlayerNameTag.utils.js","components/LifePointsCounter/PlayerNameTag/PlayerNameTag.jsx","hooks/usePlayerNameTag.js","components/LifePointsCounter/LifePointsGauge/LifePointsGauge.utils.js","components/LifePointsCounter/LifePointsGauge/LifePointsGauge.jsx","components/LifePointsCounter/LifePoints/LifePoints.utils.js","components/LifePointsCounter/LifePoints/LifePoints.jsx","hooks/useLifePointsAudio.js","components/UI/Toast/Toast.utils.js","components/UI/Toast/Toast.jsx","components/LifePointsCounter/Timer/Timer.utils.js","components/LifePointsCounter/Timer/Timer.jsx","components/UI/ProgressBar/ProgressBar.utils.js","components/UI/ProgressBar/ProgressBar.jsx","components/UI/Slider/Slider.utils.js","components/UI/Slider/Slider.jsx","components/LifePointsCounter/CalculatorLeftSide/CalculatorLeftSide.utils.js","components/LifePointsCounter/CalculatorLeftSide/CalculatorLeftSide.jsx","components/LifePointsCounter/CalcButton/CalcButton.jsx","components/UI/SVGImage/SVGImage.utils.js","components/UI/SVGImage/SVGImage.jsx","components/LifePointsCounter/CalculatorRightSide/CalculatorRightSide.utils.js","components/LifePointsCounter/CalculatorRightSide/CalculatorRightSide.jsx","components/LifePointsCounter/Calculator/Calculator.utils.js","components/LifePointsCounter/Calculator/Calculator.jsx","pages/LifePointsCounterPage/LifePointsCounterPage.utils.js","pages/LifePointsCounterPage/LifePointsCounterPage.jsx","components/Log/LogMenu/LogMenu.utils.js","components/Log/LogMenu/LogMenu.jsx","components/Log/LogItem/LogItem.jsx","components/Log/LogItem/LogItem.utils.js","components/Log/LogScreen/LogScreen.jsx","components/Log/LogDeleteScreen/LogDeleteScreen.utils.js","components/Log/LogDeleteScreen/LogDeleteScreen.jsx","pages/LogPage/LogPage.jsx","store/CardSearch/cardSearchActionTypes.js","store/CardSearch/cardSearchReducer.js","utils/apiFunctions.js","contexts/CardSearchContext.js","hooks/useApiCallWithReducer.js","store/CardSearch/cardSearchActionCreators.js","wrappers/CardSearchScreenDivision/CardSearchScreenDivision.utils.js","wrappers/CardSearchScreenDivision/CardSearchScreenDivision.jsx","components/CardSearch/ImgScreen/ImgScreen.utils.js","components/CardSearch/ImgScreen/ImgScreen.jsx","components/CardSearch/DescScreen/DescScreen.utils.js","components/CardSearch/DescScreen/DescScreen.jsx","components/CardSearch/PriceScreen/PriceScreen.utils.js","components/CardSearch/PriceScreen/PriceScreen.jsx","components/UI/RotatableArrowIcon/RotatableArrowIcon.utils.js","components/UI/RotatableArrowIcon/RotatableArrowIcon.jsx","components/CardSearch/DescPriceScreen/DescPriceScreen.utils.js","components/CardSearch/DescPriceScreen/DescPriceScreen.jsx","components/CardSearch/ListScreen/ListScreen.utils.js","components/CardSearch/ListScreen/ListScreen.jsx","components/CardSearch/SearchScreen/SearchScreen.utils.js","components/CardSearch/SearchScreen/SearchScreen.jsx","components/UI/InputWithLabel/InputWithLabel.utils.js","components/UI/InputWithLabel/InputWithLabel.jsx","components/UI/Spinner/Spinner.utils.js","components/UI/Spinner/Spinner.jsx","components/CardSearch/SearchMenu/SearchMenu.utils.js","components/CardSearch/SearchMenu/SearchMenu.jsx","components/UI/SelectionMenuScreen/SelectionMenuScreen.utils.js","components/UI/SelectionMenuScreen/SelectionMenuScreen.jsx","components/CardSearch/AltArtImgDisplay/AltArtImgDisplay.utils.js","components/CardSearch/AltArtImgDisplay/AltArtImgDisplay.jsx","components/CardSearch/SecondaryScreens/SecondaryScreens.jsx","pages/CardSearchPage/CardSearchPage.jsx","wrappers/OptionsTitle/OptionsTitle.utils.js","wrappers/OptionsTitle/OptionsTitle.jsx","components/UI/MiniCircleWithTransition/MiniCircleWithTransition.jsx","components/DeckBuilder/SaveDeleteOrAddDeck/SaveDeleteOrAddDeck.utils.js","components/DeckBuilder/SaveDeleteOrAddDeck/SaveDeleteOrAddDeck.jsx","components/DeckBuilder/DeckButton/DeckButton.utils.js","components/DeckBuilder/DeckButton/DeckButton.jsx","components/DeckBuilder/DeckMenu/DeckMenu.utils.js","components/DeckBuilder/DeckMenu/DeckMenu.jsx","components/UI/MiniCircleWithState/MiniCircleWithState.jsx","components/UI/SVGImageWithNotifications/SVGImageWithNotifications.utils.js","components/UI/SVGImageWithNotifications/SVGImageWithNotifications.jsx","components/DeckBuilder/HelpDemoDrawCards/HelpDemoDrawCards.utils.js","components/DeckBuilder/HelpDemoDrawCards/HelpDemoDrawCards.jsx","components/DeckBuilder/HelpSection/HelpSection.utils.js","components/DeckBuilder/HelpSection/HelpSection.jsx","components/DeckBuilder/SecondaryScreens/SecondaryScreens.utils.js","components/DeckBuilder/SecondaryScreens/SecondaryScreens.jsx","wrappers/HalfScreenDivision/HalfScreenDivision.utils.js","wrappers/HalfScreenDivision/HalfScreenDivision.jsx","wrappers/DeckBuilderTopScreen/DeckBuilderTopScreen.utils.js","wrappers/DeckBuilderTopScreen/DeckBuilderTopScreen.jsx","wrappers/DeckBuilderBottomScreen/DeckBuilderBottomScreen.utils.js","wrappers/DeckBuilderBottomScreen/DeckBuilderBottomScreen.jsx","components/DeckBuilder/SidebarMainSideExtra/SidebarMainSideExtra.jsx","components/DeckBuilder/SidebarMainSideExtra/SidebarMainSideExtra.utils.js","components/DeckBuilder/SidebarTest/SidebarTest.jsx","components/DeckBuilder/SidebarTest/SidebarTest.utils.js","components/DeckBuilder/DeckCreatorSideBar/DeckCreatorSideBar.utils.js","components/DeckBuilder/DeckCreatorSideBar/DeckCreatorSideBar.jsx","components/DeckBuilder/DeckSelectionAndEditing/DeckSelectionAndEditing.utils.js","components/DeckBuilder/DeckSelectionAndEditing/DeckSelectionAndEditing.jsx","components/UI/EditableSpan/EditableSpan.utils.js","components/UI/EditableSpan/EditableSpan.jsx","components/DeckBuilder/DeckSelectionAndHelpMenu/DeckSelectionAndHelpMenu.utils.js","components/DeckBuilder/DeckSelectionAndHelpMenu/DeckSelectionAndHelpMenu.jsx","hooks/useDeckSelectionInputControls.js","components/DeckBuilder/CardListItem/CardListItem.utils.js","components/DeckBuilder/CardListItem/CardListItem.jsx","components/DeckBuilder/DeckCreatorScreen/DeckCreatorScreen.utils.js","components/DeckBuilder/DeckCreatorScreen/DeckCreatorScreen.jsx","components/DeckBuilder/CardSelectionItem/CardSelectionItem.utils.js","components/DeckBuilder/CardSelectionItem/CardSelectionItem.jsx","components/DeckBuilder/CardSelection/CardSelection.utils.js","components/DeckBuilder/CardSelection/CardSelection.jsx","components/DeckBuilder/CardFilter/CardFilter.utils.js","components/DeckBuilder/CardFilter/CardFilter.jsx","components/DeckBuilder/CardListScreen/CardListScreen.utils.js","components/DeckBuilder/CardListScreen/CardListScreen.jsx","hooks/usePreviousState.js","components/DeckBuilder/CardListStatsSVGs/CardListStatsSVGs.utils.js","components/DeckBuilder/CardListStatsSVGs/CardListStatsSVGs.jsx","components/DeckBuilder/CardListStatsItem/CardListStatsItem.utils.js","components/DeckBuilder/CardListStatsItem/CardListStatsItem.jsx","components/DeckBuilder/CardListStatsCards/CardListStatsCards.jsx","components/DeckBuilder/CardListStatsScreen/CardListStatsScreen.utils.js","components/DeckBuilder/CardListStatsScreen/CardListStatsScreen.jsx","components/DeckBuilder/CardListOrStatsScreen/CardListOrStatsScreen.jsx","pages/DeckBuilderPage/DeckBuilderPage.jsx","components/UI/ExpandableIcon/ExpandableIcon.utils.js","components/UI/ExpandableIcon/ExpandableIcon.jsx","components/Options/SecondaryScreens/SecondaryScreens.utils.js","components/Options/SecondaryScreens/SecondaryScreens.jsx","components/UI/Card/Card.jsx","hooks/usePlayerConfigInputHandler.js","wrappers/UICardContainer/UICardContainer.jsx","wrappers/OptionTitle/OptionTitle.jsx","wrappers/OptionBody/OptionBody.utils.js","wrappers/OptionBody/OptionBody.jsx","components/Options/LifePoints/LifePoints.utils.js","components/Options/LifePoints/LifePoints.jsx","wrappers/OptionSwitchesCategory/OptionSwitchesCategory.jsx","components/Options/LogSwitches/LogSwitches.utils.js","components/Options/LogSwitches/LogSwitches.jsx","components/Options/SFXSwitch/SFXSwitch.utils.js","components/Options/SFXSwitch/SFXSwitch.jsx","components/Options/Switches/Switches.jsx","components/Options/DiceLimits/DiceLimits.utils.js","components/Options/DiceLimits/DiceLimits.jsx","wrappers/DangerZoneSecondaryScreen/DangerZoneSecondaryScreen.utils.js","wrappers/DangerZoneSecondaryScreen/DangerZoneSecondaryScreen.jsx","components/Options/DangerZoneSecondaryScreens/DangerZoneSecondaryScreens.utils.js","components/Options/DangerZoneSecondaryScreens/DangerZoneSecondaryScreens.jsx","components/Options/DangerZone/DangerZone.utils.js","components/Options/DangerZone/DangerZone.jsx","components/Options/Configs/Configs.utils.js","components/Options/Configs/Configs.jsx","components/Options/Credits/Credits.utils.js","components/Options/Credits/Credits.jsx","pages/OptionsPage/OptionsPage.jsx","wrappers/RouteComponents/RouteComponents.jsx","App.utils.js","App.jsx","wrappers/ContextProviders/ContextProviders.jsx","serviceWorker.js","index.js"],"names":["module","exports","initialState","text","url","type","logTypeArray","isActive","refreshTimeoutToggler","toastReducer","state","action","payload","logType","logIndex","findIndex","log","length","slice","pageArray","slide","pageSwipeReducer","pageArrayCopy","currentPage","shift","push","lastPage","pop","unshift","pageToPushBack","pageToSyncToFront","frontPage","useToggle","useState","setState","toggle","useCallback","UIContext","createContext","secondScreenType","secondScreenState","toggleSecondScreen","pageState","dispatchPageAction","screenIsFrozen","setScreenIsFrozen","playSFXs","togglePlaySFXs","toastState","dispatchToastAction","appIsLoadingSomething","setAppIsLoadingSomething","UIContextProvider","children","setType","setSecondScreenState","screenType","useToggleSecondScreen","useReducer","uiConfigs","pageNames","contextValues","Provider","value","goBack","goForward","syncStartingURLwithPageArray","historyLocationPathname","setToastState","setLogType","logTypeString","useAudioControls","audioRef","configs","toggleOn","playbackRate","sources","isOn","switchOnOff","current","src","currentSrc","setCurrentSrc","play","forcePlay","pause","stop","currentTime","restart","playReverse","setSource","setNextSrc","srcIndex","nextSrcIdx","parseInt","isStopped","paused","isPlaying","useEffect","useAudio","useRef","audioJSX","ref","audioControls","useReRender","memo","small","large","scrollable","flex","animation","sfxObj","onClose","isUnmounting","setIsUnmounting","reRender","animationName","toUpperCase","classes","styles","ContentContainer","Small","Large","Flex","Scrollable","handleBackdropClick","handleScreenContainerClick","e","stopPropagation","unmountingAnimationTimeout","setTimeout","timeouts","secondScreenUnmountingDelay","clearTimeout","className","Backdrop","onClick","aria-label","role","join","ErrorMessage","Container","socialMediaSites","linkedin","alt","divContent","toastToggler","data-text","data-url","style","cursor","github","mail","cardAndPricesDatabaseSites","ygoProDeck","name","href","ygoProDeckApiGuide","amazon","cardMarket","coolStuffInc","ebay","tcgPlayer","yugiohPrices","acknowledgmentsSites","react","nonYugiohAssets","yugipedia","yugioh","restartConfirm","message","errorMessages","appNeedsInternet","noInternetConnection","cardSearchError","genericError","secondaryScreensData","searchTips","displayTitle","items","search","prices","filter","credits","acknowledgments","toggler","database","databases","contact","intro","author","license","ErrorBoundary","props","hasError","errorInfo","handleToggleSecondScreen","bind","error","this","togglers","secondaryScreens","errorBoundary","modalSFX","errorMessageComponent","connectedToInternet","navigator","onLine","Component","GenericErrorMessage","useLocalStorage","LSKey","LSValues","createLSObject","localStorageObject","forEach","item","key","Object","keys","window","localStorage","setItem","JSON","stringify","err","console","alert","close","getLSasJSObject","parse","getItem","updateBrowserLSItem","objectToUpdateLS","callbackBeforeUpdating","updatedLSObject","updateLSandGetLSasJSObj","nestedKey","overrideValue","unshiftFirstItem","genValueWithLS","maxLogLength","updatedValue","valueAndLSKeyAreTypeObject","Array","isArray","deleteAndGetLSObject","removeKey","deletedLSObject","logs","cache","activeIcon","logPageReducer","reversedLogs","reverse","filteredLogs","LogContext","logPageState","dispatchLogPageAction","mountLogs","filterLogs","deleteLSLogHistory","LogContextProvider","localStorageLogsKeyName","initialLogsLocalStorage","logHistory","localStorageLogsObjectKeys","passedContext","INC","DEC","RESTART","CONFIRM_RESTART","MODIFY","CLEAR","logState","logText","logIgTimer","logPing","logReducer","timer","lpActionTypes","includes","animateOnClick","animateOnDisplayChange","growState","propsClassNames","ContainerActive","Clickable","Grow","inlineStyles","display","addNumberColorIndicator","ariaLabel","ariaPressed","classNames","toggleGrow","handleClick","growTimeOut","aria-pressed","sortSectionAndCleanMap","getCardIcon","cardAttribute","toLowerCase","light","dark","wind","water","fire","earth","spell","trap","continuous","quick","field","equip","ritual","divine","trapspell","normal","getCardTypeStyle","cardType","opacity","splittedTypeString","split","getBanlistInfo","fetchedBalistData","format","getRankOrLevelIconURLArray","rankOrLevel","isMonsterCard","starArray","fill","xyzStar","lvStar","notMonsterCardsArray","tokenIconArray","tokenSpell","tokenLight","tokenDark","tokenWind","tokenFire","tokenWater","tokenEarth","getCardIndexInSection","sectionArr","targetCardName","card","getCardDefaultSection","deckBuilderConfigs","extraDeckCards","generateCardTypeMap","cardTypeMap","Map","mainDeckCards","set","sectionArray","sectionMap","cardObj","currentSection","get","from","values","map","cardTypeArr","sort","a","b","flat","Validator","args","_args","len","toString","int","o1","o2","every","k","hasOwnProperty","InputValidator","test","maxLength","lengthIsHigherThan","currentlyEvaluatedInputName","valueToCompare","inputStates","inputRefOne","inputRefTwo","inputOneRef","inputTwoRef","inputOneNewValue","inputTwoNewValue","YugiohValidator","sectionName","reduce","acc","quantity","getAmountOfCardsInSection","cardLimits","cardIndexInSection","getAmountOfSpecificCardInSection","sectionToTest","deck","defaultDeck","validCardObjectProps","getSlicedArray","arr","index","element","getSlicedString","str","filler","slicedStr","doNothing","validateInputOnChange","inputValue","validator","stringOnlyHasIntegers","fillFrontOfInput","fillerChar","minLength","lengthIsLowerThan","valueWithFiller","i","getIRLDateTimeString","irlTime","Date","getMonth","getDate","getFullYear","getHours","getMinutes","getSeconds","isValidRestartCondition","lpState","tempLP","String","apiConfigs","limit","p1","p2","divideStrByCharWithoutRemovingChar","char","bruteFragments","pureFragments","getLogDisplayText","currentPlayer","condition","lpLimits","playerNames","fixedButtonLPValue","player","operationLP","deltaLP","Number","modifier","p2LP","p1LP","min","max","sortLocalStorageAfterDeletingDeck","LSObject","sortedKeyValObject","entries","localStorageDecksObjectKeys","decks","keyValPair","deckString","deck_1","main","side","extra","valueToFixedZero","toFixed","getSVGImageTextAndExtraStyles","qtyArr","currEntry","cardTotal","isTestComponent","isMediaQueryPortrait","amount","Math","round","duration","formatValue","containerStyle","textStyle","width","fontSize","top","letterSpacing","useLogReducer","useContext","logDispatch","id","uuid","coinDieTokenReducer","res","img","indexToRemove","removeSelected","itemBeforeOrAfterTheOneRemoved","prevState","imgAndAlt","spellIcon","uuidv4","counter","itemId","operation","targetItemIndex","targetItem","newItems","itemWasActive","splice","newSelectedIndex","currentImg","moveForwards","nextIndex","arrayImg","getNextTokenImgAndAlt","CoinDieTokenContext","coinReducer","diceReducer","tokenReducer","coinLogReducer","diceLogReducer","CoinDieTokenContextProvider","MediaQuery","mq","mediaQueriesObjectState","mediaQueries","MediaQueryProvider","setMq","watchMediaQueryChange","mqCopy","query","matchMedia","matches","addEventListener","removeEventListener","LocalStorageContext","currentLP","playerConfigs","initialLPLog","LocalStorageContextProvider","localStorageConfigsKeyName","initialConfigsLocalStorage","logObjectWithTypeTextTimerKeys","modifyArray","diceOrCoinItem","addItem","typeOfItemAsAString","removeItem","removeSelectedBoolean","CoinDieTokenBottomScreen","CoinDieTokenTopScreen","PlayerContext","toggleCurrentPlayer","setPlayerNames","PlayerContextProvider","isMounting","setCurrentPlayer","usePlayerToggle","initialPlayerNames","setNames","playerNameObject","localStorageConfigsObjectKeys","timerObject","hs","initialTimer","mins","secs","previousInitialTime","isTimerFrozen","isTimerRunning","timerReducer","TimerContext","dispatchTimerAction","TimerContextProvider","timerState","timerActionCreators","timerArray","newTimeObject","timerString","getTime","toISOString","substr","tick","Die","diceDispatch","diceSFX","isRolling","setIsRolling","diceConfig","minRoll","maxRoll","c","rollTimer","rollResult","numDice","minNum","maxNum","floor","random","roll","diceActionCreators","logActionCreators","logTypes","dice","diceRollAnimation","CSSTransition","in","timeout","typeButton","typeSubmit","reference","dataId","disabled","nonStyledDisabled","onBlur","sutileAnimation","tabIndex","setIsActive","Button","Disabled","Highlight","GrowSmall","Secondary","Primary","highlightTimer","data-id","isMqPortrait","DiceScreen","switchSFX","clickOKSFX","clickCancelSFX","diceState","rollRef","dicemp3","diceAudioJSX","dispatchAddDieAction","dispatchRemoveDieAction","dispatchToggleLogAction","toastActionCreators","TransitionGroup","component","portrait","Coin","coinDispatch","coinSFX","isTossing","setIsTossing","tossTimer","flipResult","cross","coinActionCreators","coin","coinTossAnimation","Result","CoinScreen","coinState","coinmp3","coinAudioJSX","dispatchAddCoinAction","dispatchRemoveCoinAction","ContainerDisabled","Active","direction","ArrowImage","ArrowImageDisabled","ExtraText","pointing","arrowImage","extraText","dataExtra","word","charAt","handleOnClick","activeTimeout","data-extra","container","arrow","arrowImageClasses","ArrowImageActive","image","Image","ImageActive","arrowClasses","Arrow","tokenDispatch","tokenSFXs","dispatchIncDecAction","incOrDecString","target","dataset","add","remove","dispatchSwitchTokenTypeAction","moveForwardsBoolean","swipe","dispatchSetActiveTokenAction","arrowTop","arrowRight","arrowBottom","arrowLeft","ariaLabels","tokenStateItemsLength","tokenState","swipemp3","swipeAudioJSX","swipeSFX","dispatchAddTokenAction","tokenActionCreators","dispatchRemoveTokenAction","placeholder","autoComplete","onChange","onFocus","Input","onSubmit","preventDefault","otherProps","handleSubmit","input","TimerBottomScreen","TimerTopScreen","inputWithSubmit","InputForm","actionButton","logButton","TimerScreen","startButtonRef","dispatchLogAction","stage","changeInput","toggleTimerRunning","click","newTimerObject","init","currentPlayerLP","LPToCalculate","actionTypes","lifePointsActionTypes","intWouldBeHigherThan","intWouldBeLowerThan","initialLifePoints","initialLP","completeValue","LPContext","dispatchLPAction","switchState","setSwitch","lpLog","LPContextProvider","lpReducer","useLPReducer","inc","incPayload","dec","decPayload","restartPayload","confirmRestart","confirmRestartPayload","modify","modifyPayload","clear","Message","ConfirmMsg","button","RestartConfirmScreen","confirm","resetGameAndToggleScreen","lifePointsActionCreators","Buttons","TickImage","CancelImage","SecondaryScreens","isDiceSecondScreen","die","isCoinSecondScreen","isTokenSecondScreen","token","isTimerSecondScreen","isRestartSecondScreen","restartDuel","confirmRestartDuel","clickOKmp3","clickOKAudioJSX","clickCancelmp3","clickCancelAudioJSX","handleToggleToast","sectionArrGenerator","fallbackDeck","fallbackState","selectedDeckSection","selectedDeckId","sectionWasModified","canSave","fallbackTestDeck","deck_2","deck_3","deckKey","currentDeck","targetCard","ygoVal","deckConstructorReducer","addCardLogic","changeSectionLogic","removeCardLogic","moveCardBetweenSectionsLogic","sortSectionLogic","switchDeckLogic","deleteDeckLogic","addDeckLogic","setDeckLogic","setCanSaveLogic","initializeFallbackDeckLogic","clearTestDeckLogic","initializeTestDeckLogic","drawTestCardLogic","setCurrentDeckKeyAndValue","deckId","getNewSectionArray","cardQuantityInDeck","sectionIsAtMaxLimit","getLastDeckId","lastDeckId","detailedCardObj","isSection","cardObject","cardDefaultSection","isMaxLimitInSectionExceeded","cardName","deckSectionsArrays","currCard","getCardQuantityInDeck","isAddingCardFromList","targetSection","isCardLimitInSectionExceeded","cardIndexInTargetSection","newArrays","originSection","cardIndexInOriginSection","getOriginAndTargetSectionNewArrays","sortedSection","next","arrayStateObj","deletedDeckId","newSelectedDeckId","curCard","currentTestDeck","reactKey","newTestDeck","addCard","changeSection","newSection","intitializeTestDeck","isShufflingDeck","defaultLocalStorageStartingDeck","initialDecksInLocalStorage","DeckBuilderContext","cardListState","cardCache","deckState","dispatchDeckAction","cardFetchLastDate","setFetchCardsNewDate","fetchCardList","setCardCache","triggerCardDetailsToast","DeckBuilderContextProvider","setCardFetchLastDate","triggerOn","data","isLoading","fetchState","setFetchState","fetch","rawData","json","Promise","resolve","reject","prevFetchState","fetchData","useFetch","globalCardListURL","localStorageDecksKeyName","initialDecksLocalStorage","configsLS","localStorageGetter","getInitialLocalStorage","currentDateObj","fetchedCardsLastDate","find","useDoubleTap","delayBetweenTaps","taps","setTaps","isDoubleTap","setIsDoubleTap","call","doubleTapCallback","singleTapCallback","tap","clearClick","Span","propsContainerClassNames","propsInputClassNames","Form","CharLimit","nameLength","playerName","nameChangeSFX","inputRef","contextPlayerName","updateContextPlayerNames","contextCurrentPlayer","inputReference","maxPlayerNameLength","soundEffects","isEditingInput","toggleEditingInput","fallback","tag","setTag","focus","submitNewName","trimmedName","trim","isValidPlayerName","handleInputChange","usePlayerNameTag","calcConfigs","doubleTapDelay","autocomplete","form","charLimit","span","containerClassNames","ActiveContainer","PlayerTag","ActiveTag","PlayerTagInput","progressClassNames","Progress","ActiveProgress","affectedLPColor","color","animatedNumberValue","maxLP","getLPProgressBarPercentage","animatedNumber","lp","isChanging","affectedLP","setAffectedLP","affectedLPtimeout","begin","complete","AnimatedNumber","AffectedLP","progress","isExpanded","ContainerExpanded","LPContainer","LPContainerExpanded","PlayerOneTag","PlayerOneTagInput","PlayerOneTagForm","PlayerOneCharLimit","PlayerTwoTag","PlayerTwoTagInput","PlayerTwoTagForm","PlayerTwoCharLimit","Lifepoints","setMaxLP","lpChangemp3","lpChangeGameEndmp3","lpChangemp4","lpChangeGameEndmp4","useLifePointsAudio","lpmp3","lpAudioJSX","lpSFX","switchTitlesmp3","toggleAudioJSX","toggleSFX","lpAnimationEndAudioJSX","lpAnimationEndSFX","nameChangeAudioJSX","togglePlayer","setLPChangeSFXandFreezeScreen","playLPSFXAndUnfreezeScreen","document","title","documentTitle","toastText","playerTag","getInvalidUnicodeArray","calculator","toast","logSwitches","LPCalcContainer","Cross","Children","show","inactiveTimeout","refreshTimeoutOn","unmountingTimeout","unmountOnExit","mountOnEnter","Percentage","Timer","currentPercentage","showProgress","currentValue","maxValue","showTimer","showPercentage","timerConfigs","percentage","SlideBar","propsSelectorClassNames","propsSelectorOnClassNames","SliderSwitchOff","SliderSwitchOn","propsTextOffClassNames","propsTextOnClasses","TextOff","TextOn","onSwitchOn","onSwitchOff","textON","textOFF","ariaLabelOn","ariaLabelOff","toggleSwitch","aria-checked","sliderBar","selector","selectorOn","textOff","textOn","Collapsed","SliderContainer","SliderContainerCollapsed","SliderSelector","SliderSelectorOn","SliderTextOn","SliderTextOff","ProgressBarContainer","ProgressBarContainerCollapsed","ProgressBarPercentage","TimerCounter","progressArray","setProgressArray","dispatchToggleLPLogAction","initialTime","currentTimeValue","initialTimeValue","getTimerProgressBarValue","progressBar","Default","CoinCollapsed","DieCollapsed","Token","TokenCollapsed","showCalcButtons","calcButtons","buttonsArray","label","inactiveCalcSwitches","ToastText","ToastLogItems","MidColumn","CalculatorMiniCircle","CalculatorMiniCircleActive","LifePointsCounterPage","switchmp3","switchAudioJSX","toggleCalcmp3","toggleCalcAudioJSX","toggleCalcSFX","setShowCalcButtons","toggleCalcButtons","swipeUpDownHandlers","useSwipeable","onSwipedUp","onSwipedDown","delta","swipeDelta","swipeHandlers","calculatorSVG","CalculatorImage","allLogs","LogIconAll","LogIconAllActive","LogMenuIcon","LogMenuIconActive","LogIconDie","Bright0","LogIconClock","trash","LogIconTrash","getLogFilterSVGImg","onClickCallback","getSVGImgSrc","heart","clock","LogMenu","switchAudioSFX","handleFilterLogs","deleteLogs","LogItem","mediaQueriedText","chars","charsFlat","firstDivision","secondDivision","indexOf","divideLogString","t","mediaQueriedIrlTime","LogScreen","reverseLogs","LogBackground","Header","Content","isMQPortrait","LogDeleteScreen","deleteLogsAndToggleSecondScreen","DeleteImage","LogPage","currentCard","currentList","filterableList","altImgId","isInListScreen","errorMsg","cardSearchReducer","storeAPICall","apiResponse","functionToStoreListOfCards","functionToStoreSingleCard","getCardObject","cardApiResponse","objectToFuseIfAny","card_images","image_url","averages","card_prices","sets","card_sets","race","attributeIcon","attribute","atk","def","desc","banlist_info","level","link_value","linkval","link_markers","linkmarkers","images","promise","time","then","CardSearchContext","searchReducer","dispatchSearchAction","apiFetchAndStoreRes","CardSearchContextProvider","urlWithNameOrFuzzyQuery","nameOrFuzzyNameQueryParam","reducerLoadingDispatch","reducerSuccessDispatch","reducerErrorDispatch","callTimeout","useApiCallWithReducer","setCurrentCard","currentCardObject","setAltImgId","CardSearchScreenDivision","toastIsActive","CardImage","CardImageActive","ImgScreen","cardNotFound","collapsedStarIcons","ArrowIconContainer","ContainerFilled","ArrowIconArrow","expandedStarIcons","isLink","linkLevelOrRank","showing","LinkInfoContainer","CompressLinkInfoContainer","cardDescRef","linkLevelOrRankValue","handleAltImgClick","cardSearchActionCreators","altCardArt","noConnection","getLinkLevelOrRankArrayJSX","linkLevelOrRankArray","Type","RaceAttrib","AtkDef","sword","SwordIcon","shield","ShieldIcon","Description","sentence","Banlist","AltArtList","AltArtTitle","AltArtImg","bestPrices","BestPrices","BorderSecondary","averagePricesObject","priceRef","lowestCardPrices","retailerName","match","retailerURL","retailerURLs","encodeURIComponent","handleRetailerClick","site","Sets","BorderPrimary","set_name","set_rarity","set_rarity_code","set_price","set_code","lcp","data-site","isArrowRotated","preventRotation","RotatableArrowIcon","rotateArrow","containerClick","persist","isMqXS","classNamesRefCurrent","HalfScreen","isMqXs","isDescArrow","ArrowIcon","TopLeft","showingState","xs","setShowing","descClass","Show","priceClass","Hide","resizeScreen","undefined","scrollIntoView","behavior","spinnerContainer","SpinnerContainer","fetchForCard","listindex","data-listindex","Card","ExtraInfo","cardImgScreen","CardImageScreen","ArrowContainer","ArrowContainerLeft","ArrowArrow","ExtraTextList","ArrowContainerRight","ToastLink","retailerSite","ToastLinkInline","cardInfoWarning","toastJSXs","linkStyle","SearchScreen","swipeAudioSFX","toastmp3","toastAudioJSX","toastSFX","handleArrowIconClick","handleCloseToast","handleToastLinkClick","open","toastJSX","cardInfo","inactiveCardImage","isClickable","isFocused","Label","LabelUp","LabelDisabled","HelpText","HelpTextActive","getText","textOnFocus","textOnBlur","labelText","labelTextOnFocus","helpText","helpTextOnFocus","setIsFocused","onInputFocus","onInputBlur","activeElement","htmlFor","Chase","ChaseDot","Spinner","chaseClasses","chaseDotClasses","dots","inputWithLabel","InputContainer","spinner","globalbuttonStyles","position","fontStyle","fontWeight","justifyContent","alignItems","transition","searchButton","helpButton","searchIcon","searchTerm","setSearchTerm","inputTexts","getInputTexts","onInputChange","toggleTipSecondaryScreen","timeToTriggerFilter","filterTimeout","cardSearchURL","fuzzy","catch","HelpIcon","help","SearchIcon","Menu","currentOption","MenuItem","ContentItem","titlesArray","customTitles","ulContentAreLiTags","onMenuItemClick","forceSelectDefault","defaultTitle","setCurrentOption","contentItemRef","switchTitlesAudioJSX","switchTitlesSFX","handleMenuItemClick","menu","menuItem","content","margin","padding","Fragment","contentItem","setIsLoading","imgRef","onUpdate","x","y","scale","make3dTransformValue","setProperty","setIsLoadingToFalse","zoomOutFactor","minZoom","maxZoom","onDragStart","onZoomStart","cardImgFetchUrl","hasWarnedOfNoConnection","setHasWarnedOfNoConnection","isNoInternetConnectionScreen","isSearchErrorScreen","isSearchTipsScreen","isAltCardArtScreen","CardSearchPage","OptionsTitle","MiniCircleWithTransition","Title","MiniCircle","isDeleteDeckComponent","isAddDeckComponent","MiniCircleImg","DeleteMiniCircle","AddMiniCircle","DisabledText","SaveDeleteOrAddDeck","isDelete","isAdd","isSaveDeckComponent","currentOperation","clickedDeckId","handleDeckChange","deckLimitwasReached","cmpProps","save","disabledText","changeOperationState","miniCircleImg","miniCircle","isActiveDeck","isDemoComponent","setText","clickState","setClickState","handleBlur","nonStylesDisabled","Select","setClickedDeckId","onSwitchDeck","hasWarnedUnsavedChanges","setHasWarnedUnsavedChanges","handleDeckButtonClick","deckSelect","keyVal","MiniCircleWithState","initialValue","otherMiniCircleProps","setValue","modifyValue","prevValue","Text","miniCirclePosition","miniCircleTrigger","miniCircleDisplay","miniCircleProps","monster","MonsterImg","SpellImg","TrapImg","total","TotalMiniCircle","HelpDemoDrawCards","cardQty","setCardQty","currQty","handleSVGClick","stateKey","prevQty","handleTotalMiniCircleClick","getSVGImageWithNotificationsJSXForType","cardImg","selectionMenu","SelectionMenuTitles","SelectionMenuContentItem","genericMiniCircle","GenericMiniCircle","miniCircleWithImages","MiniCircleWithImages","addDeckIcon","AddDeckIcon","IconImage","deleteDeckIcon","DeleteDeckIcon","saveDeckIcon","SaveDeckIcon","deleteCardIcon","DeleteCardIcon","moveCardIcon","MoveCardIcon","getSelectionMenuEntries","getRegularMiniCircleJSX","DeckImageJSX","StatefulMiniCircleComponent","AddDeckMiniCircleComponent","DeleteDeckMiniCircleComponent","SaveDeckMiniCircleComponent","DeckSelectDemoComponent","DeleteCardMiniCircleComponent","MoveCardMiniCircleComponent","CardDrawDemoComponent","PlusOneMiniCircleComponent","edit","maxDecksAmount","maxDeckNameCharLength","getHelpSelectionMenuItems","componentsToRender","DeckIcon","getClickableMiniCircleJSX","addIcon","trashIcon","saveIcon","deleteIcon","imgObj","HelpSection","helpSelectionMenuItems","useMemo","ToastChildren","screenDivision","ScreenDivison","deckSelectComponent","DeckTitle","DeckSelect","saveDeckComponent","SaveTitle","SaveMiniCircle","SaveDisabledText","deleteDeckComponent","DeleteTitle","DeleteDisabledText","addDeckComponent","AddTitle","AddDisabledText","setCurrentOperation","closeToastFlag","setCloseToastFlag","toastTogglers","isDeckLimitReached","unfreezeApp","setToast","handleSwitchDeck","deckConstructorActionCreators","handleDeleteDeck","modifiedLSObj","saveDeck","handleAddDeck","LSObj","localStorageHandicapTimer","handleCardSearch","isDefaultDeck","isStartingDeck","deleteDeck","handleActionBeforeDeleting","addDeck","ToastClickable","getAdditionalToastJSX","deckCreatorHelp","selectOrEditDeck","GridDisplay","HalfScreenDivision","height","DeckBuilderTopScreen","DeckBuilderBottomScreen","SidebarMainSideExtra","isPortraitView","cardTotalInSection","getCardQuantityPerTypeAndCardQuantityTotal","cardQuantitiesObj","totalAmountOfCards","cardQuantitiesArray","typeAndQtyEntry","textArr","extraStyles","drawSFX","shuffleSFX","isClickDisabled","setIsClickDisabled","triggerActionAndFreezeApp","actionDispatch","handleDrawCard","handleShuffleOrReset","isShuffling","svgImagesKeyValArr","draw_1","draw_5","shuffle","reset","getSvgImagesKeyValArr","keyValArr","svgImg","reload","isDisabled","mainSideExtra","getClasses","fusion","synchro","xyz","pendulum","link","SVGImageContainer","SVGImageImage","SVGImageText","TestText","DeckCreatorSideBar","drawmp3","drawAudioJSX","shufflemp3","shuffleAudioJSX","svgImageWithNotification","MiniCircleImage","displayCharLength","maxCharLength","inputReferece","onInputSubmit","inputWithSubmitExtraProps","showCharLimit","spanDataId","spanAriaLabel","thisIsEditingInput","thisToggleEditingInput","editingState","helpSvgComponent","SVGDeckContainer","SVGHelpContainer","SVGHelpText","editableSpan","InputWithSubmitContainer","InputWithSubmitInput","InputWithSubmitCharLimit","DeckTitleSpan","editableSpanConfigs","deckOneNameChange","selectedDeckName","handleEditSuccess","newDeckName","onEditSuccess","setFallback","isValidDeckName","handleInputSubmit","blur","handleInputBlur","trimmedValue","audioTrack","forceSetValue","useDeckSelectionInputControls","handleHelpIconClick","CurrentSelectedDeck","propsClasses","ArrowMiniCircle","InfoMiniCircle","arrowObject","onModifyCardQuantity","onRemoveCardFromList","onMoveCardBetweenSections","onShowCardDetails","showCardDetails","showMiniCircles","toggleMiniCircles","handleQuantityMiniCircleClick","handleDeleteMiniCircleClick","handleMoveCardMiniCircleClick","dataDestination","handleInfoMiniCircleClick","data-name","info","InfoIcon","icon","arrowMiniCircle","DeleteIcon","deleteMiniCircle","deckBuilderTopScreen","deckBuilderBottomScreen","MiniCircleSide","SelectionMenuContainer","SelectionMenuContent","deckCreatorSideBar","DeckCreatorSideBarContainer","getCardListItemsJSXPerDeckSection","deckSections","arrowIcon","modifyQtyCallback","deleteItemCallback","moveCardCallback","showCardDetailsCallback","cardCacheLength","entry","cardListItemsJSXPerSection","defaultCardSection","reverseCardSection","arrowStyle","transform","arrowObj","handleModifyCardQuantity","handleRemoveCardFromList","handleChangeCurrentDeckSection","handleMoveCardBetweenSections","deckSectionName","cardQuantityPerSection","getCardQuantityPerDeckSection","cardListItemsKeyValArray","crossSVG","arrowSVG","miniCircleClasses","getCustomDeckSectionTitles","addMiniCircle","infoMiniCircle","CardSelectionItem","onAddCircleClick","onInfoCircleClick","cardColor","handleAddCircleClick","handleInfoCircleClick","refetchButton","ItemModifier","miniCircleMinus","ItemModifierMinus","jsx","loadingJSX","TextContainer","LoadingTextTitle","LoadingTextSubtitle","errorJSX","refetchCardList","ErrorTitle","ErrorSubtitle","cardsLoadedJSX","SuccessTitle","SuccessSubtitle","noMatchJSX","cards","handleCardClick","newCardList","InputLabel","InputInput","CardFilter","handleChange","screenDivisionTop","ScreenDivisionTop","screenDivisionBottom","ScreenDivisionBottom","setCards","previousValue","usePreviousState","getSVGImageWithNotificationsJSX","typeStatsObject","formatValueCallback","qty","chance","CardListStatsSVGs","testDeckStats","CardListStatsItem","drawChance","cardStyle","DrawPercentage","CardListStatsCards","remainingCards","getTestDeckStats","spreadedCardObjectsArray","statsObject","typeString","currCardVal","typeMap","typeStrings","sortRemainingCards","CardListOrStatsScreen","DeckBuilderPage","showDetails","propsContainerClasses","propsExpandContainerClasses","ExpandContainer","ExpandContent","Icon","ExpandIcon","siteObject","expIconSFX","toggleShowDetails","handleIconClick","expandContainer","aria-expanded","IconContainer","IconContentLarge","FixIconImage","ExpandIconContainer","LargeContainer","creditsScreens","socialMediaIcons","acknowledgmentsIcons","cardAndPricesSites","contactToggler","databaseToggler","acknowledgementsToggler","togglermp3","expIconAudioJSX","handleToastClick","creditSites","getExpandableIconsArray","siteNamesArray","siteNamesObject","inactiveCreditsOptions","rel","ToastBody","ToastHref","ss","ContactContent","CardAndPricesSites","CardSite","usePlayerConfigInputHandler","playerConfigLSTargetObj","initialConfigsFallbackObj","callbackToUpdateLocalStorage","playerConfigObject","playerConfigEntries","configState","setConfigState","fallbackValues","setFallBackValues","updateLSWithPlayerConfigs","localStorageKeyToUpdate","nestedKeyIfAny","rules","convertedValue","reverseInputs","updatedInputStates","objectsAreShallowlyEqual","cancel","ok","highestAllowedInputLength","inputValidator","isNaN","UICardContainer","OptionTitle","OptionBody","lifePointsInput","LifePointsContainer","LifePointsInput","p1InputRef","p2InputRef","updateLS","handleChangeInput","optionsConfigs","lifePointsCharLimit","OptionSwitchesCategory","lifepoints","LifePointsSVG","DiceSVG","coins","CoinSVG","CoinActive","TimerSVG","getSVGImgJSX","logActionDispatcher","setLPSwitch","diceLog","dispatchDiceLogAction","coinLog","dispatchCoinLogAction","handleDispatchToggleLogAction","logString","lpSwitchState","inactiveConfigsSwitches","ToastTextInactive","SfxSVG","handleToggleSFXs","sfxSwitch","musicNote","diceInput","DiceInput","minRollInputRef","maxRollInputRef","LimitAndTestTag","DangerZoneSecondaryScreen","onProceed","onCancel","proceedDisabled","dangerZoneChildrenInnerJSX","TickImageDisabled","dangerZoneChildrenJSX","Center","Important","cardRefetchBlockTimeout","List","cardRefetchToggler","reloadCardList","resetAppToggler","resetApp","isFetchCardsDisabled","handleFetchCards","cardRefetch","handleResetApp","localStorageResetKeyName","location","inactiveCardRefetch","incomingProps","optionBody","optionRefresh","optionReset","Options","OptionsPage","withRouter","fallbackRoute","slideClassName","uiContextObject","openModalmp3","closeModalmp3","modalAudioJSX","path","render","routeProps","to","ArrowText","ArrowTextLeft","getNavigationArrowJSX","destination","history","isSwipeFrozen","setIsSwipeFrozen","onArrowClick","pageSwipeActionCreators","pathname","freezeSwipeTimeout","freezeSwipe","appReset","onSwipedRight","onSwipedLeft","App","inactiveAppReset","ContextProviders","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","ReactDOM","StrictMode","getElementById","URL","process","origin","headers","response","contentType","status","ready","unregister","checkValidServiceWorker"],"mappings":"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OC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCC3CD,EAAOC,QAAU,CAAC,UAAY,8C,gBCA9BD,EAAOC,QAAU,CAAC,UAAY,yCAAyC,eAAe,8C,gBCAtFD,EAAOC,QAAU,CAAC,UAAY,yB,gBCA9BD,EAAOC,QAAU,CAAC,UAAY,gC,gBCD9BD,EAAOC,QAAU,IAA0B,kC,gBCC3CD,EAAOC,QAAU,CAAC,UAAY,gC,gBCA9BD,EAAOC,QAAU,CAAC,UAAY,iC,gBCA9BD,EAAOC,QAAU,CAAC,UAAY,uC,gBCA9BD,EAAOC,QAAU,CAAC,UAAY,oC,gBCD9BD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCC3CD,EAAOC,QAAU,CAAC,UAAY,2B,gBCD9BD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCC3CD,EAAOC,QAAU,CAAC,UAAY,6B,gBCA9BD,EAA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","file":"static/js/main.c851b67f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"CardSelection_Container__2kIlu\",\"TextContainer\":\"CardSelection_TextContainer__3ohwU\",\"SuccessTitle\":\"CardSelection_SuccessTitle__HMenN\",\"ErrorTitle\":\"CardSelection_ErrorTitle__vehZr\",\"LoadingTextTitle\":\"CardSelection_LoadingTextTitle__3ezud\",\"SuccessSubtitle\":\"CardSelection_SuccessSubtitle__3nwBg\",\"ErrorSubtitle\":\"CardSelection_ErrorSubtitle__18kzt\",\"LoadingTextSubtitle\":\"CardSelection_LoadingTextSubtitle__2-Czv\",\"SpinnerContainer\":\"CardSelection_SpinnerContainer__35Vki\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"DescScreen_Container__3_7xD\",\"LinkInfoContainer\":\"DescScreen_LinkInfoContainer__3iPe8\",\"RaceAttrib\":\"DescScreen_RaceAttrib__qrNh3\",\"AtkDef\":\"DescScreen_AtkDef__37oiL\",\"Banlist\":\"DescScreen_Banlist__2WYMJ\",\"CompressLinkInfoContainer\":\"DescScreen_CompressLinkInfoContainer__2uzV6\",\"ArrowIconContainer\":\"DescScreen_ArrowIconContainer___pOLF\",\"ArrowIconArrow\":\"DescScreen_ArrowIconArrow__e3sUl\",\"ContainerFilled\":\"DescScreen_ContainerFilled__2ey9h\",\"SwordIcon\":\"DescScreen_SwordIcon__2FTKD\",\"ShieldIcon\":\"DescScreen_ShieldIcon__3tFmu\",\"Description\":\"DescScreen_Description__1N42y\",\"AltArtTitle\":\"DescScreen_AltArtTitle__3E5My\",\"AltArtList\":\"DescScreen_AltArtList__1059y\",\"AltArtImg\":\"DescScreen_AltArtImg__17Tlh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ToastChildren\":\"SecondaryScreens_ToastChildren__30uQd\",\"ToastText\":\"SecondaryScreens_ToastText__RJkul\",\"ToastClickable\":\"SecondaryScreens_ToastClickable__2MInL\",\"GridDisplay\":\"SecondaryScreens_GridDisplay__2r_Oc\",\"DeckTitle\":\"SecondaryScreens_DeckTitle__rley7\",\"DeckSelect\":\"SecondaryScreens_DeckSelect__1BtbB\",\"SaveTitle\":\"SecondaryScreens_SaveTitle__1yEEp\",\"DeleteTitle\":\"SecondaryScreens_DeleteTitle__3c2B2\",\"AddTitle\":\"SecondaryScreens_AddTitle__343PI\",\"SaveMiniCircle\":\"SecondaryScreens_SaveMiniCircle__lytyO\",\"DeleteMiniCircle\":\"SecondaryScreens_DeleteMiniCircle__2AdAf\",\"AddMiniCircle\":\"SecondaryScreens_AddMiniCircle__22rqB\",\"SaveDisabledText\":\"SecondaryScreens_SaveDisabledText__1D1P1\",\"DeleteDisabledText\":\"SecondaryScreens_DeleteDisabledText__2kepX\",\"AddDisabledText\":\"SecondaryScreens_AddDisabledText__38gan\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"LogMenu_Container__1cD6J\",\"Bright0\":\"LogMenu_Bright0__1oW-2\",\"LogMenuIcon\":\"LogMenu_LogMenuIcon__uNX9c\",\"LogMenuIconActive\":\"LogMenu_LogMenuIconActive__1C8Fe\",\"LogIconTrash\":\"LogMenu_LogIconTrash__R5klp\",\"LogIconAll\":\"LogMenu_LogIconAll__1lB3F\",\"LogIconAllActive\":\"LogMenu_LogIconAllActive__1nYFQ\",\"LogIconDie\":\"LogMenu_LogIconDie__3n3ZM\",\"LogIconClock\":\"LogMenu_LogIconClock__1_Spc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"DescPriceScreen_Container__3brKw\",\"HalfScreen\":\"DescPriceScreen_HalfScreen__F8BbP\",\"ArrowIcon\":\"DescPriceScreen_ArrowIcon__CLa5y\",\"ArrowImage\":\"DescPriceScreen_ArrowImage__1L2y6\",\"ArrowPositionUp\":\"DescPriceScreen_ArrowPositionUp__tzyDt\",\"ArrowPositionDown\":\"DescPriceScreen_ArrowPositionDown__Ixy9T\",\"TopLeft\":\"DescPriceScreen_TopLeft__3xxoO\",\"Show\":\"DescPriceScreen_Show__1Hqbq\",\"Hide\":\"DescPriceScreen_Hide__Fs6EZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"LifePoints_Container__34pEA\",\"ContainerExpanded\":\"LifePoints_ContainerExpanded__1DUV_\",\"LPCalcContainer\":\"LifePoints_LPCalcContainer__mOS-n\",\"LPContainer\":\"LifePoints_LPContainer__3Xq3x\",\"LPContainerExpanded\":\"LifePoints_LPContainerExpanded__3VenX\",\"PlayerOneTag\":\"LifePoints_PlayerOneTag__ywF5u\",\"PlayerTwoTag\":\"LifePoints_PlayerTwoTag__IuB3t\",\"PlayerOneTagForm\":\"LifePoints_PlayerOneTagForm__2Hzi9\",\"PlayerTwoTagForm\":\"LifePoints_PlayerTwoTagForm__3hcjQ\",\"PlayerOneTagInput\":\"LifePoints_PlayerOneTagInput__1c6Qg\",\"PlayerTwoTagInput\":\"LifePoints_PlayerTwoTagInput__2sg_3\",\"PlayerOneCharLimit\":\"LifePoints_PlayerOneCharLimit__3epuF\",\"PlayerTwoCharLimit\":\"LifePoints_PlayerTwoCharLimit__1TFEs\",\"ActiveTagName\":\"LifePoints_ActiveTagName__V8WF4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ToastText\":\"SearchScreen_ToastText__1Ggd4\",\"ToastLinkInline\":\"SearchScreen_ToastLinkInline__377Y2\",\"ToastLink\":\"SearchScreen_ToastLink__2owjk\",\"Container\":\"SearchScreen_Container__1yEqx\",\"ArrowContainer\":\"SearchScreen_ArrowContainer__2JnCk\",\"ArrowContainerLeft\":\"SearchScreen_ArrowContainerLeft__zI-nT\",\"ArrowContainerRight\":\"SearchScreen_ArrowContainerRight__1iBAY\",\"ArrowArrow\":\"SearchScreen_ArrowArrow__1LWUu\",\"ExtraText\":\"SearchScreen_ExtraText__3ErFD\",\"ExtraTextList\":\"SearchScreen_ExtraTextList__30XPQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SelectionMenuTitles\":\"HelpSection_SelectionMenuTitles__1YfyK\",\"SelectionMenuContentItem\":\"HelpSection_SelectionMenuContentItem__1pbUq\",\"DeckIcon\":\"HelpSection_DeckIcon__GyiWX\",\"MiniCircleWithImages\":\"HelpSection_MiniCircleWithImages__2r_ec\",\"GenericMiniCircle\":\"HelpSection_GenericMiniCircle__AUfG2\",\"IconImage\":\"HelpSection_IconImage__3jIIP\",\"AddDeckIcon\":\"HelpSection_AddDeckIcon__1WqLH\",\"DeleteDeckIcon\":\"HelpSection_DeleteDeckIcon__3wqPS\",\"SaveDeckIcon\":\"HelpSection_SaveDeckIcon__nqN19\",\"DeleteCardIcon\":\"HelpSection_DeleteCardIcon__c2A2e\",\"MoveCardIcon\":\"HelpSection_MoveCardIcon__1ycS5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ToastBody\":\"SecondaryScreens_ToastBody__2ZO9p\",\"ToastHref\":\"SecondaryScreens_ToastHref__2mvEJ\",\"ContactContent\":\"SecondaryScreens_ContactContent__1gtMR\",\"IconContainer\":\"SecondaryScreens_IconContainer__BkEyq\",\"IconYugipedia\":\"SecondaryScreens_IconYugipedia__MZ6VD\",\"IconLinkedin\":\"SecondaryScreens_IconLinkedin__2QkHk\",\"IconNonYugiohAssets\":\"SecondaryScreens_IconNonYugiohAssets__1e-_l\",\"IconGithub\":\"SecondaryScreens_IconGithub__24Xk4\",\"IconReact\":\"SecondaryScreens_IconReact__2jUVo\",\"IconMail\":\"SecondaryScreens_IconMail__JEejE\",\"ExpandIconContainer\":\"SecondaryScreens_ExpandIconContainer__1z9Dk\",\"LargeContainer\":\"SecondaryScreens_LargeContainer__EwBxp\",\"FixIconImage\":\"SecondaryScreens_FixIconImage__2a2ye\",\"IconYugipediaFixed\":\"SecondaryScreens_IconYugipediaFixed__zHVwt\",\"IconNonYugiohAssetsFixed\":\"SecondaryScreens_IconNonYugiohAssetsFixed__2jYVF\",\"IconReactFixed\":\"SecondaryScreens_IconReactFixed__m7UmZ\",\"CardAndPricesSites\":\"SecondaryScreens_CardAndPricesSites__3UPiT\",\"CardSite\":\"SecondaryScreens_CardSite__1NYw3\",\"IconContentLarge\":\"SecondaryScreens_IconContentLarge__1iy_e\",\"IconLinkedinFixed\":\"SecondaryScreens_IconLinkedinFixed__U1O-J\"};","module.exports = __webpack_public_path__ + \"static/media/cross.2d98bc1e.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"LifePointsGauge_Container__1KPyZ\",\"ActiveContainer\":\"LifePointsGauge_ActiveContainer__2LDd4\",\"PlayerTag\":\"LifePointsGauge_PlayerTag__1uGLV\",\"ActiveTag\":\"LifePointsGauge_ActiveTag__2NCoL\",\"AnimatedNumber\":\"LifePointsGauge_AnimatedNumber__2FjUn\",\"AffectedLP\":\"LifePointsGauge_AffectedLP__1PeDj\",\"affectLP\":\"LifePointsGauge_affectLP__3I0F2\",\"Progress\":\"LifePointsGauge_Progress__2Sz2H\",\"ActiveProgress\":\"LifePointsGauge_ActiveProgress__3161X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"HelpDemoDrawCards_Container__2hdsL\",\"MonsterImg\":\"HelpDemoDrawCards_MonsterImg__39Hed\",\"SpellImg\":\"HelpDemoDrawCards_SpellImg__ezO1F\",\"TrapImg\":\"HelpDemoDrawCards_TrapImg__6mfrC\",\"Text\":\"HelpDemoDrawCards_Text__3Ky1V\",\"MiniCircle\":\"HelpDemoDrawCards_MiniCircle__1AqZ8\",\"TotalMiniCircle\":\"HelpDemoDrawCards_TotalMiniCircle__3sHE7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ToastText\":\"LogSwitches_ToastText__fnbF4\",\"ToastLogItems\":\"LogSwitches_ToastLogItems__C9iPF\",\"Title\":\"LogSwitches_Title__3jAIr\",\"LifePointsSVG\":\"LogSwitches_LifePointsSVG__3NXLP\",\"DiceSVG\":\"LogSwitches_DiceSVG__35do8\",\"CoinSVG\":\"LogSwitches_CoinSVG__1mLGT\",\"TimerSVG\":\"LogSwitches_TimerSVG__1D9bp\",\"Active\":\"LogSwitches_Active__3_x6y\",\"CoinActive\":\"LogSwitches_CoinActive__uvZFn\",\"logAnimation\":\"LogSwitches_logAnimation__33ovH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__X8ctu\",\"ToastText\":\"App_ToastText__2-PCj\",\"ArrowContainer\":\"App_ArrowContainer__1_q1H\",\"ArrowContainerLeft\":\"App_ArrowContainerLeft__3y__C\",\"ArrowImage\":\"App_ArrowImage__3B_Hs\",\"ArrowImageLeft\":\"App_ArrowImageLeft__2xv-0\",\"ArrowText\":\"App_ArrowText__1C8sc\",\"ArrowTextLeft\":\"App_ArrowTextLeft__23uUs\",\"SpinnerContainer\":\"App_SpinnerContainer__KDVJb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"CalculatorLeftSide_Container__2iMMg\",\"Collapsed\":\"CalculatorLeftSide_Collapsed__3NlP1\",\"SliderContainer\":\"CalculatorLeftSide_SliderContainer__3fY_F\",\"TimerCounter\":\"CalculatorLeftSide_TimerCounter__lfuR5\",\"Timer\":\"CalculatorLeftSide_Timer__156K9\",\"SliderContainerCollapsed\":\"CalculatorLeftSide_SliderContainerCollapsed__lLr5z\",\"SliderSelector\":\"CalculatorLeftSide_SliderSelector__1CR1L\",\"SliderSelectorOn\":\"CalculatorLeftSide_SliderSelectorOn__9J_zU\",\"SliderTextOff\":\"CalculatorLeftSide_SliderTextOff__3ysgN\",\"SliderTextOn\":\"CalculatorLeftSide_SliderTextOn__1aO3R\",\"ProgressBarContainer\":\"CalculatorLeftSide_ProgressBarContainer__17zpj\",\"ProgressBarContainerCollapsed\":\"CalculatorLeftSide_ProgressBarContainerCollapsed__1633e\",\"ProgressBarPercentage\":\"CalculatorLeftSide_ProgressBarPercentage__6HbXg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ArrowIcon_Container__2pX_b\",\"ArrowImage\":\"ArrowIcon_ArrowImage__1LLi6\",\"ExtraText\":\"ArrowIcon_ExtraText__1yw60\",\"ContainerDisabled\":\"ArrowIcon_ContainerDisabled__11mFo\",\"ArrowImageDisabled\":\"ArrowIcon_ArrowImageDisabled__2PB5f\",\"Clickable\":\"ArrowIcon_Clickable__1rtQq\",\"Active\":\"ArrowIcon_Active__1qbZp\",\"Left\":\"ArrowIcon_Left__ZyPMB\",\"Top-Left\":\"ArrowIcon_Top-Left__291_z\",\"Top\":\"ArrowIcon_Top__s1t3r\",\"Top-Right\":\"ArrowIcon_Top-Right__3NXQT\",\"Right\":\"ArrowIcon_Right__5WUi4\",\"Bottom-Right\":\"ArrowIcon_Bottom-Right__2ue11\",\"Bottom\":\"ArrowIcon_Bottom__39t5X\",\"Bottom-Left\":\"ArrowIcon_Bottom-Left__2BAvN\"};","module.exports = __webpack_public_path__ + \"static/media/clickOK.3300ec64.mp3\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CurrentSelectedDeck\":\"DeckSelectionAndHelpMenu_CurrentSelectedDeck__csgO8\",\"SVGHelpContainer\":\"DeckSelectionAndHelpMenu_SVGHelpContainer__1inbX\",\"SVGHelpText\":\"DeckSelectionAndHelpMenu_SVGHelpText__art-x\",\"InputWithSubmitContainer\":\"DeckSelectionAndHelpMenu_InputWithSubmitContainer__3vGEh\",\"InputWithSubmitInput\":\"DeckSelectionAndHelpMenu_InputWithSubmitInput__PBYbx\",\"InputWithSubmitCharLimit\":\"DeckSelectionAndHelpMenu_InputWithSubmitCharLimit__3iUeR\",\"DeckTitleSpan\":\"DeckSelectionAndHelpMenu_DeckTitleSpan__22kH8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"CardListItem_Container__2FTOV\",\"InfoMiniCircle\":\"CardListItem_InfoMiniCircle__1JSO0\",\"DeleteMiniCircle\":\"CardListItem_DeleteMiniCircle__1XPV_\",\"ArrowMiniCircle\":\"CardListItem_ArrowMiniCircle__21I1e\",\"MiniCircle\":\"CardListItem_MiniCircle__3nTqB\",\"DeleteIcon\":\"CardListItem_DeleteIcon__1h3eJ\",\"ArrowIcon\":\"CardListItem_ArrowIcon__3a9uF\",\"InfoIcon\":\"CardListItem_InfoIcon__2qX7t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"SecondaryScreen_Backdrop__2y3k9\",\"ContentContainer\":\"SecondaryScreen_ContentContainer__1Jp7j\",\"Small\":\"SecondaryScreen_Small__ELGGS\",\"Large\":\"SecondaryScreen_Large__AJS23\",\"Scrollable\":\"SecondaryScreen_Scrollable__1p623\",\"Flex\":\"SecondaryScreen_Flex__1cXMH\",\"FadeIn\":\"SecondaryScreen_FadeIn__3KLZs\",\"fade-in-out\":\"SecondaryScreen_fade-in-out__2ko57\",\"FadeOut\":\"SecondaryScreen_FadeOut__3bg_3\",\"ScaleIn\":\"SecondaryScreen_ScaleIn__2dCeH\",\"scale-in-out\":\"SecondaryScreen_scale-in-out__2W6AN\",\"ScaleOut\":\"SecondaryScreen_ScaleOut__1z_Cl\",\"TranslateDownIn\":\"SecondaryScreen_TranslateDownIn__3ozEg\",\"translate-down-in-out\":\"SecondaryScreen_translate-down-in-out__1dBFS\",\"TranslateDownOut\":\"SecondaryScreen_TranslateDownOut__3JCRx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"CalculatorRightSide_Container__34eN6\",\"Collapsed\":\"CalculatorRightSide_Collapsed__2AN6s\",\"Coin\":\"CalculatorRightSide_Coin__2ndut\",\"Die\":\"CalculatorRightSide_Die__3Xu5X\",\"Token\":\"CalculatorRightSide_Token__1QoNt\",\"CoinCollapsed\":\"CalculatorRightSide_CoinCollapsed__3oGs6\",\"DieCollapsed\":\"CalculatorRightSide_DieCollapsed__3O7Dr\",\"TokenCollapsed\":\"CalculatorRightSide_TokenCollapsed__2-nyt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TemporaryBorder\":\"DeckCreatorScreen_TemporaryBorder__1oF3N\",\"DeckBuilderTopScreen\":\"DeckCreatorScreen_DeckBuilderTopScreen__PPbbO\",\"DeckBuilderBottomScreen\":\"DeckCreatorScreen_DeckBuilderBottomScreen__34ay2\",\"MiniCircleSide\":\"DeckCreatorScreen_MiniCircleSide__2BIgH\",\"MiniCircle\":\"DeckCreatorScreen_MiniCircle__1GurS\",\"SelectionMenuContainer\":\"DeckCreatorScreen_SelectionMenuContainer__TtfUM\",\"SelectionMenuContent\":\"DeckCreatorScreen_SelectionMenuContent__28jXs\",\"DeckCreatorSideBarContainer\":\"DeckCreatorScreen_DeckCreatorSideBarContainer__13zdo\",\"ScreenDivision\":\"DeckCreatorScreen_ScreenDivision__1zIpA\"};","module.exports = __webpack_public_path__ + \"static/media/arrow2.f040e975.svg\";","module.exports = __webpack_public_path__ + \"static/media/clickCancel.32e0515d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/switch.08e04717.mp3\";","module.exports = __webpack_public_path__ + \"static/media/trash.ac1a3c38.svg\";","module.exports = __webpack_public_path__ + \"static/media/card.8e5b5761.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"RestartConfirmScreen_Container__30JcS\",\"ConfirmMsg\":\"RestartConfirmScreen_ConfirmMsg__2HPO1\",\"Message\":\"RestartConfirmScreen_Message__1F9Jg\",\"Buttons\":\"RestartConfirmScreen_Buttons__3FUxg\",\"TickImage\":\"RestartConfirmScreen_TickImage__2m4SR\",\"CancelImage\":\"RestartConfirmScreen_CancelImage__11TAe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"PriceScreen_Container__JfP8W\",\"BorderPrimary\":\"PriceScreen_BorderPrimary__3G69N\",\"BorderSecondary\":\"PriceScreen_BorderSecondary__1Qo4H\",\"Sets\":\"PriceScreen_Sets__23KCc\",\"BestPrices\":\"PriceScreen_BestPrices__1v6qz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"CardListStatsSVGs_Container__1I6c6\",\"Title\":\"CardListStatsSVGs_Title__-bJlx\",\"SVGImageContainer\":\"CardListStatsSVGs_SVGImageContainer__1iP8Y\",\"SVGImageText\":\"CardListStatsSVGs_SVGImageText__25TTR\",\"SVGImageContainerMonster\":\"CardListStatsSVGs_SVGImageContainerMonster__1t9JV\",\"SVGImageContainerSpell\":\"CardListStatsSVGs_SVGImageContainerSpell__1o-OW\",\"SVGImageContainerTrap\":\"CardListStatsSVGs_SVGImageContainerTrap__y0ZiT\",\"Monster\":\"CardListStatsSVGs_Monster__2CjE0\",\"Spell\":\"CardListStatsSVGs_Spell__1Ubbg\",\"Trap\":\"CardListStatsSVGs_Trap__1V_Te\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3QPnJ\",\"Primary\":\"Button_Primary__2yXak\",\"Secondary\":\"Button_Secondary__1CEM7\",\"Disabled\":\"Button_Disabled__3uTo8\",\"PrimaryText\":\"Button_PrimaryText__1c0r8\",\"Highlight\":\"Button_Highlight__1l71B\",\"GrowSmall\":\"Button_GrowSmall__1ncYi\",\"inlineBlock\":\"Button_inlineBlock__3xUmr\",\"fullWidth\":\"Button_fullWidth__qtxiP\",\"width92\":\"Button_width92__2Gf9v\",\"width90\":\"Button_width90__fsukH\",\"width85\":\"Button_width85__3ysG5\",\"width65\":\"Button_width65__2fqH5\",\"width50\":\"Button_width50__2fh3J\",\"width30\":\"Button_width30__1rCPn\",\"width25\":\"Button_width25__3K6Iv\",\"width0\":\"Button_width0__PRTxd\",\"oneInRow\":\"Button_oneInRow__12gBT\",\"twoInRow\":\"Button_twoInRow__r6TcF\",\"threeInRow\":\"Button_threeInRow__1tbLI\",\"fourInRow\":\"Button_fourInRow__3PoXN\",\"height50\":\"Button_height50__2NN1z\",\"height20\":\"Button_height20__M9hrP\",\"letterSpacing\":\"Button_letterSpacing__2Zqv6\",\"letterSpacing015\":\"Button_letterSpacing015__3X0aT\",\"flex-center\":\"Button_flex-center__1HuLs\",\"standardMdText\":\"Button_standardMdText__p_qxM\",\"bold\":\"Button_bold__1vpFR\",\"italic\":\"Button_italic__3Fpgb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Token_Container__1c6CE\",\"Image\":\"Token_Image__1iDgE\",\"ImageActive\":\"Token_ImageActive__1tKbu\",\"TokenQty\":\"Token_TokenQty__2APhG\",\"TokenQtyActive\":\"Token_TokenQtyActive__37zJe\",\"Arrow\":\"Token_Arrow__4JZ5T\",\"ArrowImage\":\"Token_ArrowImage__30Cee\",\"ArrowImageActive\":\"Token_ArrowImageActive__3dEze\",\"ArrowTop\":\"Token_ArrowTop__2Qgy5\",\"ArrowRight\":\"Token_ArrowRight__tImzN\",\"ArrowBottom\":\"Token_ArrowBottom__2AH_D\",\"ArrowLeft\":\"Token_ArrowLeft__2z2Bx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"InputWithLabel_Container__2oCrG\",\"Label\":\"InputWithLabel_Label__2md0U\",\"LabelUp\":\"InputWithLabel_LabelUp__3aWTQ\",\"LabelDisabled\":\"InputWithLabel_LabelDisabled__2fBEu\",\"Input\":\"InputWithLabel_Input__Ijq4p\",\"HelpText\":\"InputWithLabel_HelpText__3p0kP\",\"HelpTextActive\":\"InputWithLabel_HelpTextActive__3_zoV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Title\":\"SaveDeleteOrAddDeck_Title__1d42z\",\"MiniCircle\":\"SaveDeleteOrAddDeck_MiniCircle__3CQ13\",\"MiniCircleImg\":\"SaveDeleteOrAddDeck_MiniCircleImg__3dEzp\",\"DeleteMiniCircle\":\"SaveDeleteOrAddDeck_DeleteMiniCircle__3epQK\",\"AddMiniCircle\":\"SaveDeleteOrAddDeck_AddMiniCircle__2KjZ4\",\"DisabledText\":\"SaveDeleteOrAddDeck_DisabledText__1rind\",\"SpinnerContainer\":\"SaveDeleteOrAddDeck_SpinnerContainer__oQnXu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"SVGImageWithNotifications_Container__1k8PT\",\"Disabled\":\"SVGImageWithNotifications_Disabled__1-Qqz\",\"Clickable\":\"SVGImageWithNotifications_Clickable__3Zj_Z\",\"Image\":\"SVGImageWithNotifications_Image__3X2lY\",\"Text\":\"SVGImageWithNotifications_Text__1jmET\",\"MiniCircle\":\"SVGImageWithNotifications_MiniCircle__1uFmE\",\"bottom-left\":\"SVGImageWithNotifications_bottom-left__3wpHA\",\"bottom-right\":\"SVGImageWithNotifications_bottom-right__2VYGe\",\"top-left\":\"SVGImageWithNotifications_top-left__1u5V9\",\"top-right\":\"SVGImageWithNotifications_top-right__2SSF8\",\"animate-text\":\"SVGImageWithNotifications_animate-text__18HBq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ToastText\":\"Calculator_ToastText__udNlw\",\"ToastLogItems\":\"Calculator_ToastLogItems__289zh\",\"Container\":\"Calculator_Container__1z0eV\",\"Collapsed\":\"Calculator_Collapsed__1qtn8\",\"MidColumn\":\"Calculator_MidColumn__30lo4\",\"logAnimation\":\"Calculator_logAnimation__1h6Xg\",\"toggleCalcButton\":\"Calculator_toggleCalcButton__1_Fny\",\"flickerCalcSides\":\"Calculator_flickerCalcSides__Xxx9t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"SearchMenu_Container__2oEgN\",\"InputContainer\":\"SearchMenu_InputContainer__1wR-i\",\"SearchIcon\":\"SearchMenu_SearchIcon__1Epul\",\"HelpIcon\":\"SearchMenu_HelpIcon__1lQQU\",\"SpinnerContainer\":\"SearchMenu_SpinnerContainer__pawK7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"CardSelectionItem_Container__1QwyR\",\"MiniCircle\":\"CardSelectionItem_MiniCircle__2OUlC\",\"InfoMiniCircle\":\"CardSelectionItem_InfoMiniCircle__1p8ji\",\"InfoIcon\":\"CardSelectionItem_InfoIcon__2_pHg\",\"grow\":\"CardSelectionItem_grow__2eMvH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ToastText\":\"SFXSwitch_ToastText__2eepS\",\"ToastTextInactive\":\"SFXSwitch_ToastTextInactive__1tiZ4\",\"Title\":\"SFXSwitch_Title__2LEyv\",\"SfxSVG\":\"SFXSwitch_SfxSVG__3WMyT\",\"Active\":\"SFXSwitch_Active__2pSBn\",\"sfxTextAnimation\":\"SFXSwitch_sfxTextAnimation__3WJPR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LimitAndTestTag\":\"DiceLimits_LimitAndTestTag__yySPp\",\"DiceInput\":\"DiceLimits_DiceInput__1ijv2\",\"Die\":\"DiceLimits_Die__4HcOm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Slider_Container__2HVnd\",\"SlideBar\":\"Slider_SlideBar__wUjcd\",\"SliderSwitchOff\":\"Slider_SliderSwitchOff__2IQ3W\",\"SliderSwitchOn\":\"Slider_SliderSwitchOn__2Y_eF\",\"TextOff\":\"Slider_TextOff__3ToK6\",\"TextOn\":\"Slider_TextOn__2ADLc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"SelectionMenuScreen_Container__iUsfk\",\"Menu\":\"SelectionMenuScreen_Menu__1QyE4\",\"Active\":\"SelectionMenuScreen_Active__3lH_K\",\"MenuItem\":\"SelectionMenuScreen_MenuItem__18SfV\",\"Content\":\"SelectionMenuScreen_Content__5jv-T\",\"li-items-slide-enter\":\"SelectionMenuScreen_li-items-slide-enter__-ljwe\",\"li-items-slide-exit\":\"SelectionMenuScreen_li-items-slide-exit__2ZkbM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ExpandableIcon_Container__2tzqO\",\"Content\":\"ExpandableIcon_Content__2eK9R\",\"Icon\":\"ExpandableIcon_Icon__35G6N\",\"ExpandContainer\":\"ExpandableIcon_ExpandContainer__3Q8BA\",\"ExpandContent\":\"ExpandableIcon_ExpandContent__1eKer\",\"growText\":\"ExpandableIcon_growText__3t_81\",\"ExpandIcon\":\"ExpandableIcon_ExpandIcon__3z0Kn\",\"Clickable\":\"ExpandableIcon_Clickable__1ieeP\"};","module.exports = __webpack_public_path__ + \"static/media/spell.85c536bc.svg\";","module.exports = __webpack_public_path__ + \"static/media/tick.16766bbf.svg\";","module.exports = __webpack_public_path__ + \"static/media/swipe.abfe714a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/switchTitles.a96fdb6d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/die.6a6a1f38.svg\";","module.exports = __webpack_public_path__ + \"static/media/coin.48f370ee.svg\";","module.exports = __webpack_public_path__ + \"static/media/toast.5d33a140.mp3\";","module.exports = __webpack_public_path__ + \"static/media/save.77e6c7f1.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"LifePointsCounterPage_Container__1Br57\",\"CalculatorMiniCircle\":\"LifePointsCounterPage_CalculatorMiniCircle__2LTNU\",\"CalculatorMiniCircleActive\":\"LifePointsCounterPage_CalculatorMiniCircleActive__3iOqs\",\"CalculatorImage\":\"LifePointsCounterPage_CalculatorImage__rO44U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ListScreen_Container__2_gez\",\"Card\":\"ListScreen_Card__3UsEL\",\"SpinnerContainer\":\"ListScreen_SpinnerContainer__15M3S\",\"ExtraInfo\":\"ListScreen_ExtraInfo__7WfH_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PlayerTag\":\"LifePoints_PlayerTag__1Xq7p\",\"LifePointsContainer\":\"LifePoints_LifePointsContainer__-cjUA\",\"LifePointsInput\":\"LifePoints_LifePointsInput__3Km5v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SVGImageContainer\":\"DeckCreatorSideBar_SVGImageContainer__4p2LD\",\"SVGImageImage\":\"DeckCreatorSideBar_SVGImageImage__28Z3S\",\"SVGImageText\":\"DeckCreatorSideBar_SVGImageText__Yiwjq\",\"TestText\":\"DeckCreatorSideBar_TestText__1HiA6\",\"Monster\":\"DeckCreatorSideBar_Monster__3Z1g4\",\"Spell\":\"DeckCreatorSideBar_Spell__1Ck5o\",\"Trap\":\"DeckCreatorSideBar_Trap__H32nI\",\"Fusion\":\"DeckCreatorSideBar_Fusion__25qbl\",\"Synchro\":\"DeckCreatorSideBar_Synchro__1rFU_\",\"XYZ\":\"DeckCreatorSideBar_XYZ__2BFa0\",\"Link\":\"DeckCreatorSideBar_Link__2iTCp\",\"Draw-1\":\"DeckCreatorSideBar_Draw-1__2u_hw\",\"Draw-5\":\"DeckCreatorSideBar_Draw-5__19LuC\",\"Shuffle\":\"DeckCreatorSideBar_Shuffle__pC5Rl\",\"Reset\":\"DeckCreatorSideBar_Reset__3LCGj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Span\":\"EditableSpan_Span__2T_6l\",\"Input\":\"EditableSpan_Input__1dkLW\",\"CharLimit\":\"EditableSpan_CharLimit__201fF\",\"Form\":\"EditableSpan_Form__h0WfV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"TimerScreen_Container__202n2\",\"Input\":\"TimerScreen_Input__S5ZmS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"AltArtImgDisplay_Container__2j3g_\",\"SpinnerContainer\":\"AltArtImgDisplay_SpinnerContainer__3RQiw\",\"CardImage\":\"AltArtImgDisplay_CardImage__O4_hU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"DeckSelectionAndEditing_Container__38d2M\",\"MiniCircle\":\"DeckSelectionAndEditing_MiniCircle__26_Jq\",\"MiniCircleImage\":\"DeckSelectionAndEditing_MiniCircleImage__pXZ-c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"CardListStatsItem_Container__3paP0\",\"DrawPercentage\":\"CardListStatsItem_DrawPercentage__3tu8p\",\"MiniCircle\":\"CardListStatsItem_MiniCircle__1-ZxK\",\"grow\":\"CardListStatsItem_grow__3Dhlq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Configs_Container__3hBWW\",\"Options\":\"Configs_Options__2zAsw\",\"Card\":\"Configs_Card__1FqOq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Credits_Container__2Y5J3\",\"Options\":\"Credits_Options__2jc0S\",\"Card\":\"Credits_Card__3U6yp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"MiniCircle_Container__Mmuhs\",\"ContainerActive\":\"MiniCircle_ContainerActive__3Biu-\",\"Clickable\":\"MiniCircle_Clickable__3d1sM\",\"Grow\":\"MiniCircle_Grow__Nr04S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Span\":\"PlayerNameTag_Span__bHpgg\",\"Form\":\"PlayerNameTag_Form__2c-hM\",\"Input\":\"PlayerNameTag_Input__QP_9t\",\"CharLimit\":\"PlayerNameTag_CharLimit__3LAy9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ProgressBar_Container__23n3T\",\"Timer\":\"ProgressBar_Timer__1uSo6\",\"Progress\":\"ProgressBar_Progress__2gEmI\",\"Percentage\":\"ProgressBar_Percentage__2nSZG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"LogScreen_Container__2yf1N\",\"LogBackground\":\"LogScreen_LogBackground__jC6js\",\"Header\":\"LogScreen_Header__1C6F4\",\"Content\":\"LogScreen_Content__3-Ib5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"LogDeleteScreen_Container__2d12E\",\"Message\":\"LogDeleteScreen_Message__1Nmwf\",\"Buttons\":\"LogDeleteScreen_Buttons__2HRWU\",\"DeleteImage\":\"LogDeleteScreen_DeleteImage__QmMio\",\"CancelImage\":\"LogDeleteScreen_CancelImage__208iU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"RotatableArrowIcon_Container__1b8lT\",\"ArrowImage\":\"RotatableArrowIcon_ArrowImage__2LJ7f\",\"Left\":\"RotatableArrowIcon_Left__wpmLd\",\"UpLeft\":\"RotatableArrowIcon_UpLeft__1k_Qq\",\"Up\":\"RotatableArrowIcon_Up__1TSe-\",\"UpRight\":\"RotatableArrowIcon_UpRight__1HCAo\",\"Right\":\"RotatableArrowIcon_Right__1hwGo\",\"DownRight\":\"RotatableArrowIcon_DownRight__1ljXx\",\"Down\":\"RotatableArrowIcon_Down__2Ibwa\",\"DownLeft\":\"RotatableArrowIcon_DownLeft__3s-z4\",\"RightRotation\":\"RotatableArrowIcon_RightRotation__2TIjt\",\"LeftRotation\":\"RotatableArrowIcon_LeftRotation__3BL2w\",\"UpRotation\":\"RotatableArrowIcon_UpRotation__328WF\",\"DownRotation\":\"RotatableArrowIcon_DownRotation__2lBt_\"};","module.exports = __webpack_public_path__ + \"static/media/dice.12b3795b.mp3\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Input_Container__2H4Fx\",\"Disabled\":\"Input_Disabled__3-3Hb\"};","module.exports = __webpack_public_path__ + \"static/media/heart.e926cff8.svg\";","module.exports = __webpack_public_path__ + \"static/media/clock.e6900cd5.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Chase\":\"Spinner_Chase__2c78U\",\"spinner\":\"Spinner_spinner__3UIB4\",\"ChaseDot\":\"Spinner_ChaseDot__b8Kbx\",\"spinner-dot\":\"Spinner_spinner-dot__KKJ7R\",\"spinner-dot-before\":\"Spinner_spinner-dot-before__1eNts\"};","module.exports = __webpack_public_path__ + \"static/media/help.95a02a4b.svg\";","module.exports = __webpack_public_path__ + \"static/media/add.84281a59.svg\";","module.exports = __webpack_public_path__ + \"static/media/deck.5f1f95f5.svg\";","module.exports = __webpack_public_path__ + \"static/media/info.b753f76d.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Toast_Container__3NUWC\",\"Children\":\"Toast_Children__2lQfz\",\"Cross\":\"Toast_Cross__U935y\",\"toast-in-out\":\"Toast_toast-in-out__wY825\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ImgScreen_Container__3O9we\",\"CardImage\":\"ImgScreen_CardImage__BTceY\",\"CardImageActive\":\"ImgScreen_CardImageActive__2ULYz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputContainer\":\"CardFilter_InputContainer__1Lr7l\",\"InputLabel\":\"CardFilter_InputLabel__3ox9o\",\"InputInput\":\"CardFilter_InputInput__1MM7m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"CardSearchScreenDivision_Container__2vJaU\"};","module.exports = __webpack_public_path__ + \"static/media/cardNotFound.c5b52c7b.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"DeckBuilderTopScreen_Container__333df\"};","module.exports = __webpack_public_path__ + \"static/media/openModal.18348877.mp3\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Coin_Container__r4PbS\",\"Result\":\"Coin_Result__1F5mj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"InputWithSubmit_Container__2hO4x\",\"Input\":\"InputWithSubmit_Input__1uRZ8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Default\":\"SVGImage_Default__2y75h\",\"Primary\":\"SVGImage_Primary__22A1k\",\"Secondary\":\"SVGImage_Secondary__OMwLN\",\"Disabled\":\"SVGImage_Disabled__3Ot3A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Title\":\"DeckMenu_Title__1YGCY\",\"Select\":\"DeckMenu_Select__25yrb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ScreenDivisionTop\":\"CardListScreen_ScreenDivisionTop__30A3W\",\"ScreenDivisionBottom\":\"CardListScreen_ScreenDivisionBottom__135h8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Card_Container__z9yLK\",\"Primary\":\"Card_Primary__merxB\",\"Secondary\":\"Card_Secondary__1jCXJ\",\"Danger\":\"Card_Danger__3dSmo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"DangerZoneSecondaryScreen_Container__2aMvS\",\"Title\":\"DangerZoneSecondaryScreen_Title__eiOgg\",\"Content\":\"DangerZoneSecondaryScreen_Content__sLHoo\",\"List\":\"DangerZoneSecondaryScreen_List__m4LvU\",\"Important\":\"DangerZoneSecondaryScreen_Important__7JM1H\",\"Center\":\"DangerZoneSecondaryScreen_Center__2lAWy\",\"Buttons\":\"DangerZoneSecondaryScreen_Buttons__2gwxN\",\"TickImageDisabled\":\"DangerZoneSecondaryScreen_TickImageDisabled__23cAB\",\"TickImage\":\"DangerZoneSecondaryScreen_TickImage__3n1ry\",\"CancelImage\":\"DangerZoneSecondaryScreen_CancelImage__r604q\"};","module.exports = __webpack_public_path__ + \"static/media/closeModal.d472ad6d.mp3\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ErrorMessage_Container__eChvT\"};","module.exports = __webpack_public_path__ + \"static/media/linkedin.9784d265.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.c92baff6.svg\";","module.exports = __webpack_public_path__ + \"static/media/mail.1d4766e6.svg\";","module.exports = __webpack_public_path__ + \"static/media/react.525dbb9c.svg\";","module.exports = __webpack_public_path__ + \"static/media/nonYugiohAssets.173174fa.svg\";","module.exports = __webpack_public_path__ + \"static/media/yugioh.5fa0b9b5.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"GenericErrorMessage_Container__j7bSB\"};","module.exports = __webpack_public_path__ + \"static/media/light.725d4fc3.svg\";","module.exports = __webpack_public_path__ + \"static/media/dark.63d8e84b.svg\";","module.exports = __webpack_public_path__ + \"static/media/earth.3996c29a.svg\";","module.exports = __webpack_public_path__ + \"static/media/fire.469a8763.svg\";","module.exports = __webpack_public_path__ + \"static/media/water.8406b1be.svg\";","module.exports = __webpack_public_path__ + \"static/media/wind.14da3617.svg\";","module.exports = __webpack_public_path__ + \"static/media/divine.242f092d.svg\";","module.exports = __webpack_public_path__ + \"static/media/spell.03448c9f.svg\";","module.exports = __webpack_public_path__ + \"static/media/trap.79c8204f.svg\";","module.exports = __webpack_public_path__ + \"static/media/trapspell.32c9f849.svg\";","module.exports = __webpack_public_path__ + \"static/media/normal.ad73df05.svg\";","module.exports = __webpack_public_path__ + \"static/media/continuous.877ee500.svg\";","module.exports = __webpack_public_path__ + \"static/media/quick.908e1664.svg\";","module.exports = __webpack_public_path__ + \"static/media/field.a82ec47e.svg\";","module.exports = __webpack_public_path__ + \"static/media/equip.170849d2.svg\";","module.exports = __webpack_public_path__ + \"static/media/ritual.40dc4c84.svg\";","module.exports = __webpack_public_path__ + \"static/media/lv-star.69809880.svg\";","module.exports = __webpack_public_path__ + \"static/media/xyz-star.bf27701a.svg\";","module.exports = __webpack_public_path__ + \"static/media/light.ba480592.svg\";","module.exports = __webpack_public_path__ + \"static/media/dark.20052144.svg\";","module.exports = __webpack_public_path__ + \"static/media/wind.2c7b7726.svg\";","module.exports = __webpack_public_path__ + \"static/media/fire.b7e822d6.svg\";","module.exports = __webpack_public_path__ + \"static/media/water.27ffe26e.svg\";","module.exports = __webpack_public_path__ + \"static/media/earth.e64058b6.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"CoinDieTokenBottomScreen_Container__2SQWo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"CoinDieTokenTopScreen_Container__b-mev\",\"token-in-out\":\"CoinDieTokenTopScreen_token-in-out__YastM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Die_Container__20Mov\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"DiceScreen_Container__3QX_t\"};","module.exports = __webpack_public_path__ + \"static/media/coin.f8c32f94.mp3\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"CoinScreen_Container__3GBWi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"TokenScreen_Container__3BhfE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"TimerBottomScreen_Container__3RiCd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"TimerTopScreen_Container__TYR0n\"};","module.exports = __webpack_public_path__ + \"static/media/lpChange.54b732f6.mp3\";","module.exports = __webpack_public_path__ + \"static/media/lpChangeGameEnd.fbc080a2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/openToast.50ad64b8.mp3\";","module.exports = __webpack_public_path__ + \"static/media/closeToast.c147a08e.mp3\";","module.exports = __webpack_public_path__ + \"static/media/lifepoints.07026dbb.mp3\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Timer_Container__kYM_2\"};","module.exports = __webpack_public_path__ + \"static/media/token.db2e2961.svg\";","module.exports = __webpack_public_path__ + \"static/media/calculator.f789a403.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"LogItem_Container__O-NX8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"LogPage_Container__1mHhZ\"};","module.exports = __webpack_public_path__ + \"static/media/sword.c4d79987.svg\";","module.exports = __webpack_public_path__ + \"static/media/shield.82e1f725.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.02167fc1.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"CardSearchPage_Container__T8T3A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"OptionsTitle_Container__YQmb5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"HalfScreenDivision_Container__Khbiq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"DeckBuilderBottomScreen_Container__HrM_C\"};","module.exports = __webpack_public_path__ + \"static/media/shuffle.e8750667.svg\";","module.exports = __webpack_public_path__ + \"static/media/reload.129f0265.svg\";","module.exports = __webpack_public_path__ + \"static/media/draw.89f47e3c.mp3\";","module.exports = __webpack_public_path__ + \"static/media/shuffle.35ebd967.mp3\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"CardListStatsCards_Container__20Ejl\",\"card-list-item-slide\":\"CardListStatsCards_card-list-item-slide__2a1g-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ScreenDivisionTop\":\"CardListStatsScreen_ScreenDivisionTop__2cdZc\",\"ScreenDivisionBottom\":\"CardListStatsScreen_ScreenDivisionBottom__1git3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"DeckBuilderPage_Container__1NNnm\"};","module.exports = __webpack_public_path__ + \"static/media/toggler.4f07364c.mp3\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"UICardContainer_Container__8yMyW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"OptionTitle_Container__3CTzF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"OptionBody_Container__1B1Ag\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"OptionSwitchesCategory_Container__25HB2\"};","module.exports = __webpack_public_path__ + \"static/media/musicNote.51aa2d86.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ToastText\":\"DangerZoneSecondaryScreens_ToastText__1kihn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Title\":\"DangerZone_Title__1pz9m\",\"OptionBody\":\"DangerZone_OptionBody__1MqFs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"OptionsPage_Container__wwQ-2\"};","module.exports = __webpack_public_path__ + \"static/media/arrowPage.2766e049.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SpinnerContainer\":\"RouteComponents_SpinnerContainer__1z3N2\",\"Spinner\":\"RouteComponents_Spinner__1qDlx\",\"slideLeft\":\"RouteComponents_slideLeft__26DNV\",\"slideRight\":\"RouteComponents_slideRight__3t3Lo\"};","import * as toastActionTypes from \"./toastActionTypes\"\r\n\r\nconst initialState = {\r\n  text: \"\",\r\n  url: \"\",\r\n  type: \"\",\r\n  logTypeArray: [],\r\n  isActive: false,\r\n  refreshTimeoutToggler: false\r\n}\r\n\r\nexport default function toastReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case toastActionTypes.SET_TOAST_STATE:\r\n      // generic action to manually set anything in state according to payload.\r\n      // Triggering this will activate the <Toast /> and will refresh its timeout\r\n      // (will toggle refreshTimeoutToggler, which serves as a listener to refresh\r\n      // <Toast /> active status' timer)\r\n      return {\r\n        ...state,\r\n        text: action.payload.text,\r\n        url: action.payload.url,\r\n        type: action.payload.type,\r\n        isActive: true,\r\n        refreshTimeoutToggler: !state.refreshTimeoutToggler\r\n      }\r\n\r\n    case toastActionTypes.SET_LOG_TYPE:\r\n      // This action triggers when toggling any \"log\" switch (\"lp\", \"timer\", \"dice\",\r\n      // \"coin\")\r\n      // First, find the index of the type passed as payload inside logTypeArray\r\n      const { logType } = action.payload\r\n      const logIndex = state.logTypeArray.findIndex((log) => log === logType)\r\n      // if index is -1, logType is not in the array, so update the array concatenating\r\n      // that logType to it. Config the rest of <Toast /> state and set isActive to\r\n      // true, which toggles it on\r\n      if (logIndex < 0) {\r\n        return {\r\n          ...state,\r\n          text: \"Currently logging:\",\r\n          logTypeArray: [...state.logTypeArray, logType],\r\n          isActive: true,\r\n          type: \"logSwitches\",\r\n          refreshTimeoutToggler: !state.refreshTimeoutToggler\r\n        }\r\n        // if index exists, then that logType is already in the array. Form a new\r\n        // logTypeArray splicing that logType, and do the same as above with the\r\n        // rest of <Toast />'s state.\r\n        // Keep in mind that if there is only one element in the array before\r\n        // splicing, we have to set text to indicate the user there is nothing\r\n        // being logged currently.\r\n      } else if (logIndex >= 0) {\r\n        return {\r\n          ...state,\r\n          text:\r\n            state.logTypeArray.length <= 1\r\n              ? \"All logs are turned off.\"\r\n              : \"Currently logging:\",\r\n          logTypeArray: [\r\n            ...state.logTypeArray.slice(0, logIndex),\r\n            ...state.logTypeArray.slice(logIndex + 1)\r\n          ],\r\n          isActive: true,\r\n          type: \"logSwitches\",\r\n          refreshTimeoutToggler: !state.refreshTimeoutToggler\r\n        }\r\n      }\r\n      return state\r\n\r\n    case toastActionTypes.CLOSE_TOAST: {\r\n      // set isActive to false, which toggles the <Toast /> off.\r\n      return {\r\n        ...state,\r\n        isActive: false\r\n      }\r\n    }\r\n\r\n    case toastActionTypes.OPEN_TOAST: {\r\n      // set isActive to true, which toggles the <Toast /> on.\r\n      return {\r\n        ...state,\r\n        isActive: true\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","export const SET_TOAST_STATE = \"SET_TOAST_STATE\"\r\nexport const SET_LOG_TYPE = \"SET_LOG_TYPE\"\r\nexport const CLOSE_TOAST = \"CLOSE_TOAST\"\r\nexport const OPEN_TOAST = \"OPEN_TOAST\"\r\n","export const GO_BACK = \"GO_BACK\"\r\nexport const GO_FORWARD = \"GO_FORWARD\"\r\nexport const SYNC_STARTING_URL_WITH_PAGE_ARRAY =\r\n  \"SYNC_STARTING_URL_WITH_PAGE_ARRAY\"\r\n","import * as pageSwipeActionTypes from \"./pageSwipeActionTypes\"\r\n\r\nconst initialState = {\r\n  pageArray: [],\r\n  slide: \"left-slide\"\r\n}\r\n\r\nexport default function pageSwipeReducer(state = initialState, action) {\r\n  // we will re-arrange the page sites array on all cases, so keep it always declared\r\n  let pageArrayCopy = []\r\n\r\n  switch (action.type) {\r\n    case pageSwipeActionTypes.GO_FORWARD:\r\n      // shift the page in the front and place it in the back, which\r\n      // leads to having the former second page in the array as the\r\n      // first one, and the former first as the now last\r\n      pageArrayCopy = [...state.pageArray]\r\n      const currentPage = pageArrayCopy.shift()\r\n      pageArrayCopy.push(currentPage)\r\n      return {\r\n        ...state,\r\n        pageArray: pageArrayCopy,\r\n        slide: \"right-slide\"\r\n      }\r\n\r\n    case pageSwipeActionTypes.GO_BACK:\r\n      // following the same logic as above, to go back we pop the last\r\n      // page in the array to unshift it at the front\r\n      pageArrayCopy = [...state.pageArray]\r\n      const lastPage = pageArrayCopy.pop()\r\n      pageArrayCopy.unshift(lastPage)\r\n      return {\r\n        ...state,\r\n        pageArray: pageArrayCopy,\r\n        slide: \"left-slide\"\r\n      }\r\n\r\n    case pageSwipeActionTypes.SYNC_STARTING_URL_WITH_PAGE_ARRAY:\r\n      // here is a tricky one. If we mount the app on any page but \"/calc\" (default\r\n      // first page), then the page array will be desync'd, as it always starts\r\n      // in the same order (\"calc\" is the default first element in the array).\r\n      // To circumvent this, we get history.location.pathname as payload (current\r\n      // loaded page), and then loop over each front page of the array to try match\r\n      // their names with the payload. On each loop, if there is no match we place\r\n      // the front page in the array at the back and repeat the process. Once the\r\n      // first element of the array matches the payload, the current pathname will\r\n      // be synced with page array. Thus, order restored.\r\n      pageArrayCopy = [...state.pageArray]\r\n      const pageToSyncToFront = action.payload.slice(1)\r\n      let frontPage = pageArrayCopy[0]\r\n      let pageToPushBack\r\n      while (frontPage !== pageToSyncToFront) {\r\n        pageToPushBack = pageArrayCopy.shift()\r\n        pageArrayCopy.push(pageToPushBack)\r\n        frontPage = pageArrayCopy[0]\r\n      }\r\n      return {\r\n        ...state,\r\n        pageArray: pageArrayCopy\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { useState, useCallback } from \"react\"\r\n\r\nexport default function useToggle(initialState = false) {\r\n  const [state, setState] = useState(initialState)\r\n  const toggle = useCallback(() => setState((state) => !state), [])\r\n\r\n  return [state, toggle]\r\n}\r\n","import React, { useState, createContext, useReducer } from \"react\"\r\nimport toastReducer from \"../store/Toast/toastReducer\"\r\nimport pageSwipeReducer from \"../store/PageSwipe/pageSwipeReducer\"\r\nimport useToggleSecondScreen from \"../hooks/useToggleSecondScreen\"\r\nimport useToggle from \"../hooks/useToggle\"\r\nimport uiConfigs from \"../utils/ui.configs.json\"\r\n\r\nexport const UIContext = createContext({\r\n  secondScreenType: \"\",\r\n  secondScreenState: false,\r\n  toggleSecondScreen: () => {},\r\n  pageState: {},\r\n  dispatchPageAction: () => {},\r\n  screenIsFrozen: false,\r\n  setScreenIsFrozen: () => {},\r\n  playSFXs: true,\r\n  togglePlaySFXs: () => {},\r\n  toastState: {},\r\n  dispatchToastAction: () => {},\r\n  appIsLoadingSomething: false,\r\n  setAppIsLoadingSomething: () => {}\r\n})\r\n\r\nexport function UIContextProvider({ children }) {\r\n  // global Secondary Screen handlers. Will be used across the whole app\r\n  const {\r\n    secondScreenType,\r\n    secondScreenState,\r\n    toggleSecondScreen\r\n  } = useToggleSecondScreen()\r\n  // global <Toast /> handlers. Will be used across the whole app\r\n  const [toastState, dispatchToastAction] = useReducer(toastReducer, {\r\n    text: \"\",\r\n    url: \"\",\r\n    type: \"\",\r\n    logTypeArray: [],\r\n    isActive: false,\r\n    refreshTimeoutToggler: false\r\n  })\r\n  // page reducer state and action dispatch to be handled by App.js\r\n  // It controls which components to load with BrowserRouter modifying the\r\n  // array in its state, as well as \"slide\" animation classNames\r\n  const [pageState, dispatchPageAction] = useReducer(pageSwipeReducer, {\r\n    pageArray: uiConfigs.pageNames,\r\n    slide: \"left-slide\"\r\n  })\r\n  // boolean state and setter to freeze swiping in app. Used across the whole app\r\n  const [screenIsFrozen, setScreenIsFrozen] = useState(false)\r\n  // global boolean and toggler to turn all SFXs ON/OFF. All useAudio() instances\r\n  // across the app listen to this to enable/disabled <audio>s\r\n  const [playSFXs, togglePlaySFXs] = useToggle(true)\r\n  // global boolean and setter to show a loading icon whenever the app is in\r\n  // \"loading\" state while not being handled specifically by a component\r\n  const [appIsLoadingSomething, setAppIsLoadingSomething] = useState(false)\r\n  // unite all values to be provided by this context into an object\r\n  const contextValues = {\r\n    secondScreenType,\r\n    secondScreenState,\r\n    toggleSecondScreen,\r\n    pageState,\r\n    dispatchPageAction,\r\n    screenIsFrozen,\r\n    setScreenIsFrozen,\r\n    playSFXs,\r\n    togglePlaySFXs,\r\n    toastState,\r\n    dispatchToastAction,\r\n    appIsLoadingSomething,\r\n    setAppIsLoadingSomething\r\n  }\r\n  return (\r\n    <UIContext.Provider value={contextValues}>{children}</UIContext.Provider>\r\n  )\r\n}\r\n","import { useState, useCallback } from \"react\"\r\n\r\nexport default function useToggleSecondScreen() {\r\n  const [secondScreenType, setType] = useState(\"\")\r\n  const [secondScreenState, setSecondScreenState] = useState(false)\r\n\r\n  const toggleSecondScreen = useCallback(\r\n    (screenType = \"\") => {\r\n      // if secondScreen is open, close it (set its state to false)\r\n      if (secondScreenState) return setSecondScreenState(false)\r\n      // if its type is different from the one that triggered it lastly,\r\n      // set the type to the one that is currently opening the secondScreen.\r\n      if (secondScreenType !== screenType) setType(screenType)\r\n      // finally, set its state to true, opening the modal screen\r\n      setSecondScreenState(true)\r\n    },\r\n    [secondScreenType, secondScreenState]\r\n  )\r\n\r\n  return { secondScreenType, secondScreenState, toggleSecondScreen }\r\n}\r\n","import * as pageSwipeActionTypes from \"./pageSwipeActionTypes\"\r\n\r\nexport const goBack = () => ({\r\n  type: pageSwipeActionTypes.GO_BACK\r\n})\r\n\r\nexport const goForward = () => ({\r\n  type: pageSwipeActionTypes.GO_FORWARD\r\n})\r\n\r\n// historyLocationPathname: <string> window.history.location.pathname\r\nexport const syncStartingURLwithPageArray = (historyLocationPathname) => ({\r\n  type: pageSwipeActionTypes.SYNC_STARTING_URL_WITH_PAGE_ARRAY,\r\n  payload: historyLocationPathname\r\n})\r\n","import * as toastActionTypes from \"./toastActionTypes\"\r\n\r\n// text: <string> <Toast />'s text to -normally- show in its body\r\n// url: <string|React.node> an extra property with mutiple purposes: it can\r\n// hold a url to render a clickable link, an additional string to complement\r\n// \"text\" or a whole React Node to be rendered in <Toast />\r\n// type: <string> <Toast /> type string, which will trigger the proper toast\r\n// logTypeArray: <Array> a logTypeArray to manually override the reducer's\r\nexport const setToastState = (text, url, type, logTypeArray) => ({\r\n  type: toastActionTypes.SET_TOAST_STATE,\r\n  payload: { text, url, type, logTypeArray }\r\n})\r\n\r\n// logTypeString: <string> \"dice\", \"lp\", \"timer\", \"coin\". Used to filter\r\n// logTypeArray in reducer\r\nexport const setLogType = (logTypeString) => ({\r\n  type: toastActionTypes.SET_LOG_TYPE,\r\n  payload: { logType: logTypeString }\r\n})\r\n\r\nexport const closeToast = () => ({\r\n  type: toastActionTypes.CLOSE_TOAST\r\n})\r\n\r\nexport const openToast = () => ({\r\n  type: toastActionTypes.OPEN_TOAST\r\n})\r\n","import { useState, useCallback, useEffect } from \"react\"\r\nimport useToggle from \"./useToggle\"\r\n\r\nexport default function useAudioControls(audioRef, configs = {}) {\r\n  // toggleOn: a true/false toggler <audio> will listen to to turn on/off\r\n  // playbackRate: the playbackRate to set to the audio. Will change IRT too\r\n  // sources: an array pointing to playable audio files\r\n  const { toggleOn, playbackRate, sources } = configs\r\n  // isOn is the universal listener for most effects to play/pause/stop/restart\r\n  // if toggleOn was passed, it will listen to it. Each time toggleOn switches,\r\n  // so will isOn, effectively blocking most functions here\r\n  // on mount, switchOnOff's useEffect will trigger, thats why ! is there\r\n  const [isOn, switchOnOff] = useToggle(!toggleOn ?? true)\r\n  // the audio array if sources was passed as configs\r\n  const [currentSrc, setCurrentSrc] = useState(\r\n    sources ? sources[0] : audioRef.current ? audioRef.current.src : null\r\n  )\r\n\r\n  // regular play with additional failsafe checks\r\n  const play = useCallback(() => {\r\n    isOn && audioRef.current && audioRef.current.play()\r\n  }, [isOn, audioRef])\r\n\r\n  // even isOn is set to false, play the audio\r\n  const forcePlay = useCallback(() => {\r\n    audioRef.current && audioRef.current.play()\r\n  }, [audioRef])\r\n\r\n  // pause the audio at current time\r\n  const pause = useCallback(() => {\r\n    isOn && audioRef.current.pause()\r\n  }, [isOn, audioRef])\r\n\r\n  // pause the audio and set currentTime to 0\r\n  const stop = useCallback(() => {\r\n    if (isOn) {\r\n      audioRef.current.pause()\r\n      audioRef.current.currentTime = 0\r\n    }\r\n  }, [isOn, audioRef])\r\n\r\n  // pause the audio, set currentTime to 0 and play automatically\r\n  const restart = useCallback(() => {\r\n    stop()\r\n    play()\r\n  }, [play, stop])\r\n\r\n  // set reverse playbackRate and play\r\n  const playReverse = useCallback(() => {\r\n    if (isOn) {\r\n      audioRef.current.playbackRate = -1\r\n      play()\r\n    }\r\n  }, [isOn, audioRef, play])\r\n\r\n  // given a string source, set audio src to it\r\n  const setSource = useCallback(\r\n    (src) => {\r\n      audioRef.current.src = src\r\n    },\r\n    [audioRef]\r\n  )\r\n\r\n  // uses and array of source strings passed in configs to move from track\r\n  // to track setting the audio source\r\n  // You can also pass an integer as a source index in the array to target it\r\n  const setNextSrc = useCallback(\r\n    (srcIndex) => {\r\n      // if no sources array or if there is only one source in it, do nothing\r\n      if (!sources || sources.length <= 1) return\r\n      // if index passed is 0, set source to 0. Otherwise, on a given index,\r\n      // parse it and set it as nextSrcIdx. Else, if nothing was passed as\r\n      // srcIndex or the parsing failed, just set the track to the current idx + 1\r\n      const nextSrcIdx =\r\n        srcIndex === 0\r\n          ? 0\r\n          : parseInt(srcIndex) ||\r\n            sources.findIndex((src) => src === currentSrc) + 1\r\n      // on a not found index or an index exceeding sources array length,\r\n      // set the track to the first one. Otherwise, to the next one from\r\n      // the current track\r\n      if (nextSrcIdx === -1 || nextSrcIdx >= sources.length) {\r\n        setSource(sources[0])\r\n        setCurrentSrc(sources[0])\r\n      } else {\r\n        setSource(sources[nextSrcIdx])\r\n        setCurrentSrc(sources[nextSrcIdx])\r\n      }\r\n    },\r\n    [sources, currentSrc, setSource] //ADDED LAST 2\r\n  )\r\n\r\n  // returns true if currentTime is 0 and audio is paused\r\n  const isStopped = useCallback(() => {\r\n    return audioRef.current.currentTime === 0 && audioRef.current.paused\r\n  }, [audioRef])\r\n\r\n  // returns true if the audio is currently playing\r\n  const isPlaying = useCallback(() => {\r\n    return !audioRef.current.paused\r\n  }, [audioRef])\r\n\r\n  // each time toggleOn is flipped from true to false (or vice-versa), switch\r\n  // isOn to true or false accordingly\r\n  useEffect(switchOnOff, [toggleOn])\r\n\r\n  // whenever playbackRate changes, set it to the audio\r\n  useEffect(() => {\r\n    if (playbackRate) audioRef.current.playbackRate = playbackRate\r\n  }, [playbackRate, audioRef])\r\n\r\n  return {\r\n    play,\r\n    forcePlay,\r\n    pause,\r\n    stop,\r\n    restart,\r\n    playReverse,\r\n    setSource,\r\n    setNextSrc,\r\n    isOn,\r\n    switchOnOff,\r\n    isStopped,\r\n    isPlaying\r\n  }\r\n}\r\n","import React, { useRef } from \"react\"\r\nimport useAudioControls from \"./useAudioControls\"\r\n\r\nexport default function useAudio(src, configs = {}) {\r\n  // create a ref to point to the audio. This will enable its access once mounted\r\n  const audioRef = useRef()\r\n  // create the audio JSX. If type was passed as configs, set it.\r\n  // Otherwise, default to \"audio/mp3\"\r\n  const audioJSX = (\r\n    <audio src={src} ref={audioRef} type={configs.type || \"audio/mp3\"} />\r\n  )\r\n  // attach an audioControls hook to it.\r\n  const audioControls = useAudioControls(audioRef, configs)\r\n  // return the <audio> JSX, its controls, and its ref\r\n  return [audioJSX, audioControls, audioRef]\r\n}\r\n","import { useState, useCallback } from \"react\"\r\n\r\nexport default function useReRender() {\r\n  const [, setState] = useState(0)\r\n\r\n  // simply increase state count by 1, thus forcing a re-render\r\n  const reRender = useCallback(() => {\r\n    setState((state) => state + 1)\r\n  }, [])\r\n\r\n  return reRender\r\n}\r\n","import React, { useState, useCallback, useEffect, useRef, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport useReRender from \"../../../hooks/useReRender\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport styles from \"./SecondaryScreen.module.css\"\r\n\r\nfunction SecondaryScreen({\r\n  children,\r\n  toggle, // <function> toggler assigned to turn Secondary Screen State off/on\r\n  small, // <boolean> render a smaller screen than default one\r\n  large, // <boolean> render a larger screen than default one\r\n  scrollable, // <boolean> allow scrolling. False will fix the screen\r\n  flex, // <boolean> true will apply display: flex, align-items: center, justify-content: center\r\n  animation, // <string> animation class name that matches the animations CSS classnames here.\r\n  sfxObj, // <object> useAudio() SFX object with two sources\r\n  onClose // <function> callback to trigger when this component unmounts. NO side effects!\r\n}) {\r\n  // boolean state and setter to trigger at component unmounting phase\r\n  const [isUnmounting, setIsUnmounting] = useState(false)\r\n  // classes are stored in a reference, which does not trigger a component\r\n  // re-render when modifying it. We need a way to manually re-render it\r\n  const reRender = useReRender()\r\n  // animation names format: <AnimationClassName + In>. Ex: ScaleIn, FadeIn\r\n  const animationName = animation\r\n    ? animation[0].toUpperCase() + animation.slice(1) + \"In\"\r\n    : null\r\n  // we need to keep a live reference of these classes for the\r\n  // component's unmounting animation to apply correctly.\r\n  // Order matters! Keep animationName in the last slot\r\n  const classes = useRef([\r\n    styles.ContentContainer,\r\n    small ? styles.Small : \"\",\r\n    large ? styles.Large : \"\",\r\n    flex ? styles.Flex : \"\",\r\n    scrollable ? styles.Scrollable : \"\",\r\n    animationName ? styles[animationName] : \"\"\r\n  ])\r\n\r\n  const handleBackdropClick = useCallback(() => {\r\n    // if we assigned no animation, or the user updates state from any\r\n    // other component while this one is unmounting (rapid clicking),\r\n    // simply toggle SecondScreen off\r\n    if (!animationName || isUnmounting) return toggle()\r\n    // we have an animation-in state in last slot, remove it\r\n    classes.current.pop(-1)\r\n    // set unmounting state to trigger useEffect\r\n    setIsUnmounting(true)\r\n  }, [isUnmounting, animationName, setIsUnmounting, toggle])\r\n\r\n  const handleScreenContainerClick = useCallback((e) => {\r\n    // clicks here must not propagate to backdrop\r\n    e.stopPropagation()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    let unmountingAnimationTimeout\r\n    // if we are unmounting the component\r\n    if (isUnmounting) {\r\n      // we popped the \"in\" animation, add the \"out\" one.\r\n      // Name format is <AnimationName + Out>. E.g.: ScaleOut, FadeOut\r\n      classes.current.push(styles[animationName.slice(0, -2) + \"Out\"])\r\n      // switch to the next src in the sfx array (close sfx) and play it\r\n      sfxObj.setNextSrc()\r\n      sfxObj.play()\r\n      // set timeout to close SecondaryScreen when animation finishes.\r\n      // Timeout must be equal to animation duration + delay (if any)\r\n      unmountingAnimationTimeout = setTimeout(\r\n        toggle,\r\n        uiConfigs.timeouts.secondScreenUnmountingDelay\r\n      )\r\n      // force an update, since classes will not be updated otherwise,\r\n      // and changes wont reflect on the component, thus no animation\r\n      // will play\r\n      reRender()\r\n      // if there is an onClose callback, execute it.\r\n      // DO NOT provoke side effects here, as the component will unmount\r\n      if (onClose) onClose()\r\n    } else {\r\n      // we are mounting. Set sfx to the first one in the array (open sfx)\r\n      // and play it.\r\n      sfxObj.setNextSrc(0)\r\n      sfxObj.play()\r\n    }\r\n    return () => {\r\n      if (unmountingAnimationTimeout) clearTimeout(unmountingAnimationTimeout)\r\n    }\r\n  }, [isUnmounting])\r\n\r\n  return (\r\n    <div\r\n      className={styles.Backdrop}\r\n      onClick={handleBackdropClick}\r\n      aria-label=\"Click here to close the modal screen\"\r\n    >\r\n      <div\r\n        onClick={handleScreenContainerClick}\r\n        role=\"dialog\"\r\n        className={classes.current.join(\" \")}\r\n        aria-label=\"This is the actual modal screen. Click outside of its edges to dismiss it\"\r\n      >\r\n        {children}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nSecondaryScreen.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  toggle: PropTypes.func.isRequired,\r\n  small: PropTypes.bool,\r\n  scrollable: PropTypes.bool,\r\n  animation: PropTypes.string,\r\n  sfxObj: PropTypes.object,\r\n  onClose: PropTypes.func\r\n}\r\n\r\nexport default memo(SecondaryScreen)\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styles from \"./ErrorMessage.module.css\"\r\n\r\nexport default function ErrorMessage({ children }) {\r\n  return <div className={styles.Container}>{children}</div>\r\n}\r\n\r\nErrorMessage.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n}\r\n","import React from \"react\"\r\nimport uiConfigs from \"./ui.configs.json\"\r\nimport linkedin from \"../assets/expandableIcons/linkedin.svg\"\r\nimport github from \"../assets/expandableIcons/github.svg\"\r\nimport mail from \"../assets/expandableIcons/mail.svg\"\r\nimport react from \"../assets/expandableIcons/react.svg\"\r\nimport nonYugiohAssets from \"../assets/expandableIcons/nonYugiohAssets.svg\"\r\n\r\nimport yugioh from \"../assets/expandableIcons/yugioh.svg\"\r\n\r\n/**\r\n * Social Media object, configured to be displayed properly with\r\n * ExpandableIcon component\r\n */\r\nexport const socialMediaSites = {\r\n  linkedin: {\r\n    src: linkedin,\r\n    alt: \"Go to linkedin site\",\r\n    divContent: (toastToggler) => (\r\n      <span role=\"navigation\" onClick={toastToggler}>\r\n        <u\r\n          data-text=\"author's LinkedIn\"\r\n          data-url={uiConfigs.socialMediaSites.linkedin}\r\n          style={{ cursor: \"pointer\" }}\r\n        >\r\n          View LinkedIn website\r\n        </u>\r\n      </span>\r\n    )\r\n  },\r\n  github: {\r\n    src: github,\r\n    alt: \"Go to Github repository\",\r\n    divContent: (toastToggler) => (\r\n      <span role=\"navigation\" onClick={toastToggler}>\r\n        <u\r\n          data-text=\"author's Github\"\r\n          data-url={uiConfigs.socialMediaSites.github}\r\n          style={{ cursor: \"pointer\" }}\r\n        >\r\n          View Github repositories\r\n        </u>\r\n      </span>\r\n    )\r\n  },\r\n  mail: {\r\n    src: mail,\r\n    alt: \"Email address\",\r\n    divContent: (toastToggler) => \"nmcadierno@gmail.com\"\r\n  }\r\n}\r\n\r\n/**\r\n * Prices and Card databases object, configured to be displayed properly\r\n * with ExpandableIcon component\r\n */\r\nexport const cardAndPricesDatabaseSites = {\r\n  ygoProDeck: {\r\n    name: \"YGOPRODeck\",\r\n    href: \"https://db.ygoprodeck.com\"\r\n  },\r\n  ygoProDeckApiGuide: {\r\n    name: \"YGOPRODeck API\",\r\n    href: \"https://db.ygoprodeck.com/api-guide\"\r\n  },\r\n  amazon: {\r\n    name: \"Amazon\",\r\n    href: \"https://amazon.com\"\r\n  },\r\n  cardMarket: {\r\n    name: \"Cardmarket\",\r\n    href: \"https://cardmarket.com\"\r\n  },\r\n  coolStuffInc: {\r\n    name: \"CoolStuffInc\",\r\n    href: \"https://coolstuffinc.com\"\r\n  },\r\n  ebay: {\r\n    name: \"eBay\",\r\n    href: \"https://ebay.com\"\r\n  },\r\n  tcgPlayer: {\r\n    name: \"TCGPlayer\",\r\n    href: \"https://tcgplayer.com\"\r\n  },\r\n  yugiohPrices: {\r\n    name: \"Yu-Gi-Oh! Prices\",\r\n    href: \"https://yugiohprices.com\"\r\n  }\r\n}\r\n\r\n/**\r\n * Acknowledged sites object, configured to be displayed properly\r\n * with ExpandableIcon component\r\n */\r\nexport const acknowledgmentsSites = {\r\n  react: {\r\n    src: react,\r\n    alt: \"React and React dependencies\",\r\n    divContent: (toastToggler) => (\r\n      <div>\r\n        <div> Libraries used in this project </div>\r\n        <h1\r\n          data-text=\"React site\"\r\n          data-url=\"https://reactjs.org/\"\r\n          role=\"navigation\"\r\n          onClick={toastToggler}\r\n        >\r\n          React\r\n        </h1>\r\n        <span> Facebook's standard React library </span>\r\n        <h1\r\n          data-text=\"Create React App\"\r\n          data-url=\"https://create-react-app.dev/docs/getting-started/\"\r\n          role=\"navigation\"\r\n          onClick={toastToggler}\r\n        >\r\n          Create React App\r\n        </h1>\r\n        <span> Widely used React app boilerplate </span>\r\n        <h1\r\n          data-text=\"React Router Dom\"\r\n          data-url=\"https://reactrouter.com/web/guides/quick-start/\"\r\n          role=\"navigation\"\r\n          onClick={toastToggler}\r\n        >\r\n          React Router DOM\r\n        </h1>\r\n        <span> Declarative routing for React.js </span>\r\n        <h1\r\n          data-text=\"React Transition Group\"\r\n          data-url=\"https://reactcommunity.org/react-transition-group/\"\r\n          role=\"navigation\"\r\n          onClick={toastToggler}\r\n        >\r\n          React Transition Group\r\n        </h1>\r\n        <span> Exposes animation transition stages by managing classes. </span>\r\n        <h1\r\n          data-text=\"React Swipeable\"\r\n          data-url=\"https://www.npmjs.com/package/react-swipeable/\"\r\n          role=\"navigation\"\r\n          onClick={toastToggler}\r\n        >\r\n          React Swipable\r\n        </h1>\r\n        <span> React swipe event handler component and hook </span>\r\n        <h1\r\n          data-text=\"Animated Number React\"\r\n          data-url=\"https://www.npmjs.com/package/animated-number-react/\"\r\n          onClick={toastToggler}\r\n        >\r\n          Animated Number React\r\n        </h1>\r\n        <span> A simple animated number for React using anime.js </span>\r\n        <h1\r\n          data-text=\"React Quick Pinch Zoom\"\r\n          data-url=\"https://www.npmjs.com/package/react-quick-pinch-zoom/\"\r\n          role=\"navigation\"\r\n          onClick={toastToggler}\r\n        >\r\n          React Quick Pinch Zoom\r\n        </h1>\r\n        <span>\r\n          A \"zoom and drag\" elements' event handler for mobile/desktop devices{\" \"}\r\n        </span>\r\n      </div>\r\n    ),\r\n    onClick: null\r\n  },\r\n  nonYugiohAssets: {\r\n    src: nonYugiohAssets,\r\n    alt: \"Sound effects and non-yugioh-related icons\",\r\n    divContent: (toastToggler) => (\r\n      <div>\r\n        <div> Non-Yu-Gi-Oh!-related assets </div>\r\n        <h1\r\n          data-text=\"IconFinder\"\r\n          data-url=\"https://www.iconfinder.com/\"\r\n          role=\"navigation\"\r\n          onClick={toastToggler}\r\n        >\r\n          Icon Finder\r\n        </h1>\r\n        <span> Icon gallery </span>\r\n        <h1\r\n          data-text=\"ZapSplat\"\r\n          data-url=\"https://www.zapsplat.com/\"\r\n          role=\"navigation\"\r\n          onClick={toastToggler}\r\n        >\r\n          Zap Splat\r\n        </h1>\r\n        <span> Free sound effects & royalty free music </span>\r\n        <p>All assets in this app are regulated under free-to-use licenses.</p>\r\n        <p>Nonetheless, they are up to a well deserved acknowledgment here!</p>\r\n      </div>\r\n    ),\r\n    onClick: null\r\n  },\r\n  yugipedia: {\r\n    src: yugioh,\r\n    alt: \"Yu-gi-oh! assets\",\r\n    divContent: (toastToggler) => (\r\n      <div>\r\n        <div> Yu-Gi-Oh! assets extracted from </div>\r\n        <h1\r\n          data-text=\"Yugipedia\"\r\n          data-url=\"https://yugipedia.com/wiki/User:Dinoguy1000/icons/\"\r\n          role=\"navigation\"\r\n          onClick={toastToggler}\r\n        >\r\n          Yugipedia\r\n        </h1>\r\n        <span>Free repository on every aspect of the Yu-Gi-Oh! franchise </span>\r\n        <h1\r\n          data-text=\"YGOPRODeck\"\r\n          data-url=\"https://ygoprodeck.com/\"\r\n          role=\"navigation\"\r\n          onClick={toastToggler}\r\n        >\r\n          YGOPRODeck\r\n        </h1>\r\n        <span> Yu-Gi-Oh! Database and deck share site </span>\r\n      </div>\r\n    ),\r\n    onClick: null\r\n  }\r\n}\r\n\r\n/**\r\n * Restart confirmation message object, configured to be displayed\r\n * properly with ExpandableIcon component\r\n */\r\nexport const restartConfirm = {\r\n  message: (\r\n    <>\r\n      Wow! Great understanding of this coding mess. Congrats!\r\n      <br />\r\n      <br />\r\n      Or if you found this by accident, congrats too!\r\n      <br />\r\n      <br />\r\n      -RNMC\r\n    </>\r\n  )\r\n}\r\n\r\n/**\r\n * Card search and no internet connection objects. These ones are applied\r\n * in SecondaryScreens component, inside CardSearch\r\n */\r\nexport const errorMessages = {\r\n  appNeedsInternet: (\r\n    <>\r\n      <div> No internet connection </div>\r\n      <div>\r\n        It seems that an online connection is needed to load a requested\r\n        resource.\r\n      </div>\r\n      <div>Please, connect to an internet provider and reload the app.</div>\r\n    </>\r\n  ),\r\n  noInternetConnection: (\r\n    <>\r\n      <div> No internet connection </div>\r\n      <div>\r\n        It seems that you have no internet connection. Thus, search attempts\r\n        will fail.\r\n      </div>\r\n      <div>Please, connect to an internet provider to use the searcher.</div>\r\n    </>\r\n  ),\r\n  cardSearchError: (\r\n    <>\r\n      <div> Search failed </div>\r\n      <div>\r\n        Double-check your searched term and/or your internet connection.\r\n      </div>\r\n      <div>\r\n        Or YgoProDeck's database may be down. If so, please try again later.\r\n      </div>\r\n    </>\r\n  ),\r\n  genericError: (\r\n    <>\r\n      <h3> Generic error message </h3>\r\n      <p>\r\n        Hey there! If you are seeing this, then an error has been triggered\r\n        somewhere in the app.\r\n      </p>\r\n      <p>\r\n        Since this is not a case-specific kind of error *lazydevcough*, I cannot\r\n        promise you the app will function properly.\r\n      </p>\r\n      <p>But alas, let me give you a couple of recommendations:</p>\r\n\r\n      <ul>\r\n        <li> Ol' reliable: reset the app. </li>\r\n        <li>\r\n          Check your internet connection and try loading the whole app (swipe\r\n          through all pages) while online.\r\n        </li>\r\n        <li>\r\n          If you are using the downloaded app version in your cellphone, try\r\n          deleting and reinstalling it from scratch.\r\n        </li>\r\n        <li>If nothing works, hmm... Try playing some Pokemon TCG?</li>\r\n      </ul>\r\n\r\n      <p>\r\n        Please, the developer would be glad if you keep in touch to show this\r\n        and explain it in detail. That would certainly help tackle the issue.\r\n      </p>\r\n      <p>\r\n        Or to throw all this aside and play some Pokemon. That would be a neat\r\n        alternative.\r\n      </p>\r\n    </>\r\n  )\r\n}\r\n\r\n/**\r\n * Hard-typed text for <SelectionMenuScreen />'s title and content in \"CardSearch\" page's\r\n * \"Help\" and \"Credits\" page's Secondary Screens\r\n */\r\nexport const secondaryScreensData = {\r\n  searchTips: {\r\n    displayTitle: \"\",\r\n    items: {\r\n      search: [\r\n        'You can search for both the card\\'s full name or a fragment of its name. E.g. \"Dark Magician\", \"Magician\", \"Dark\".',\r\n        'If you choose to search for a part of the card\\'s name, do so stating a continuous sequence of characters in its name. E.g. \"ark Ma\" is a valid search for \"Dark Magician\", where \"Dark ician\" is not.',\r\n        'Watch out for special symbols, common ones are required! E.g. \"Blue-Eyes\" is OK, \"Blue Eyes\" is not.',\r\n        'Other examples include \"&\". Searching for \"Ash Blossom & Joyous Spring\" will work, while \"Ash Blossom and Joyous Spring\" won\\'t.',\r\n        'When required, use hyphens \"-\", NOT dashes (hypens are the smaller ones). E.g. \"Blue-Eyes\" is valid, \"Blue–Eyes\" isn\\'t.',\r\n        'Searches are not case-sensitive. E.g. \"Ghost Ogre\", \"ghost ogre\" and \"gHoSt OGre\" are all the same.'\r\n      ],\r\n      prices: [\r\n        'Prices shown in the main containers are the average (avg) ones for each set based on Yu-Gi-Oh! Prices (yugiohprices.com), and the ones shown in \"Best prices\" section below are the best price deals found on each stated site.',\r\n        'Keep in mind that those \"Best prices\" do not discriminate between sets. As a rule of thumb, they normally correspond to the cheapest deal found on the set with the cheapest version of the searched card.',\r\n        \"If a price is not displayed (shown as -.--), it means that the target site does not have the searched card in stock. This also implies that prices shown in this app are based on the current listed cards on each site at the moment of searching.\",\r\n        \"All prices -as well as cards' and sets' data- are extracted from YgoProDeck's database using its API. Full credits to them.\"\r\n      ],\r\n      filter: [\r\n        \"Filtering is available on an already searched list of cards with more than one result.\",\r\n        \"Type any sequence of characters in the search box to apply filtering. Delete those to restore the results to their original state.\",\r\n        'E.g.: typing \"gir\" on a list containing [Dark Magician, Dark Magician Girl, Dark Magic Attack] will remove the former and the latter from it, leaving \"Dark Magician Girl\" as the only result.',\r\n        'On the same fashion, removing \"gir\" will restore the list.',\r\n        'To search for new results, simply type a card name or part of its name in the search box and tap on \"Search\".'\r\n      ]\r\n    }\r\n  },\r\n  credits: {\r\n    acknowledgments: {\r\n      displayTitle: \"Acknowledgments\",\r\n      toggler: \"acknowledgments\",\r\n      items: {\r\n        \"shout-outs\": [\r\n          \"Indeed, the first shout-out goes to the whole Yu-gi-oh! community. It's given me a marvelous hobbie, awesome friends and tailwind when life looked down on me in several situations.\",\r\n          \"Equally important, to my family and friends. It's more than certain than I would not be standing here if it wasn't for them. Each single step I took in life was following their advice and guided by their honest and caring intentions. I wish there were stronger words to express how much I love them all.\",\r\n          \"A well deserved acknowledgment to my teachers both on Programming and Business Administration careers. I took a big chunk of what I know from them, which not only includes academic matters but life lessons.\",\r\n          \"Warm congratulations to YGOPRODeck's team, specially their programmers. Its API endpoint and database are really practical and well built, it took almost no time to master them. Being free to use is an outstading gift nonetheless, so thank you lots!\",\r\n          \"And finally, to you for giving this app -and by extension, myself- a chance. It was built by a fan for anyone to enjoy. I hope to accomplish that to an extent!\"\r\n        ]\r\n      }\r\n    },\r\n    database: {\r\n      displayTitle: \"Card and Prices databases\",\r\n      toggler: \"cardDatabases\",\r\n      items: {\r\n        databases: [\r\n          \"Both information and prices displayed when seaching for a card are extracted from YGOPRODeck's detabase using its free API, so full credits to them for this practical endpoint, which brought a big chunk of this app up and running.\",\r\n          \"This database targets the best deals for each searched card in Amazon, CardMarket, eBay, TCGPlayer and CoolStuffInc websites. Credits to them too.\",\r\n          \"Visit all sites mentioned using the following links:\"\r\n        ]\r\n      }\r\n    },\r\n    contact: {\r\n      displayTitle: \"License and Contact\",\r\n      toggler: \"licenseContact\",\r\n      items: {\r\n        intro: [\r\n          \"This app was developed by a fan for the whole Yu-Gi-Oh! community, in an attempt to repay everything this outstanding game has gifted me throughout the years.\",\r\n          'Needless to say, it is free to download and to use, MIT copyright license backs it up. You can find in \"License\" section.',\r\n          \"Feel free to use this app as you please, it is a modest present for me to you. However, if you are to develop other projects using it or its code, linking back to the author would be much appreciated. It is extremely helpful to reach recruiters on IT fields.\"\r\n        ],\r\n        author: [\r\n          \"Hey everyone! I'm Renzo Murina Cadierno, my pleasure to meet you all!\",\r\n          \"I'm an enthusiastic junior programmer wannabe that specializes in Python general scripting and frontend development with Javascript. I have been learning the marvelous arts of programming for more than a year now, and let me tell you my love for it grows larger everyday.\",\r\n          \"As stated in the first tab, this app is free to use. It is uploaded in my Github repository, where I keep lots of other projects that might be of your interest. Of course, feel free to go check them out!\",\r\n          \"If you want to know more about myself, you can follow my LinkedIn social media platform. Everything I've done up to this point is detailed there, for both my Programming and Business Management careers.\",\r\n          \"And of course, nmcadierno@gmail.com is the email address you are looking for if you want to keep in touch with me.\",\r\n          \"Thank you for giving this app a go! I hope you enjoy it as much as I did while building it up.\"\r\n        ],\r\n        license: [\r\n          \"Copyright 2020 - Renzo Nahuel Murina Cadierno\",\r\n          'Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:',\r\n          \"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\",\r\n          'THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.'\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\"\r\nimport SecondaryScreen from \"../SecondaryScreen/SecondaryScreen\"\r\nimport ErrorMessage from \"../../../wrappers/ErrorMessage/ErrorMessage\"\r\nimport { errorMessages } from \"../../../utils/utilityObjects\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\n\r\n/**\r\n * This is the only hand-written class-based component across the whole app.\r\n * I could not create a functional component since <ErrorBoundary /> does\r\n * not support them on this React version\r\n */\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { hasError: false, errorInfo: null }\r\n    this.handleToggleSecondScreen = this.handleToggleSecondScreen.bind(this)\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // on a found error, toggle <SecondaryScreen />, which will show its\r\n    // error message component (as children set in <RouteComponents />)\r\n    const { toggleSecondScreen } = this.props\r\n    toggleSecondScreen(uiConfigs.togglers.secondaryScreens.errorBoundary)\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  handleToggleSecondScreen() {\r\n    // if this component triggered <SecondaryScreen />, use this function\r\n    // to close it, which also sets error state to false\r\n    const { toggleSecondScreen } = this.props\r\n    toggleSecondScreen()\r\n    this.setState({ hasError: false })\r\n  }\r\n\r\n  render() {\r\n    const { modalSFX, errorMessageComponent } = this.props\r\n    const connectedToInternet = !navigator.onLine\r\n\r\n    return this.state.hasError ? (\r\n      <SecondaryScreen\r\n        toggle={this.handleToggleSecondScreen}\r\n        animation=\"translateDown\"\r\n        sfxObj={modalSFX}\r\n        small={connectedToInternet}\r\n        scrollable={!connectedToInternet}\r\n      >\r\n        {connectedToInternet ? (\r\n          // if the error triggered due to lack of internet connection, trigger this\r\n          <ErrorMessage>{errorMessages.appNeedsInternet}</ErrorMessage>\r\n        ) : (\r\n          // any other error will trigger the generic message\r\n          errorMessageComponent()\r\n        )}\r\n      </SecondaryScreen>\r\n    ) : (\r\n      this.props.children\r\n    )\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import React from \"react\"\r\nimport { errorMessages } from \"../../../utils/utilityObjects\"\r\nimport styles from \"./GenericErrorMessage.module.css\"\r\n\r\nexport default function GenericErrorMessage() {\r\n  // wrap the generic error message in utilityObjects into proper styles and\r\n  // return it\r\n  return <div className={styles.Container}>{errorMessages.genericError}</div>\r\n}\r\n","import { useCallback } from \"react\"\r\nimport uiConfigs from \"../utils/ui.configs.json\"\r\n\r\nexport default function useLocalStorage(LSKey, LSValues, configs = {}) {\r\n  /**\r\n   * Creates a valid LocalStorage object for the app. If it fails to do so,\r\n   * an alert message will pop up and the window will close.\r\n   * This means the app needs LocalStorage to run.\r\n   */\r\n  const createLSObject = useCallback(() => {\r\n    let localStorageObject = {}\r\n    // create a valid LocalStorage object using each key name set in uiConfigs,\r\n    // grabbing its initial values which are also specified in uiConfigs\r\n    LSValues.forEach((item) => {\r\n      const key = Object.keys(item)[0]\r\n      localStorageObject[key] = uiConfigs[item[key]]\r\n    })\r\n    // try setting LocalStorage with that object\r\n    try {\r\n      window.localStorage.setItem(LSKey, JSON.stringify(localStorageObject))\r\n      // alert the user of the error and shut the app up\r\n    } catch (err) {\r\n      console.log(err)\r\n      window.alert(\r\n        \"This app needs LocalStorage to run. Please, enable it to continue.\"\r\n      )\r\n      window.close()\r\n    }\r\n    // upon success, return the LocalStorage object\r\n    return localStorageObject\r\n  }, [LSKey, LSValues])\r\n\r\n  /**\r\n   * Tries parsing and returning LocalStorage object, and if it fails,\r\n   * it creates a new one to return.\r\n   */\r\n  const getLSasJSObject = useCallback(() => {\r\n    let localStorageObject = {}\r\n    try {\r\n      localStorageObject = JSON.parse(window.localStorage.getItem(LSKey))\r\n      // if LocalStorage object is empty, create one.\r\n      if (Object.keys(localStorageObject).length === 0) {\r\n        localStorageObject = createLSObject()\r\n      }\r\n    } catch (err) {\r\n      // if LocalStorage object is invalid, create one.\r\n      localStorageObject = createLSObject()\r\n    }\r\n    return localStorageObject\r\n  }, [LSKey, createLSObject])\r\n\r\n  /**\r\n   * Updates localstorage with the passed object\r\n   * @param {string} updatedLSObject A valid JS object to set LocalStorage with\r\n   */\r\n  const updateBrowserLSItem = useCallback(\r\n    (objectToUpdateLS, callbackBeforeUpdating) => {\r\n      let updatedLSObject = objectToUpdateLS\r\n      if (callbackBeforeUpdating) {\r\n        updatedLSObject = callbackBeforeUpdating(objectToUpdateLS)\r\n      }\r\n      try {\r\n        window.localStorage.setItem(LSKey, JSON.stringify(updatedLSObject))\r\n      } catch (err) {\r\n        console.log(err)\r\n      }\r\n    },\r\n    [LSKey]\r\n  )\r\n\r\n  /**\r\n   * Updates a key or nested key inside LocalStorage and returns a reference to it.\r\n   * @param {string} key LocalStorage's key to update.\r\n   * @param {string} nestedKey Localstorage specific nested key to update inside of the parent key.\r\n   * @param {any} value The value the key will be updated with.\r\n   * @param {boolean} overrideValue true will override the whole key with the value, false will only update the nested key.\r\n   * @param {boolean} unshiftFirstItem On true, before the insertion of the new value, the oldest one will be removed if the max LS limit is reached.\r\n   * @param {function} genValueWithLS Use this function to generate a value with current Local Storage object.\r\n   */\r\n  const updateLSandGetLSasJSObj = useCallback(\r\n    ({\r\n      key,\r\n      nestedKey,\r\n      value,\r\n      overrideValue,\r\n      unshiftFirstItem,\r\n      genValueWithLS\r\n    }) => {\r\n      // bring the parsed LocalStorage object up\r\n      const localStorageObject = getLSasJSObject()\r\n      // shift the oldest item on LocalStorage target key if the max limit was reached\r\n      // and we want to shift indeed.\r\n      if (\r\n        unshiftFirstItem &&\r\n        localStorageObject[key].length >= configs.maxLogLength\r\n      ) {\r\n        localStorageObject[key].shift()\r\n      }\r\n      // if we need current Local Storage object to generate a value, use the genValueWithLS()\r\n      // assigned as parameter\r\n      let updatedValue = value\r\n      if (genValueWithLS) updatedValue = genValueWithLS(localStorageObject)\r\n      // make sure both LS key and updated are objects to update them as such. If value is an\r\n      // object but LS key is an array, this check is false, and will update LS Key array by\r\n      // appending the whole value object to it. Check below for the logic\r\n      const valueAndLSKeyAreTypeObject =\r\n        typeof updatedValue === \"object\" &&\r\n        !Array.isArray(localStorageObject[key])\r\n      // update the specified key or nested key. Override the previous value if overrideValue\r\n      // is true. Otherwise, update only the targetted key and leave the rest alone.\r\n      const updatedLSObject = nestedKey\r\n        ? {\r\n            ...localStorageObject,\r\n            [key]: overrideValue\r\n              ? {\r\n                  ...localStorageObject[key],\r\n                  [nestedKey]: updatedValue\r\n                }\r\n              : {\r\n                  ...localStorageObject[key],\r\n                  [nestedKey]: valueAndLSKeyAreTypeObject\r\n                    ? {\r\n                        ...localStorageObject[key][nestedKey],\r\n                        ...updatedValue\r\n                      }\r\n                    : [...localStorageObject[key][nestedKey], updatedValue]\r\n                }\r\n          }\r\n        : {\r\n            ...localStorageObject,\r\n            [key]: overrideValue\r\n              ? updatedValue\r\n              : valueAndLSKeyAreTypeObject\r\n              ? { ...localStorageObject[key], ...updatedValue }\r\n              : [...localStorageObject[key], updatedValue]\r\n          }\r\n      // refresh LocalStorage and return a pointer to the updated object (key)\r\n      updateBrowserLSItem(updatedLSObject)\r\n      return updatedLSObject\r\n    },\r\n    [getLSasJSObject, configs.maxLogLength, updateBrowserLSItem]\r\n  )\r\n\r\n  /**\r\n   * Deletes / clears a key or nested key inside LocalStorage and returns a reference to it.\r\n   * @param {string} key LocalStorage's key to clear.\r\n   * @param {string} nestedKey Localstorage specific nested key to clear inside of the parent key\r\n   * @param {boolean} removeKey True if the key should be destroyed. False to just clear it.\r\n   */\r\n  const deleteAndGetLSObject = useCallback(\r\n    ({ key, nestedKey, removeKey, callbackBeforeUpdating }) => {\r\n      // get the Localstorage object\r\n      const localStorageObject = getLSasJSObject()\r\n      // do we want to completely remove the key?\r\n      if (removeKey) {\r\n        // delete the 2nd-leven nested key if specified, otherwise, the 1st-level key\r\n        nestedKey\r\n          ? delete localStorageObject[key][nestedKey]\r\n          : delete localStorageObject[key]\r\n        // update LocalStorage with this new object (key removed) and return the object\r\n        updateBrowserLSItem(localStorageObject, callbackBeforeUpdating)\r\n        return localStorageObject\r\n      }\r\n      // we do not want to destroy the key, but just clear it. Again, if a 2nd-level nested\r\n      // key was specified, clear it. Leave the rest of the entries inside the key intact.\r\n      // If we specified no nested Key, clear the whole 1st-level key.\r\n      let deletedLSObject = nestedKey\r\n        ? {\r\n            ...localStorageObject,\r\n            [key]: {\r\n              ...localStorageObject[key],\r\n              [nestedKey]: []\r\n            }\r\n          }\r\n        : {\r\n            ...localStorageObject,\r\n            [key]: []\r\n          }\r\n      // refresh LocalStorage and return a pointer to the deleted object (key)\r\n      updateBrowserLSItem(deletedLSObject)\r\n      return deletedLSObject\r\n    },\r\n    [getLSasJSObject, updateBrowserLSItem]\r\n  )\r\n\r\n  return { getLSasJSObject, updateLSandGetLSasJSObj, deleteAndGetLSObject }\r\n}\r\n","export const FILTER_LOGS = \"FILTER_LOGS\"\r\nexport const CLEAR_LOGS_AND_CACHE = \"CLEAR_LOGS_AND_CACHE\"\r\nexport const INITIALIZE_LOGS_AND_CACHE = \"INITIALIZE_LOGS_AND_CACHE\"\r\n","import * as logPageActionTypes from \"./logPageActionTypes\"\r\n\r\nconst initialState = {\r\n  logs: [],\r\n  cache: [],\r\n  activeIcon: \"all\"\r\n}\r\n\r\nexport default function logPageReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case logPageActionTypes.FILTER_LOGS:\r\n      // do nothing if the same icon is clicked\r\n      if (state.activeIcon === action.payload) return state\r\n      // cache holds a copy of all logs. Set logs array with it if payload is \"all\"\r\n      else if (action.payload === \"all\") {\r\n        return {\r\n          ...state,\r\n          logs: state.cache,\r\n          activeIcon: action.payload\r\n        }\r\n      }\r\n      // on a \"reverse\" payload, reverse the current log list and set it as state\r\n      else if (action.payload === \"reverse\") {\r\n        const reversedLogs = [...state.logs].reverse()\r\n        return {\r\n          ...state,\r\n          logs: reversedLogs\r\n        }\r\n      }\r\n      // if we are not clicking in the same icon, nor trying to display all logs\r\n      // or reversing them, then we are attempting to filter by log types\r\n      // \"timer\", \"lp\", \"coin\" and \"dice\". So, filter the cache (as it will always\r\n      // contain a copy of all logs), and set logs state with the result.\r\n      const filteredLogs = state.cache.filter(\r\n        (log) => log.type === action.payload\r\n      )\r\n      return {\r\n        ...state,\r\n        logs: filteredLogs,\r\n        activeIcon: action.payload\r\n      }\r\n\r\n    case logPageActionTypes.CLEAR_LOGS_AND_CACHE:\r\n      // override logs and cache state to an empty array\r\n      return {\r\n        ...state,\r\n        logs: [],\r\n        cache: []\r\n      }\r\n\r\n    case logPageActionTypes.INITIALIZE_LOGS_AND_CACHE:\r\n      // sync both logs and cache to hold the same log array\r\n      return {\r\n        ...state,\r\n        logs: action.payload,\r\n        cache: action.payload\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import * as logPageActionTypes from \"./logPageActionTypes\"\r\n\r\n// logType: <string> \"lp\", \"dice\", \"coin\", \"timer\", \"reverse\" or \"all\"\r\nexport const filterLogs = (logType) => ({\r\n  type: logPageActionTypes.FILTER_LOGS,\r\n  payload: logType\r\n})\r\n\r\nexport const clearLogsAndCache = () => ({\r\n  type: logPageActionTypes.CLEAR_LOGS_AND_CACHE\r\n})\r\n\r\n// logArray: <Array> array with all log objects coming from local storage\r\nexport const initializeLogsAndCache = (logArray) => ({\r\n  type: logPageActionTypes.INITIALIZE_LOGS_AND_CACHE,\r\n  payload: logArray\r\n})\r\n","import React, { createContext, useReducer, useCallback } from \"react\"\r\nimport useLocalStorage from \"../hooks/useLocalStorage\"\r\nimport logPageReducer from \"../store/LogPage/logPageReducer\"\r\nimport * as logPageActionCreators from \"../store/LogPage/logPageActionCreators\"\r\nimport uiConfigs from \"../utils/ui.configs.json\"\r\n\r\nexport const LogContext = createContext({\r\n  logPageState: {},\r\n  dispatchLogPageAction: () => {},\r\n  updateLSandGetLSasJSObj: () => {},\r\n  mountLogs: () => {},\r\n  filterLogs: () => {},\r\n  deleteLSLogHistory: () => {}\r\n})\r\n\r\nexport function LogContextProvider({ children }) {\r\n  // initialize a local storage handler hook for \"Logs\". It will manage\r\n  // an array with all log objects across components and app reloads\r\n  const {\r\n    getLSasJSObject,\r\n    updateLSandGetLSasJSObj,\r\n    deleteAndGetLSObject\r\n  } = useLocalStorage(\r\n    uiConfigs.localStorageLogsKeyName,\r\n    uiConfigs.initialLogsLocalStorage,\r\n    { maxLogLength: uiConfigs.maxLogLength }\r\n  )\r\n  // create a logPage reducer to manage adding/removing/displaying log objects\r\n  // in <LogPage />'s components\r\n  const [logPageState, dispatchLogPageAction] = useReducer(logPageReducer, {\r\n    logs: [],\r\n    cache: [],\r\n    activeIcon: \"all\"\r\n  })\r\n\r\n  const mountLogs = useCallback(() => {\r\n    // This function is triggered at <LogPage />'s mount, to load all logs from\r\n    // local storage. It bring all logs from LocalStorage, reverses them (last\r\n    // ones shown first), and sets both array states with it\r\n    const logHistory = getLSasJSObject()[\r\n      uiConfigs.localStorageLogsObjectKeys.logHistory\r\n    ]\r\n    logHistory.reverse()\r\n    dispatchLogPageAction(\r\n      logPageActionCreators.initializeLogsAndCache(logHistory)\r\n    )\r\n  }, [])\r\n\r\n  const filterLogs = useCallback((type) => {\r\n    // filters logs array by the type passed in param\r\n    dispatchLogPageAction(logPageActionCreators.filterLogs(type))\r\n  }, [])\r\n\r\n  const deleteLSLogHistory = useCallback(() => {\r\n    // clears local storage log history and both logs and cache arrays in reducer.\r\n    deleteAndGetLSObject({\r\n      key: uiConfigs.localStorageLogsObjectKeys.logHistory\r\n    })\r\n    dispatchLogPageAction(logPageActionCreators.clearLogsAndCache())\r\n  }, [])\r\n\r\n  // unite all values to be provided by this context into an object\r\n  const passedContext = {\r\n    logPageState,\r\n    dispatchLogPageAction,\r\n    updateLSandGetLSasJSObj,\r\n    mountLogs,\r\n    filterLogs,\r\n    deleteLSLogHistory\r\n  }\r\n\r\n  return (\r\n    <LogContext.Provider value={passedContext}>{children}</LogContext.Provider>\r\n  )\r\n}\r\n","export const LOG = \"LOG\"\r\nexport const TOGGLE = \"TOGGLE\"\r\n","export const INC = \"INC\"\r\nexport const DEC = \"DEC\"\r\nexport const RESTART = \"RESTART\"\r\nexport const CONFIRM_RESTART = \"CONFIRM_RESTART\"\r\nexport const MODIFY = \"MODIFY\"\r\nexport const CLEAR = \"CLEAR\"\r\n","import * as logActionTypes from \"./logActionTypes\"\r\nimport * as lpActionTypes from \"../LifePoints/lifePointsActionTypes\"\r\n\r\nconst initialState = {\r\n  logState: false,\r\n  logType: \"\",\r\n  logText: \"\",\r\n  logIgTimer: \"\",\r\n  logPing: false\r\n}\r\n\r\nexport default function logReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case logActionTypes.LOG:\r\n      // logState determines if the current action needs to be logged\r\n      // (the settings has been turned on). So, if false, do nothing.\r\n      if (!state.logState) return state\r\n      // otherwise, update state with the payload. Since \"LP\" log has several\r\n      // actions, we centralize them all in \"lp\" category.\r\n      const { type, text, timer, logPing } = action.payload\r\n      return {\r\n        ...state,\r\n        logType: Object.keys(lpActionTypes).includes(type) ? \"lp\" : type,\r\n        logText: text,\r\n        logIgTimer: timer,\r\n        logPing\r\n      }\r\n\r\n    case logActionTypes.TOGGLE:\r\n      // logState determines if an action has to be logged or not\r\n      return {\r\n        ...state,\r\n        logState: !state.logState,\r\n        logType: \"\",\r\n        logText: \"\",\r\n        logIgTimer: \"\"\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import styles from \"./MiniCircle.module.css\"\r\n\r\nexport const classes = {\r\n  container: (\r\n    isActive,\r\n    onClick,\r\n    animateOnClick,\r\n    animateOnDisplayChange,\r\n    growState,\r\n    propsClassNames\r\n  ) =>\r\n    [\r\n      styles.Container, // default className\r\n      isActive ? styles.ContainerActive : \"\",\r\n      onClick ? styles.Clickable : \"\",\r\n      (animateOnClick || animateOnDisplayChange) && growState\r\n        ? styles.Grow\r\n        : \"\",\r\n      propsClassNames?.join(\" \")\r\n    ].join(\" \")\r\n}\r\n\r\nexport const inlineStyles = {\r\n  container: (display, style, addNumberColorIndicator) =>\r\n    // addNumberColorIndicator is true only on <DeckBuilder>'s <CardListItem> components.\r\n    // It tells <MiniCircle> to change hue and brightness according to the number shown.\r\n    // If addNumberColorIndicator is undefined, then apply \"styles\" object in props.\r\n    // undefined \"styles\" prop results in null inline styles\r\n    addNumberColorIndicator\r\n      ? {\r\n          filter: `hue-rotate(${\r\n            50 + (((display * 100) / 5) ^ -1)\r\n          }deg) brightness(${80 + display * 25}%)      `\r\n        }\r\n      : style ?? null\r\n}\r\n","import React, { memo, useCallback, useEffect } from \"react\"\r\nimport useToggle from \"../../../hooks/useToggle\"\r\nimport PropTypes from \"prop-types\"\r\nimport { classes, inlineStyles } from \"./MiniCircle.utils\"\r\n\r\nfunction MiniCircle({\r\n  display, // <string|number|React.node> <span>'s children, what is shown inside <MiniCircle />\r\n  isActive, // <boolean> highlights this component if true\r\n  onClick = null, // <function> component's onClick callback\r\n  stopPropagation, // <boolean> prevents propagation if true\r\n  animateOnClick, // <boolean> true will play a \"grow-and-shrink\" animation on click\r\n  animateOnDisplayChange, // <boolean> same as animateOnClick but when display changes\r\n  addNumberColorIndicator, // <boolean> adds a hue+brightness change on display change\r\n  ariaLabel, // <string> aria-label for rendered <span>\r\n  ariaPressed, // <boolean> aria-pressed for rendered <span> if role is \"button\"\r\n  role, // <string> aria-role for rendered <span>\r\n  style, // <object> inline styling for rendered <span>\r\n  classNames // <Array> array of classNames strings.\r\n}) {\r\n  // state and toggler for \"grow\" animation if any \"animate\" prop was defined\r\n  const [growState, toggleGrow] = useToggle(false)\r\n\r\n  const handleClick = useCallback((e) => {\r\n    // stopPropagation if told so in props. Also, trigger set growState to true\r\n    // is animateOnClick = true, which triggers the second useEffect. Otherwise,\r\n    // just trigger onClick callback\r\n    stopPropagation && e.stopPropagation()\r\n    animateOnClick ? toggleGrow() : onClick()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    // on display prop change and if animateOnDisplayChange = true, toggle growState\r\n    // which triggers useEffect below. animateOnClick triggers that useEffect too,\r\n    // so specifically check for it. If it is also true, then nullify this useEffect\r\n    animateOnDisplayChange && !animateOnClick && toggleGrow()\r\n  }, [display])\r\n\r\n  useEffect(() => {\r\n    let growTimeOut\r\n    // truthy growState means a useEffect above triggered. Set timeout to toggle\r\n    // growState off and call for onClick callback if it is defined\r\n    if (growState)\r\n      growTimeOut = setTimeout(() => {\r\n        toggleGrow()\r\n        onClick && onClick()\r\n      }, 100)\r\n    // clear timeout on cleanup, which assures no collision on multiple clicks\r\n    // in a short period of time\r\n    return () => growTimeOut && clearTimeout(growTimeOut)\r\n  }, [growState])\r\n\r\n  return (\r\n    <span\r\n      aria-label={ariaLabel}\r\n      role={role}\r\n      aria-pressed={ariaPressed}\r\n      style={inlineStyles.container(display, style, addNumberColorIndicator)}\r\n      className={classes.container(\r\n        isActive,\r\n        onClick,\r\n        animateOnClick,\r\n        animateOnDisplayChange,\r\n        growState,\r\n        classNames\r\n      )}\r\n      onClick={handleClick}\r\n    >\r\n      {display}\r\n    </span>\r\n  )\r\n}\r\n\r\nMiniCircle.propTypes = {\r\n  display: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.node\r\n  ]),\r\n  isActive: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  stopPropagation: PropTypes.bool,\r\n  animateOnClick: PropTypes.bool,\r\n  animateOnDisplayChange: PropTypes.bool,\r\n  addNumberColorIndicator: PropTypes.bool,\r\n  ariaLabel: PropTypes.string,\r\n  ariaPressed: PropTypes.bool,\r\n  role: PropTypes.string,\r\n  style: PropTypes.object,\r\n  classNames: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n\r\nexport default memo(MiniCircle)\r\n","import uiConfigs from \"../utils/ui.configs.json\"\r\nimport light from \"../assets/cardIcons/light.svg\"\r\nimport dark from \"../assets/cardIcons/dark.svg\"\r\nimport earth from \"../assets/cardIcons/earth.svg\"\r\nimport fire from \"../assets/cardIcons/fire.svg\"\r\nimport water from \"../assets/cardIcons/water.svg\"\r\nimport wind from \"../assets/cardIcons/wind.svg\"\r\nimport divine from \"../assets/cardIcons/divine.svg\"\r\nimport spell from \"../assets/cardIcons/spell.svg\"\r\nimport trap from \"../assets/cardIcons/trap.svg\"\r\nimport trapspell from \"../assets/cardIcons/trapspell.svg\"\r\nimport normal from \"../assets/cardIcons/normal.svg\"\r\nimport continuous from \"../assets/cardIcons/continuous.svg\"\r\nimport quick from \"../assets/cardIcons/quick.svg\"\r\nimport field from \"../assets/cardIcons/field.svg\"\r\nimport equip from \"../assets/cardIcons/equip.svg\"\r\nimport ritual from \"../assets/cardIcons/ritual.svg\"\r\nimport lvStar from \"../assets/cardIcons/lv-star.svg\"\r\nimport xyzStar from \"../assets/cardIcons/xyz-star.svg\"\r\nimport tokenSpell from \"../assets/tokenIcons/spell.svg\"\r\nimport tokenLight from \"../assets/tokenIcons/light.svg\"\r\nimport tokenDark from \"../assets/tokenIcons/dark.svg\"\r\nimport tokenWind from \"../assets/tokenIcons/wind.svg\"\r\nimport tokenFire from \"../assets/tokenIcons/fire.svg\"\r\nimport tokenWater from \"../assets/tokenIcons/water.svg\"\r\nimport tokenEarth from \"../assets/tokenIcons/earth.svg\"\r\n\r\n/**\r\n * Gets the attribute of the card and returns the respective svg related icon.\r\n * @param {string} cardAttribute The card attribute or type if it is not a monster card\r\n */\r\nexport function getCardIcon(cardAttribute) {\r\n  if (!cardAttribute) return null\r\n\r\n  switch (cardAttribute.toLowerCase()) {\r\n    case \"light\":\r\n      return light\r\n    case \"dark\":\r\n      return dark\r\n    case \"wind\":\r\n      return wind\r\n    case \"water\":\r\n      return water\r\n    case \"fire\":\r\n      return fire\r\n    case \"earth\":\r\n      return earth\r\n    case \"spell\":\r\n      return spell\r\n    case \"trap\":\r\n      return trap\r\n    case \"continuous\":\r\n      return continuous\r\n    case \"quick-play\":\r\n      return quick\r\n    case \"field\":\r\n      return field\r\n    case \"equip\":\r\n      return equip\r\n    case \"ritual\":\r\n      return ritual\r\n    case \"divine\":\r\n      return divine\r\n    case \"trapspell\":\r\n      return trapspell\r\n    case \"normal\":\r\n    default:\r\n      return normal\r\n  }\r\n}\r\n\r\n/**\r\n * Takes the card type and returns the rgb color associated to it\r\n * @param {string} cardType The card type\r\n */\r\nexport function getCardTypeStyle(cardType, opacity = 1) {\r\n  // card type is needed. Assigning none will return null\r\n  if (!cardType) return null\r\n  // split the card type string\r\n  let splittedTypeString = cardType.split(\" \")\r\n  // compare the first word on each and return the respective type color\r\n  switch (splittedTypeString[0].toLowerCase()) {\r\n    case \"effect\":\r\n    case \"flip\":\r\n    case \"spirit\":\r\n    case \"tuner\":\r\n      return \"rgba(209, 143, 89, \" + opacity + \")\"\r\n    case \"spell\":\r\n      return \"rgba(57, 190, 146, \" + opacity + \")\"\r\n    case \"trap\":\r\n      return \"rgba(204, 69, 143, \" + opacity + \")\"\r\n    case \"link\":\r\n      return \"rgba(19, 95, 182, \" + opacity + \")\"\r\n    case \"xyz\":\r\n      return \"rgba(80, 80, 107, \" + opacity + \")\"\r\n    case \"synchro\":\r\n      return \"rgba(224, 226, 228, \" + opacity + \")\"\r\n    case \"fusion\":\r\n      return \"rgba(124, 74, 204, \" + opacity + \")\"\r\n    case \"ritual\":\r\n      return \"rgba(42, 88, 212, \" + opacity + \")\"\r\n    case \"pendulum\":\r\n      // \"Pendulum Effect Fusion Monsters\" are the only case of an extra deck\r\n      // dual type Pendulum monster whose type does not start with the counterpart\r\n      // type name (\"Synchro Pendulum\", \"XYZ Pendulum\" vs \"Pendulum Fusion\").\r\n      // We have to manually assign the fusion color as it will fall back to the\r\n      // regular pendulum color otherwise, not suitable for extra deck visual cue\r\n      if (splittedTypeString[2] && splittedTypeString[2] === \"Fusion\") {\r\n        return \"rgba(124, 74, 204, \" + opacity + \")\"\r\n      }\r\n      // any other case is a main deck pendulum card\r\n      return \"rgba(252, 65, 242, \" + opacity + \")\"\r\n    case \"normal\":\r\n      return \"rgba(219, 202, 44, \" + opacity + \")\"\r\n    case \"toon\":\r\n    case \"skill\":\r\n      return \"rgba(137, 217, 214, \" + opacity + \")\"\r\n    default:\r\n      return null\r\n  }\r\n}\r\n\r\n/**\r\n * Gets YgoProDeck's banlist API response and converts it to a valid format to display as view.\r\n * Valid response: [status, format], both strings.\r\n * @param {object} fetchedBalistData API banlist response {ban_tcg: <status>, ban_ocg: <status>}\r\n * @param {string} format \"tcg\" or \"ocg\"\r\n */\r\nexport function getBanlistInfo(fetchedBalistData, format) {\r\n  // a null/undefined response, or a missing particular ban format means\r\n  // the card is unlimited\r\n  if (!fetchedBalistData || !fetchedBalistData[\"ban_\" + format]) {\r\n    return [\"Unlimited\", format]\r\n  }\r\n  // otherwise, return the status and the format\r\n  return [fetchedBalistData[\"ban_\" + format], format]\r\n}\r\n\r\n/**\r\n * Gets the type of the card and its level/rank and returns an array of svg icons\r\n * to render as their proper level/rank.\r\n * @param {number} rankOrLevel The level or rank of the card\r\n * @param {string} cardType The type of the card (XYZ Monster, Synchro Monster, and so on)\r\n */\r\nexport function getRankOrLevelIconURLArray(rankOrLevel, cardType) {\r\n  // a falsy cardType or not a monster card does not require this calculation\r\n  if (!cardType || !isMonsterCard(cardType)) return null\r\n  // create an array whose length === the level/rank/link value\r\n  const starArray = new Array(rankOrLevel)\r\n  // if it is an XYZ monster, fill it with XYZ star svg icons, else with normal star icons\r\n  cardType === \"XYZ Monster\" ? starArray.fill(xyzStar) : starArray.fill(lvStar)\r\n  // and return the array\r\n  return starArray\r\n}\r\n\r\n/**\r\n * Returns true if the card type is a valid Monster card, false otherwise.\r\n * @param {string} cardType The card type\r\n */\r\nexport function isMonsterCard(cardType) {\r\n  return !uiConfigs.notMonsterCardsArray.includes(cardType)\r\n}\r\n\r\n// array of token images to loop when switching token types\r\nconst tokenIconArray = [\r\n  tokenSpell,\r\n  tokenLight,\r\n  tokenDark,\r\n  tokenWind,\r\n  tokenFire,\r\n  tokenWater,\r\n  tokenEarth\r\n]\r\n\r\n/**\r\n * Returns the next image and alt to switch the token to.\r\n * @param {string} currentImg svg image of the current token\r\n * @param {boolean} moveForwards True will move to the next img in the array, false, backwards\r\n */\r\nexport function getNextTokenImgAndAlt(currentImg, moveForwards) {\r\n  // target the respective image in the array, and move to the previous\r\n  // or the next one, depending on moveForwards boolean\r\n  let nextIndex =\r\n    tokenIconArray.findIndex((arrayImg) => arrayImg === currentImg) +\r\n    (moveForwards ? 1 : -1)\r\n  // loop to the first image if we exceed tokenArray.length\r\n  if (nextIndex >= tokenIconArray.length) nextIndex = 0\r\n  // or loop to the end if we go lower than 0\r\n  else if (nextIndex < 0) nextIndex = tokenIconArray.length - 1\r\n  // return an object with the new img and alt for the token\r\n  return {\r\n    img: tokenIconArray[nextIndex],\r\n    alt: \"Token type \" + (nextIndex + 1)\r\n  }\r\n}\r\n\r\n/**\r\n * Gets a card object's name and an array of all cards for each \"main\", \"side\" and\r\n * \"extra\" sections and returns amount of cards with the same passed name in all\r\n * sections combined.\r\n * @param {string} cardName the card's name to look for in the section\r\n * @param  {...Array} deckSectionsArrays An array of card objects for each section\r\n */\r\nexport function getCardQuantityInDeck(cardName, ...deckSectionsArrays) {\r\n  return deckSectionsArrays\r\n    .flat()\r\n    .reduce(\r\n      (acc, currCard) =>\r\n        currCard.name === cardName ? acc + currCard.quantity : acc,\r\n      0\r\n    )\r\n}\r\n\r\n/**\r\n * Takes a card object with all properties needed to be displayed in CardSearch\r\n * component and reduces it to the bare minimum keys to be considered a valid\r\n * object to display in DeckConstructor component. This is such because we need\r\n * to display thousands of elements at once, thus speeding up the process.\r\n * @param {object} detailedCardObj A card object with all properties neeeded in CardSearch Component\r\n */\r\nexport function getSimpleCardTypeObj(detailedCardObj) {\r\n  return {\r\n    name: detailedCardObj.name,\r\n    type: detailedCardObj.type,\r\n    quantity: detailedCardObj.quantity\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the sum of card object's quantity key in the section array\r\n * @param {Array} sectionArray An array of card objects of the target section\r\n */\r\nexport function getAmountOfCardsInSection(sectionArray) {\r\n  return sectionArray.reduce((acc, cardObj) => acc + cardObj.quantity, 0)\r\n}\r\n\r\n/**\r\n * Gets the quantity of cards with the passed name on the section array.\r\n * @param {string} targetCardName the card's name to look for in the section\r\n * @param {Array} sectionArray An array of card objects of the target section\r\n */\r\nexport function getAmountOfSpecificCardInSection(targetCardName, sectionArray) {\r\n  const cardIndexInSection = sectionArray.findIndex(\r\n    (cardObj) => cardObj.name === targetCardName\r\n  )\r\n  return cardIndexInSection > -1 ? sectionArray[cardIndexInSection].quantity : 0\r\n}\r\n\r\n/**\r\n * Gets the in-section index position of the card whose name matches target card's\r\n * @param {Array} sectionArray An array of card objects of the target section\r\n * @param {string} targetCardName the card's name to look for in the section\r\n */\r\nexport function getCardIndexInSection(sectionArr, targetCardName) {\r\n  return sectionArr.findIndex((card) => card.name === targetCardName)\r\n}\r\n\r\n/**\r\n * Returns the Toast message to display when deck limit is alraedy reached and we try\r\n * to add a new deck\r\n */\r\nexport function getDeckLimitToastMessage() {\r\n  return \"Nice frontend and/or spaghettigraphy skills! Tell bikein ryuhart I said hi.\"\r\n}\r\n\r\n/**\r\n * Compares the card type versus the ones that fit inside the Extra Deck. If there's\r\n * a match, it returns \"extra\". If it does not match, then the card belongs to \"main\"\r\n * deck, thus returning \"main\".\r\n * @param {string} cardType The card type\r\n */\r\nexport function getCardDefaultSection(cardType) {\r\n  return uiConfigs.deckBuilderConfigs.extraDeckCards.includes(cardType)\r\n    ? \"extra\"\r\n    : \"main\"\r\n}\r\n\r\n/**\r\n * Given the current active deck section (\"main\", \"side\", \"extra\"), it returns\r\n * The available section where the selected card can be moved to (as a string).\r\n * E.g.: an XYZ monster in the side deck can be moved to the extra deck but not\r\n * to the main deck. A normal monster can be moved from the main to the side, and\r\n * so on.\r\n * @param {string} cardType The card type\r\n * @param {string} currentSection The active section (\"main\", \"side\", \"extra\")\r\n */\r\nexport function getCardReverseSection(cardType, currentSection) {\r\n  return currentSection === \"side\" ? getCardDefaultSection(cardType) : \"side\"\r\n}\r\n\r\n/**\r\n * Creates and return a map whose keys are the first word of the card type, and\r\n * empty array as values. E.g.: {\"Effect\": [], \"Flip\": [], \"Spell\": [], \"Trap\": [], ...}\r\n * Given the first word of their type, card objects will be stored here to be\r\n * sorted and returned as a single ordered array by sortSectionAndCleanMap()\r\n */\r\nexport function generateCardTypeMap() {\r\n  // create an empty map\r\n  const cardTypeMap = new Map()\r\n  // fill it with the first word of each card type. Repeated values will be\r\n  // intentionally overriden to be sorted in a better fashion. Otherwise, cards\r\n  // with multiple subtypes would not be able to be sorted alphabetically given\r\n  // their main type.\r\n  uiConfigs.deckBuilderConfigs.mainDeckCards.forEach((cardType) =>\r\n    cardTypeMap.set(cardType.split(\" \")[0], [])\r\n  )\r\n  uiConfigs.deckBuilderConfigs.extraDeckCards.forEach((cardType) =>\r\n    cardTypeMap.set(cardType.split(\" \")[0], [])\r\n  )\r\n  // return it\r\n  return cardTypeMap\r\n}\r\n\r\n/**\r\n * Given the current section array of cards and a map with keys being the first\r\n * word of the card type (\"Effect\", \"Trap\", \"Spell\", \"XYZ\", \"Link\", ...) and\r\n * empty arrays as values, it maps all card objects into their proper type key\r\n * array, sorts them out and yields a flat array with all cards in order.\r\n * Next generator call triggers generateCardTypeMap() to regenerate the map so\r\n * that cards can be sorted again. This is a fallback measure to be called each\r\n * time a new card is added, of if we switch to a new section/deck.\r\n * @param {Array} sectionArray An array of card objects of the target section\r\n * @param {Map} sectionMap A map whose keys are the first word of the card type, and empty arrays as values\r\n */\r\nexport function* sortSectionAndCleanMap(sectionArray, sectionMap) {\r\n  // fill the map of types with cards whose first word on its type matches the key.\r\n  // E.g: {\"Trap\": [{name: \"Mirror Force\", type: \"Trap\"}, ...]}.\r\n  // Note the special case of \"Pendulum Effect Fusion Monster\", needed to be sorted\r\n  // as a Fusion monster, not as a Pendulum one. We cannot modify it any other way\r\n  // since it comes as is from the database. So we manually set its type to fit.\r\n  sectionArray.forEach((cardObj) => {\r\n    let splittedTypeString = cardObj.type.split(\" \")\r\n    if (\r\n      splittedTypeString[0] === \"Pendulum\" &&\r\n      splittedTypeString[2] &&\r\n      splittedTypeString[2] === \"Fusion\"\r\n    ) {\r\n      splittedTypeString[0] = \"Fusion\"\r\n    }\r\n    const currentSection = sectionMap.get(splittedTypeString[0])\r\n    if (currentSection) currentSection.push(cardObj)\r\n  })\r\n  // map all arrays on each type key into a single one. Order their contents by\r\n  // name (more organized while reading), and flat everything into a single array.\r\n  // Yield that array to be displayed on the respective section\r\n  yield Array.from(sectionMap.values())\r\n    .map((cardTypeArr) =>\r\n      cardTypeArr.sort((a, b) => (a.name > b.name ? 1 : -1))\r\n    )\r\n    .flat()\r\n  // second call is applied to reconstruct the the map of all card types so that\r\n  // we can start brand new when a new card is added or a section/deck is changed\r\n  return generateCardTypeMap()\r\n}\r\n\r\n/**\r\n * Used by deckConstructorReducer and YugiohValidator to get the default structure\r\n * of a starting -empty- deck\r\n */\r\nexport function getStartingDeckSkeleton() {\r\n  return {\r\n    main: [],\r\n    side: [],\r\n    extra: [],\r\n    test: [],\r\n    name: \"Starting deck\"\r\n  }\r\n}\r\n","import uiConfigs from \"./ui.configs.json\"\r\nimport {\r\n  getAmountOfCardsInSection,\r\n  getAmountOfSpecificCardInSection\r\n} from \"./yugiohSpecificFunctions\"\r\n\r\n/**\r\n * Universal validation class. Handles all non-specific cases\r\n */\r\nexport default class Validator {\r\n  constructor(...args) {\r\n    this._args = args\r\n  }\r\n  // checks if the length of both number arguments added together would\r\n  // end up being higher than len\r\n  lenWouldBeHigherThan(len) {\r\n    const [number, addition] = this._args\r\n    if ((number + addition).toString().length > len) return true\r\n    return false\r\n  }\r\n  // checks if the result of both number arguments substracted one from\r\n  // the other would end up being lower than int\r\n  intWouldBeLowerThan(int) {\r\n    const [number, addition] = this._args\r\n    if (number - addition < int) return true\r\n    return false\r\n  }\r\n  // checks if the result of both number arguments added together would\r\n  // end up being higher than int\r\n  intWouldBeHigherThan(int) {\r\n    const [number, addition] = this._args\r\n    if (number + addition > int) return true\r\n    return false\r\n  }\r\n  // checks if both objects passed as arguments are shallowly equal to each other.\r\n  // For that, they must have different length and all of their keys must\r\n  // have the same name and value.\r\n  objectsAreShallowlyEqual() {\r\n    const [o1, o2] = this._args\r\n    if (Object.keys(o1).length !== Object.keys(o2).length) return false\r\n    if (Object.keys(o1).every((k) => o2.hasOwnProperty(k) && o1[k] === o2[k]))\r\n      return true\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Validation class solely dedicated to inputs\r\n */\r\nexport class InputValidator {\r\n  constructor(...args) {\r\n    this._args = args\r\n  }\r\n  // checks if input's value's length is lower than int\r\n  lengthIsLowerThan(int) {\r\n    const [value] = this._args\r\n    if (value.length < int) return true\r\n    return false\r\n  }\r\n  // checks if input's value's length is higher than int\r\n  lengthIsHigherThan(int) {\r\n    const [value] = this._args\r\n    if (value.length > int) return true\r\n    return false\r\n  }\r\n  // checks if input's value consists of only digits\r\n  stringOnlyHasIntegers() {\r\n    const [value] = this._args\r\n    return /^\\d*$/.test(value)\r\n  }\r\n  isValidDeckName(maxLength) {\r\n    const [value] = this._args\r\n    return (\r\n      /^[a-z0-9!@#$%^&*()_+=~`/<>,.?{}[\\];':\"\\- ]*$/i.test(value) &&\r\n      !this.lengthIsHigherThan(maxLength)\r\n    )\r\n  }\r\n  // checks if the name is alphanumeric and/or includes spaces (limit 1-12 chars)\r\n  isValidPlayerName() {\r\n    const [value] = this._args\r\n    return /^[a-z0-9 ]{1,12}$/i.test(value)\r\n  }\r\n  // compares one value of the target input with the value of another one.\r\n  // If the value to assign to the target input would be higher than the one\r\n  // in the second input, values are exchanged between inputs. Otherwise, if\r\n  // the value of the second input (target) would be lower than the first, the\r\n  // values are also exchanged.\r\n  // In other words, input one will always hold a value lower than input two.\r\n  // > currentlyEvaluatedInputName: target input's name property.\r\n  // > valueToCompare: the value of the target input.\r\n  // > inputStates: object containing both inputs. {input name: input value}\r\n  reverseInputs(currentlyEvaluatedInputName, valueToCompare, inputStates) {\r\n    const [inputRefOne, inputRefTwo] = this._args\r\n    const inputOneRef = inputRefOne.current\r\n    const inputTwoRef = inputRefTwo.current\r\n    let inputOneNewValue = inputStates[inputOneRef.name]\r\n    let inputTwoNewValue = inputStates[inputTwoRef.name]\r\n\r\n    if (currentlyEvaluatedInputName === inputOneRef.name) {\r\n      if (valueToCompare > inputStates[inputTwoRef.name]) {\r\n        inputOneNewValue = inputStates[inputTwoRef.name]\r\n        inputTwoNewValue = valueToCompare\r\n      } else {\r\n        inputOneNewValue = valueToCompare\r\n      }\r\n    } else if (currentlyEvaluatedInputName === inputTwoRef.name) {\r\n      if (valueToCompare < inputStates[inputOneRef.name]) {\r\n        inputOneNewValue = valueToCompare\r\n        inputTwoNewValue = inputStates[inputOneRef.name]\r\n      } else {\r\n        inputTwoNewValue = valueToCompare\r\n      }\r\n    }\r\n\r\n    return {\r\n      [inputOneRef.name]: inputOneNewValue,\r\n      [inputTwoRef.name]: inputTwoNewValue\r\n    }\r\n  }\r\n  // returns a list with invalid characters on its unicode form for\r\n  // international keys compatibility\r\n  getInvalidUnicodeArray() {\r\n    return [\r\n      \"\\u0045\",\r\n      \"\\u006C\",\r\n      \"\\u0041\",\r\n      \"\\u0076\",\r\n      \"\\u0065\",\r\n      \"\\u0044\",\r\n      \"\\u0065\",\r\n      \"\\u0046\",\r\n      \"\\u0075\",\r\n      \"\\u0065\",\r\n      \"\\u0067\",\r\n      \"\\u006F\"\r\n    ]\r\n  }\r\n}\r\n\r\n/**\r\n * Validator for \"DeckBuilder\" page and its components along the tree. It checks for\r\n * card limits in sections, card limits per card name, if a deck is the default one,\r\n * and so on.\r\n */\r\nexport class YugiohValidator {\r\n  constructor(...args) {\r\n    this._args = args\r\n  }\r\n  isMaxLimitInSectionExceeded(sectionName, sectionArray) {\r\n    // checks if the limit of cards per section is exceeded. Uses uiConfigs to look for\r\n    // limits. Normally set to \"main\": 60, \"side\": 15 \"extra\": 15\r\n    return (\r\n      getAmountOfCardsInSection(sectionArray) >=\r\n      uiConfigs.deckBuilderConfigs.cardLimits[sectionName]\r\n    )\r\n  }\r\n  isCardLimitInSectionExceeded(cardObj, sectionArray) {\r\n    // on a max limit of the card in the section, return false. This method takes\r\n    // into consideration the amount of cards in its neighbor section. Meaning\r\n    // that if you try to add a copy of a card in \"main\" while you have 2 copies there\r\n    // and 1 in \"side\", the check will return false (no more than 3 cards in deck).\r\n    return (\r\n      getAmountOfSpecificCardInSection(cardObj.name, sectionArray) +\r\n        cardObj.quantity >\r\n      3\r\n    )\r\n  }\r\n  isSection(currentSection, sectionToTest) {\r\n    // simply return a test to see if both strings match\r\n    return currentSection === sectionToTest\r\n  }\r\n  isStartingDeck(deck, defaultDeck) {\r\n    // for each \"main\", \"side\" and \"extra\" keys, check if they are empty arrays.\r\n    // for \"name\" key, check that it does not equal the default deck's name.\r\n    // If any of those checks is false, then the deck does not match the starting one\r\n    return Object.keys(deck).every((key) => {\r\n      if (key === \"name\") {\r\n        if (deck[key] !== defaultDeck[key]) return false\r\n      } else if (!!deck[key].length) {\r\n        return false\r\n      }\r\n      return true\r\n    })\r\n  }\r\n  isValidCardObjectToDisplayDetails(cardObj) {\r\n    // compare the card object to check if it has the least amount of keys to be\r\n    // considered a valid object to render CardSearch component\r\n    return uiConfigs.deckBuilderConfigs.validCardObjectProps.every((k) =>\r\n      cardObj.hasOwnProperty(k)\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * (LEGACY)\r\n * Class to validate regular expressions\r\n */\r\nexport class RegexValidator {\r\n  constructor(...args) {\r\n    this._args = args\r\n  }\r\n  // checks for valid card code formats.\r\n  isValidCardCode() {\r\n    const value = this._args[0].toLowerCase()\r\n    return /^[a-z]{3,4}-([a-z]{2})?\\d{3}$/.test(value)\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport AnimatedNumber from \"animated-number-react\"\r\nimport MiniCircle from \"../components/UI/MiniCircle/MiniCircle\"\r\nimport { InputValidator } from \"./validators\"\r\nimport { getStartingDeckSkeleton } from \"./yugiohSpecificFunctions\"\r\nimport uiConfigs from \"./ui.configs.json\"\r\n\r\n/**\r\n * Takes a number of dice to be rolled, rolls them and returns an array\r\n * with the results.\r\n * @param {number} numDice How many dice are to be rolled\r\n * @param {number} minNum The min possible roll\r\n * @param {number} maxNum The max possible roll\r\n */\r\nexport function roll(numDice, minNum = 1, maxNum = 6) {\r\n  return [...Array(numDice)].map(() =>\r\n    Math.floor(Math.random() * (maxNum - minNum + 1) + minNum)\r\n  )\r\n}\r\n\r\n/**\r\n * Creates and returns a new array without the element at the given index.\r\n * @param {Array} arr The array to remove the element from\r\n * @param {number} index The index position of the element to remove\r\n * @param {any} element (optional), the element to inset at the given index\r\n */\r\nexport function getSlicedArray(arr, index, element) {\r\n  return element\r\n    ? [...arr.slice(0, index), element, ...arr.slice(index + 1)]\r\n    : [...arr.slice(0, index), ...arr.slice(index + 1)]\r\n}\r\n\r\n/**\r\n * Given a string and an index, slices the string at that position and returns\r\n * it. If \"filler\" is defined, it appends it to the end of the returned string.\r\n * @param {string} str The string to slice\r\n * @param {number} index The index position of the element where the string is cut\r\n * @param {string} filler (optional), the string to appent to the returned string\r\n */\r\nexport function getSlicedString(str, index, filler) {\r\n  if (str.length <= index) return str\r\n  const slicedStr = str.slice(0, index)\r\n  return filler ? slicedStr + filler : slicedStr\r\n}\r\n\r\n/**\r\n * Randomly shuffles all array contents. WARNING! Modifies the array in place.\r\n * @param {Array} arr the array to shuffle.\r\n */\r\nexport function shuffleArray(arr) {\r\n  arr.sort(() => Math.random() - 0.5)\r\n}\r\n\r\n/**\r\n * Takes a string and returns it parsed as a number.\r\n * If the conversion resulted in NaN, it returns the string as it.\r\n * @param {string} string The string to try to parse to number\r\n */\r\nexport function tryParseInt(string) {\r\n  // 00 and 000 will be parsed as 0. We need both numbers, so these ones\r\n  // are special cases we have to escape\r\n  if (string === \"00\" || string === \"000\") return string\r\n  // try converting and return the number version, or the string upon failure\r\n  const conversion = Number.parseInt(string)\r\n  return isNaN(conversion) ? string : conversion\r\n}\r\n\r\n/**\r\n * Mocks empty function calls. Believe me, we use it.\r\n */\r\nexport function doNothing() {}\r\n\r\n/**\r\n * Returns a number fixed to the stated decimals.\r\n * @param {number} value the number apply toFixed() to\r\n * @param {number} decimalsToFixed toFixed() param. Decimals to fix the number at\r\n */\r\nexport function formatValue(value, decimalsToFixed) {\r\n  return value.toFixed(decimalsToFixed)\r\n}\r\n\r\n/**\r\n * Takes an input value and its max allowed length. If the input consists\r\n * of integers only and its length does not exceed the maximum, it returns\r\n * true. False otherwise.\r\n * @param {string} inputValue The input value\r\n * @param {number} maxLength The maximum length the value should have\r\n */\r\nexport function validateInputOnChange(inputValue, maxLength) {\r\n  const validator = new InputValidator(inputValue)\r\n  return (\r\n    validator.stringOnlyHasIntegers() &&\r\n    !validator.lengthIsHigherThan(maxLength)\r\n  )\r\n}\r\n\r\n/**\r\n * Takes an input value and a filler character. Considering the minimum length\r\n * the input should reach, if the input value is shorter, it adds fillerChar\r\n * to the front of the value until minLength is reached.\r\n * @param {string} inputValue The input value\r\n * @param {string} fillerChar The character to place at front\r\n * @param {number} minLength The minimum length allowed for that input\r\n */\r\nexport function fillFrontOfInput(inputValue, fillerChar, minLength) {\r\n  const validator = new InputValidator(inputValue)\r\n  // is the input value's length shorter than the minimum?\r\n  if (validator.lengthIsLowerThan(minLength)) {\r\n    // fill it up front with fillerChar values and return the result\r\n    let valueWithFiller = \"\"\r\n    for (let i = 0; i < minLength - inputValue.length; i++) {\r\n      valueWithFiller += fillerChar\r\n    }\r\n    valueWithFiller += inputValue\r\n    return valueWithFiller\r\n  }\r\n  // the input is already long enough. Return it as is\r\n  return inputValue\r\n}\r\n\r\n/**\r\n * Checks the playerTag for an instance of an invalid unicode character.\r\n * If it finds any, it returns a warning text to display in the toast, which\r\n * serves as an UI/UX indicator. Otherwise, returns null to proceed as normal.\r\n * @param {string} playerTag currentPlayer's tag that changed\r\n */\r\nexport function getPlayerNameWarning(playerTag) {\r\n  const warningText = new InputValidator(playerTag)\r\n    .getInvalidUnicodeArray()\r\n    .join(\"\")\r\n  if (warningText === playerTag) {\r\n    document.title = uiConfigs.togglers.secondaryScreens.calculator.toUpperCase()\r\n    return \"One dedicated to you, Marce. Cheers!\"\r\n  }\r\n  return null\r\n}\r\n\r\n/**\r\n * Transforms a Date object into a valid string to display as an IRT log.\r\n * That would be \"mm/dd/yyyy - hh:mm:ss\"\r\n */\r\nexport function getIRLDateTimeString() {\r\n  try {\r\n    const irlTime = new Date()\r\n    return `${fillFrontOfInput(\r\n      (irlTime.getMonth() + 1).toString(),\r\n      \"0\",\r\n      2\r\n    )}/${fillFrontOfInput(\r\n      irlTime.getDate().toString(),\r\n      \"0\",\r\n      2\r\n    )}/${irlTime.getFullYear().toString()} - ${fillFrontOfInput(\r\n      irlTime.getHours().toString(),\r\n      \"0\",\r\n      2\r\n    )}:${fillFrontOfInput(\r\n      irlTime.getMinutes().toString(),\r\n      \"0\",\r\n      2\r\n    )}:${fillFrontOfInput(irlTime.getSeconds().toString(), \"0\", 2)}`\r\n  } catch (err) {\r\n    return \"Date not available\"\r\n  }\r\n}\r\n\r\n/**\r\n * Gets a valid timer object as a parameter and returns a new one with a second substracted from it.\r\n * @param {object} timerObject The timer object. {hs: number, mins: number, secs: number}\r\n */\r\nexport function tick(timerObject) {\r\n  const newTimeObject = { hs: \"\", mins: \"\", secs: \"\" }\r\n  let timerArray = []\r\n  // create a string with the timer object in the form of hh:mm:ss\r\n  let timerString = `${timerObject.hs}:${timerObject.mins}:${timerObject.secs}`\r\n  // get a Date.getTime() number using that timer string, substract one second from it\r\n  // reconvert it to a Date time string and extract the hh:mm:ss part\r\n  timerString = new Date(\r\n    new Date(\"1970-01-01T\" + timerString + \"Z\").getTime() - 1000\r\n  )\r\n    .toISOString()\r\n    .substr(11, 8)\r\n  // split it into an array\r\n  timerArray = timerString.split(\":\")\r\n  // fill the new time object with its values\r\n  newTimeObject.hs = timerArray[0]\r\n  newTimeObject.mins = timerArray[1]\r\n  newTimeObject.secs = timerArray[2]\r\n  // and return it\r\n  return newTimeObject\r\n}\r\n\r\n/**\r\n * Gets the current player's lifepoints object and checks if any of those\r\n * are in uiConfigs' set range to restart the duel.\r\n * If they are, it returns true. Or else, false.\r\n * @param {object} lpState The player's life points object {p1: number, p2: number}\r\n * @param {number} tempLP The current operation lifepoints\r\n */\r\nexport function isValidRestartCondition(lpState) {\r\n  return !(\r\n    lpState.tempLP === String(uiConfigs.apiConfigs.limit) &&\r\n    lpState.p1 / 2 === lpState.p2 - lpState.p1\r\n  )\r\n}\r\n\r\n/**\r\n * Gets valid current time and initial time objects used for the timer and returns\r\n * all necessary values needed to render ProgressBar component.\r\n * @param {object} currentTime current time object. {hs: <number>, mins: <number>, secs: <number>}\r\n * @param {object} initialTime initial time object. {hs: <number>, mins: <number>, secs: <number>}\r\n */\r\nexport function getTimerProgressBarValue(currentTime, initialTime) {\r\n  // convert both objects to hh:mm:ss string and initialize progressValue variable\r\n  let currentTimeValue = `${currentTime.hs}:${currentTime.mins}:${currentTime.secs}`\r\n  let initialTimeValue = `${initialTime.hs}:${initialTime.mins}:${initialTime.secs}`\r\n  let progressValue = 0\r\n  // get a Time (number) object for both values and substract them.\r\n  // Assign the result to progressValue\r\n  currentTimeValue = new Date(\"1970-01-01T\" + currentTimeValue + \"Z\").getTime()\r\n  initialTimeValue = new Date(\"1970-01-01T\" + initialTimeValue + \"Z\").getTime()\r\n  progressValue = initialTimeValue - currentTimeValue\r\n\r\n  return [\r\n    progressValue, // <number> : the substracted time (current progress) in ms\r\n    currentTimeValue, // <number> : the elapsed time in ms\r\n    initialTimeValue, // <number> : the initial time in ms\r\n    currentTime, // <object> : current Time object as is\r\n    initialTime // <object> : initial time object as is\r\n  ]\r\n}\r\n\r\n/**\r\n * Gets a string and a character where we want to splice it. It returns an\r\n * array consisting of splitted strings, where \"char\" is placed as the last\r\n * character of each resulting string division but the last one.\r\n * E.g.: \"Alicia, thanks for everything, love you!\" where \"char\" is ',' will\r\n * return [\"Alicia,\", \"thanks for everything,\", \"love you!\"]\r\n * Basically, slice for strings passing a character instead of an index, and\r\n * applied to each instance of that character in the string.\r\n * @param {string} str The string to split\r\n * @param {string} char The character to split the string at\r\n */\r\nexport function divideStrByCharWithoutRemovingChar(str, char) {\r\n  // if not chars were passed, return the string as is\r\n  // if (char) return str\r\n  // split the string\r\n  const bruteFragments = str.split(char)\r\n  const pureFragments = []\r\n  // append each separation to pureFragments. All string pieces but the last\r\n  // one will contain the character formerly used to split.\r\n  for (let i = 0; i < bruteFragments.length; i++) {\r\n    if (i === bruteFragments.length - 1) {\r\n      pureFragments.push(bruteFragments[i])\r\n    } else {\r\n      pureFragments.push(bruteFragments[i] + char)\r\n    }\r\n  }\r\n  // return the composed array\r\n  return pureFragments\r\n}\r\n\r\n/**\r\n * A great if-chain to create the string to display as life points log when\r\n * life points are increased or decreased\r\n * @param {string} currentPlayer \"p1\" or \"p2\"\r\n * @param {string} condition \"+\" or \"-\"\r\n * @param {object} lpState LPReducer state. {p1: <number>, p2: <number>, tempLP: <string>}\r\n * @param {object} lpLimits Max and min in-game LP limits. {min: <number>, max: <number>}\r\n * @param {object} playerNames Player names object from PlayerContext {p1: <string>, p2: <string>}\r\n * @param {string} fixedButtonLPValue Strings of fixed buttons (-100, -500, -1000, 1/2)\r\n */\r\nexport function getLogDisplayText(\r\n  currentPlayer,\r\n  condition,\r\n  lpState,\r\n  lpLimits,\r\n  playerNames,\r\n  fixedButtonLPValue\r\n) {\r\n  // get the player name whose lifepoints were affected\r\n  const player = playerNames[currentPlayer]\r\n  // get the correct value of tempLP. If can be a integer string, or \"1/2\"\r\n  const operationLP = fixedButtonLPValue ?? lpState.tempLP\r\n  // get the integer to be added or substracted\r\n  const deltaLP =\r\n    operationLP === \"1/2\"\r\n      ? Number.parseInt(-lpState[currentPlayer] / 2) // <int> = 1/2 player's current LP\r\n      : condition === \"-\"\r\n      ? -+operationLP // - <int> = lpState.tempLP or fixed button's value\r\n      : +operationLP // + <int> = lpState.tempLP or fixed button's value\r\n  // modifier to show at log string\r\n  const modifier = condition === \"+\" ? \"+\" : \"\"\r\n  // add or substract lp to show at log string\r\n  let p2LP = currentPlayer === \"p2\" ? lpState.p2 + deltaLP : lpState.p2\r\n  let p1LP = currentPlayer === \"p1\" ? lpState.p1 + deltaLP : lpState.p1\r\n  // prevent any LP limits to be surpassed\r\n  if (p1LP < lpLimits.min) p1LP = lpLimits.min\r\n  if (p1LP > lpLimits.max) p1LP = lpLimits.max\r\n  if (p2LP < lpLimits.min) p2LP = lpLimits.min\r\n  if (p2LP > lpLimits.max) p2LP = lpLimits.max\r\n  // finally, create the log string and return it\r\n  return `[ ${p1LP} : ${p2LP} ]  ${player} ${modifier}${deltaLP} LP `\r\n}\r\n\r\n/**\r\n * Given player's saved decks Local Storage passed as a JS object, it transforms it to\r\n * an array, reconverts all hard coded \"deck_<number>\" keys to an ascending continuous\r\n * sequence of integers, and puts the object together again before returning it.\r\n * E.g.: A LS object with keys \"deck_1\", \"deck_3\", \"deck_4\" will assign \"deck_3\" as\r\n * the new \"deck_2\", and \"deck_4\" as \"deck_3\". Then, this new object is returned\r\n * @param {Object} LSObject RNMC-YCM-decks local storage JS object (converted from JSON to JS)\r\n */\r\nexport function sortLocalStorageAfterDeletingDeck(LSObject) {\r\n  let sortedKeyValObject = {}\r\n\r\n  sortedKeyValObject = Object.entries(\r\n    LSObject[uiConfigs.localStorageDecksObjectKeys.decks]\r\n  ).reduce((acc, keyValPair, i) => {\r\n    const deckString = keyValPair[0].slice(0, 5)\r\n    return deckString === \"deck_\"\r\n      ? { ...acc, [deckString + (i + 1)]: keyValPair[1] }\r\n      : acc\r\n  }, {})\r\n\r\n  if (!LSObject.deck_1) sortedKeyValObject.deck_1 = getStartingDeckSkeleton()\r\n\r\n  return { [uiConfigs.localStorageDecksObjectKeys.decks]: sortedKeyValObject }\r\n}\r\n\r\nfunction valueToFixedZero(value) {\r\n  return value.toFixed(0)\r\n}\r\n\r\n/**\r\n * Takes an array of arrays where each entry is a section type \"xyz\", \"synchro\", \"monster\",\r\n * \"draw_5\", \"shuffle\", plus the quantity of cards required. So, each entry is [\"xyz\", 5],\r\n * [\"shuffle\": 40], and maps them to return the text and extra styles needed two compute\r\n * DeckConstructorSidebar's inner components.\r\n * @param {Array} qtyArr Array of arrays containing all currEntries below\r\n * @param {Array} currEntry Array shape [<type string>, <card quantity by type>], like [\"xyz\", 1], or [\"draw\", 5]\r\n * @param {number} cardTotal Total amount of cards in qtyArray. Sum of all currEntry[1]\r\n * @param {boolean} isTestComponent \"main\", \"side\" and \"extra\" sections hold false, as \"test\" is true\r\n * @param {boolean} isMediaQueryPortrait Boolean to indicate we are in portrait view or not.\r\n */\r\nexport function getSVGImageTextAndExtraStyles(\r\n  qtyArr,\r\n  currEntry,\r\n  cardTotal,\r\n  isTestComponent,\r\n  isMediaQueryPortrait\r\n) {\r\n  const text = isTestComponent // for \"test\" sidebar\r\n    ? currEntry[0].includes(\"draw\") // for \"Draw 1\" and \"Draw 5\" SVG components\r\n      ? [\r\n          `Draw ${[currEntry[1].amount]}`,\r\n          `${cardTotal}>${\r\n            // create \"Draw <1|5>-<totalCards in fallback> > <totalCards in fallback - 1|5>\"\r\n            cardTotal - currEntry[1].amount > 0 // E.g.: \"Draw 5-10>5\", \"Draw 1-40>39\", \"Draw 5-3>0\"\r\n              ? cardTotal - currEntry[1].amount // hyphen will be use to split the string\r\n              : 0\r\n          }`\r\n        ]\r\n      : // \"shuffle\" and \"reset\" options, on portrait resolution, should display the first\r\n      // divided text as an empty space. This pushes the second down, aligning it better\r\n      // for UI-UX purposes. On landscape, it's the other way round.\r\n      isMediaQueryPortrait\r\n      ? [\"\", currEntry[0][0].toUpperCase() + currEntry[0].slice(1)] // for \"shuffle\" and \"reset\", just return the capitalized string\r\n      : [currEntry[0][0].toUpperCase() + currEntry[0].slice(1), \"\"]\r\n    : // for \"main\", \"side\", \"extra\" sidebars, pass the amount and the percentage\r\n      // over the total amount of cards in the section. Both in an array\r\n      [\r\n        currEntry[1], // amount of cards per type\r\n        <AnimatedNumber // percentage of cards per type\r\n          value={Math.round((currEntry[1] / cardTotal) * 100)}\r\n          duration={250}\r\n          formatValue={valueToFixedZero}\r\n        />\r\n      ]\r\n  const extraStyles = isMediaQueryPortrait\r\n    ? // given the case we are in portrait view, then apply no styles. Everything\r\n      // should have the same geometry\r\n      { containerStyle: null, textStyle: null }\r\n    : // from here on, we are in landscape mode. Styles will be dynamically modified\r\n    qtyArr.length > 3 // if there are more than 3 SVG images in any sidebar\r\n    ? {\r\n        containerStyle: {\r\n          // divide width accordingly, and adjust a bit higher for \"test\" sidebar, as texts are larger\r\n          width: `${(100 / qtyArr.length) * (isTestComponent ? 5 : 6)}%`\r\n        },\r\n        textStyle:\r\n          qtyArr.length > 4 // for the text inside the SVG, if there are more than 4 svg images in the sidebar\r\n            ? {\r\n                fontSize: `${1.8 - 0.015 * qtyArr.length}vw`, // shrink it depending on the length\r\n                top: \"13%\", // adjust the text lower so it does not interfere with the SVG image\r\n                letterSpacing: `${0.14 - 0.02 * qtyArr.length}vw` // adjust letter spacing\r\n              }\r\n            : null // do nothing for sidebars with less than 4 components\r\n      }\r\n    : null // do nothing for sidebars with less than 3 components\r\n  // return both text and styles in an array for the component to use\r\n  return [text, extraStyles]\r\n}\r\n","import { useEffect, useContext, useReducer } from \"react\"\r\nimport { v4 as uuid } from \"uuid\"\r\nimport { LogContext } from \"../contexts/LogContext\"\r\nimport logReducer from \"../store/Log/logReducer\"\r\nimport { getIRLDateTimeString } from \"../utils/utilityFunctions\"\r\n\r\nexport default function useLogReducer(key, nestedKey = null, initialState) {\r\n  // pull local storage update function from LogContext\r\n  const { updateLSandGetLSasJSObj } = useContext(LogContext)\r\n  // get a reducer state and action dispatcher using logReducer and the\r\n  // assigned initial state\r\n  const [log, logDispatch] = useReducer(logReducer, initialState)\r\n  // decompose the state into their variables\r\n  const { logState, logType, logText, logIgTimer, logPing } = log\r\n\r\n  useEffect(() => {\r\n    // do nothing if we have no logState (we are not supposed to log the action),\r\n    // or an invalid log type.\r\n    if (!logState || !logType) return\r\n    // proceed to update LocalStorage\r\n    updateLSandGetLSasJSObj({\r\n      key,\r\n      nestedKey,\r\n      value: {\r\n        type: logType,\r\n        text: logText,\r\n        timer: logIgTimer,\r\n        irlTime: getIRLDateTimeString(),\r\n        id: uuid() // values need to be different from each other. Use unique ids\r\n      },\r\n      // if max log length is reached, the first item will be removed to make space\r\n      // for the new log item to be stored\r\n      unshiftFirstItem: true\r\n    })\r\n  }, [\r\n    logState,\r\n    logType,\r\n    logText,\r\n    updateLSandGetLSasJSObj,\r\n    key,\r\n    nestedKey,\r\n    logIgTimer,\r\n    logPing // on each log state change, ping on state will trigger this useEffect\r\n  ])\r\n\r\n  return [log, logDispatch]\r\n}\r\n","import { v4 as uuidv4 } from \"uuid\"\r\nimport * as coinDieTokenActionTypes from \"./coinDieTokenActionTypes\"\r\nimport { getNextTokenImgAndAlt } from \"../../utils/yugiohSpecificFunctions\"\r\nimport spellIcon from \"../../assets/tokenIcons/spell.svg\"\r\n\r\nexport default function coinDieTokenReducer(state, action) {\r\n  switch (action.type) {\r\n    case coinDieTokenActionTypes.MODIFY_ARRAY:\r\n      const { id, res, alt, img } = action.payload\r\n      // if img is defined, we are dealing with a token. Else if alt is defined,\r\n      // we are getting a coin. Otherwise, a dice.\r\n      const payload = img\r\n        ? { id, res, alt, img }\r\n        : alt\r\n        ? { id, res, alt }\r\n        : { id, res }\r\n      return {\r\n        ...state,\r\n        items: state.items.map((item) => (item.id === id ? payload : item))\r\n      }\r\n\r\n    case coinDieTokenActionTypes.REMOVE_ITEM:\r\n      const items = state.items\r\n      // do nothing if there is nothing to remove.\r\n      if (items.length < 1) return state\r\n      // given the case we are removing a token item with \"Remove selected\"\r\n      // <Button />, we will get true as payload. Otherwise, payload will\r\n      // be undefined, so we default to the last item in the list\r\n      const indexToRemove = action.payload?.removeSelected\r\n        ? items.findIndex((item) => item.isActive)\r\n        : items.length - 1\r\n      // if we are attempting to remove an active token item (given that there\r\n      // are more than 1 item left to remove)\r\n      if (items.length > 1 && items[indexToRemove].isActive) {\r\n        // in the event that we are removing the first item in the array, we\r\n        // set the second item as the next active candidate. If we are removing\r\n        // any item but the first one, then set the previous one as candidate.\r\n        const itemBeforeOrAfterTheOneRemoved = indexToRemove\r\n          ? { ...items[indexToRemove - 1] }\r\n          : { ...items[indexToRemove + 1] }\r\n        // change its active status to true\r\n        itemBeforeOrAfterTheOneRemoved.isActive = true\r\n        // slice items array accodingly and insert the new active candidate into it.\r\n        return {\r\n          ...state,\r\n          items: [\r\n            ...items.slice(0, indexToRemove ? indexToRemove - 1 : 0),\r\n            itemBeforeOrAfterTheOneRemoved,\r\n            ...items.slice(\r\n              indexToRemove ? indexToRemove + 1 : indexToRemove + 2\r\n            )\r\n          ]\r\n        }\r\n      }\r\n      // isActive check above applies only to token array items, so for coin\r\n      //and dice, just remove the items at the last index and set state\r\n      return {\r\n        ...state,\r\n        items: items.slice(0, -1)\r\n      }\r\n\r\n    case coinDieTokenActionTypes.ADD_ITEM:\r\n      // do nothing is 6 tokens/dice/coins are in items array already.\r\n      if (state.items.length >= 6) return state\r\n      // tokens need all previous ones to be set to inactive to enable\r\n      // the next one in list to be the active one. Once set, then concat\r\n      // the new item and set state with it. As a bonus, use the same img\r\n      // and alt as the previous one in the array.\r\n      if (action.payload.type === \"token\") {\r\n        const items = state.items\r\n        // set all tokens to inactive\r\n        const prevState = items.map((item) => {\r\n          return { ...item, isActive: false }\r\n        })\r\n        // get the img and alt for the new token. Default one if array is empty.\r\n        const imgAndAlt = items.length\r\n          ? {\r\n              img: items[items.length - 1].img,\r\n              alt: items[items.length - 1].alt\r\n            }\r\n          : { img: spellIcon, alt: \"Token type 1\" }\r\n        // set state with all tokens set as inactive, plus the new active one\r\n        return {\r\n          ...state,\r\n          items: [\r\n            ...prevState,\r\n            {\r\n              id: uuidv4(),\r\n              counter: 1,\r\n              img: imgAndAlt.img,\r\n              alt: imgAndAlt.alt,\r\n              isActive: true\r\n            }\r\n          ]\r\n        }\r\n      }\r\n      // coins and dice are more straightforward. Since they do not require\r\n      // the previous state to be modified, just concat the new item\r\n      return {\r\n        ...state,\r\n        items:\r\n          action.payload.type === \"coin\"\r\n            ? [...state.items, { id: uuidv4(), res: \"\", alt: \"\" }]\r\n            : [...state.items, { id: uuidv4(), res: [] }]\r\n      }\r\n\r\n    case coinDieTokenActionTypes.SET_ACTIVE_TOKEN:\r\n      // if the target token is already active, do nothing\r\n      if (\r\n        state.items[state.items.findIndex((item) => item.id === action.payload)]\r\n          .isActive\r\n      ) {\r\n        return state\r\n      }\r\n      // set the target item as active and all others to inactive\r\n      return {\r\n        ...state,\r\n        items: state.items.map((item) => {\r\n          return { ...item, isActive: item.id === action.payload }\r\n        })\r\n      }\r\n\r\n    case coinDieTokenActionTypes.MODIFY_TOKEN_COUNTER:\r\n      const { itemId, operation } = action.payload\r\n      // get the index separatedly if we need it to splice items array\r\n      const targetItemIndex = state.items.findIndex(\r\n        (item) => item.id === itemId\r\n      )\r\n      // and get the item itself to work with\r\n      const targetItem = state.items[targetItemIndex]\r\n      // CASE 1: while trying to add to a counter at 99 or trying to decrese\r\n      // the counter while unmounting, do nothing\r\n      if (!targetItem || (operation === \"inc\" && targetItem.counter >= 99)) {\r\n        return state\r\n      }\r\n      // CASE 2: substracting beyond 0 removes the item from the list\r\n      else if (operation === \"dec\" && targetItem.counter <= 0) {\r\n        let newItems = [...state.items]\r\n        // remember if the item to be removed was active\r\n        const itemWasActive = newItems[targetItemIndex].isActive\r\n        // remove the item\r\n        newItems.splice(targetItemIndex, 1)\r\n        // if the removed item was the last one in the list and was active,\r\n        // we need to set the new last item as active. For that, we calculate\r\n        // the new index and re-set the array with new active conditions\r\n        if (newItems.length && itemWasActive) {\r\n          const newSelectedIndex =\r\n            targetItemIndex >= newItems.length\r\n              ? newItems.length - 1\r\n              : targetItemIndex\r\n          newItems = newItems.map((item, i) => {\r\n            return { ...item, isActive: i === newSelectedIndex }\r\n          })\r\n        }\r\n        // finally, set state with the modified array\r\n        return {\r\n          ...state,\r\n          items: newItems\r\n        }\r\n      }\r\n      // CASE 3: set the item as active and modify the counter accordingly.\r\n      // All other items are set to inactive.\r\n      return {\r\n        ...state,\r\n        items: state.items.map((item) => {\r\n          return item.id === targetItem.id\r\n            ? {\r\n                ...item,\r\n                isActive: true,\r\n                counter:\r\n                  operation === \"inc\" ? item.counter + 1 : item.counter - 1\r\n              }\r\n            : { ...item, isActive: false }\r\n        })\r\n      }\r\n\r\n    case coinDieTokenActionTypes.SWITCH_TOKEN_TYPE:\r\n      // find the index of the current token in items array\r\n      const itemTarget =\r\n        state.items[\r\n          state.items.findIndex((item) => item.id === action.payload.itemId)\r\n        ]\r\n      // get the new img and alt for it\r\n      const imgAndAlt = getNextTokenImgAndAlt(\r\n        itemTarget.img,\r\n        action.payload.moveForwards\r\n      )\r\n      // set all tokens in the array as inactive except the one we switched\r\n      // img and alt. Of course, set the new img and alt to it too\r\n      return {\r\n        ...state,\r\n        items: state.items.map((item) => {\r\n          return item.id === action.payload.itemId\r\n            ? {\r\n                ...item,\r\n                img: imgAndAlt.img,\r\n                alt: imgAndAlt.alt,\r\n                isActive: true\r\n              }\r\n            : { ...item, isActive: false }\r\n        })\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","export const REMOVE_ITEM = \"REMOVE_ITEM\"\r\nexport const ADD_ITEM = \"ADD_ITEM\"\r\nexport const MODIFY_ARRAY = \"MODIFY_ARRAY\"\r\nexport const SET_ACTIVE_TOKEN = \"SET_ACTIVE_TOKEN\"\r\nexport const MODIFY_TOKEN_COUNTER = \"MODIFY_TOKEN_COUNTER\"\r\nexport const SWITCH_TOKEN_TYPE = \"SWITCH_TOKEN_TYPE\"\r\n","import React, { createContext, useReducer } from \"react\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport useLogReducer from \"../hooks/useLogReducer\"\r\nimport coinDieTokenReducer from \"../store/CoinDieToken/coinDieTokenReducer\"\r\nimport uiConfigs from \"../utils/ui.configs.json\"\r\nimport spellIcon from \"../assets/tokenIcons/spell.svg\"\r\n\r\nexport const CoinDieTokenContext = createContext({\r\n  coinReducer: [],\r\n  diceReducer: [],\r\n  tokenReducer: [],\r\n  coinLogReducer: [],\r\n  diceLogReducer: []\r\n})\r\n\r\nexport function CoinDieTokenContextProvider({ children }) {\r\n  // initialize an instance of the reducer for coin objects\r\n  const coinReducer = useReducer(coinDieTokenReducer, {\r\n    items: [{ id: uuidv4(), res: \"\", alt: \"\" }]\r\n  })\r\n  // a different one for die objects\r\n  const diceReducer = useReducer(coinDieTokenReducer, {\r\n    items: [{ id: uuidv4(), res: [] }]\r\n  })\r\n  // and a last one for token objects\r\n  const tokenReducer = useReducer(coinDieTokenReducer, {\r\n    items: [\r\n      {\r\n        id: uuidv4(),\r\n        counter: 1,\r\n        alt: \"Token type 1\",\r\n        img: spellIcon,\r\n        isActive: true\r\n      }\r\n    ]\r\n  })\r\n  // same with log reducers. We need one for coin and one for dice, as\r\n  // they track different states (we can log them independently. One can\r\n  // be on and the other off, no problems)\r\n  const coinLogReducer = useLogReducer(\r\n    uiConfigs.localStorageLogsObjectKeys.logHistory,\r\n    null,\r\n    {\r\n      logState: false,\r\n      logType: \"\",\r\n      logText: \"\",\r\n      logIgTimer: \"\",\r\n      logPing: false\r\n    }\r\n  )\r\n\r\n  const diceLogReducer = useLogReducer(\r\n    uiConfigs.localStorageLogsObjectKeys.logHistory,\r\n    null,\r\n    {\r\n      logState: false,\r\n      logType: \"\",\r\n      logText: \"\",\r\n      logIgTimer: \"\",\r\n      logPing: false\r\n    }\r\n  )\r\n  // unite all values to be provided by this context into an object\r\n  const passedContext = {\r\n    coinReducer,\r\n    diceReducer,\r\n    tokenReducer,\r\n    coinLogReducer,\r\n    diceLogReducer\r\n  }\r\n\r\n  return (\r\n    <CoinDieTokenContext.Provider value={passedContext}>\r\n      {children}\r\n    </CoinDieTokenContext.Provider>\r\n  )\r\n}\r\n","import React, { createContext, useEffect, useState } from \"react\"\r\nimport uiConfigs from \"../utils/ui.configs.json\"\r\n\r\nexport const MediaQuery = createContext({\r\n  mq: {}\r\n})\r\n\r\n// media queries are set on the word \"go\". They do not change, so we might as\r\n// well load save them in an object outside the provider when the app is compiled\r\nconst mediaQueriesObjectState = {}\r\n\r\nfor (let key in uiConfigs.mediaQueries) {\r\n  mediaQueriesObjectState[key] = false\r\n}\r\n\r\nexport function MediaQueryProvider({ children }) {\r\n  // state and setter to handle the current media query state\r\n  const [mq, setMq] = useState(mediaQueriesObjectState)\r\n\r\n  useEffect(() => {\r\n    // on app's mount, update the current media query state and  add the event\r\n    // listener for \"resize\". Many components change their behavior according\r\n    // to device orientation and size\r\n    watchMediaQueryChange()\r\n    window.addEventListener(\"resize\", watchMediaQueryChange)\r\n    return () => window.removeEventListener(\"resize\", watchMediaQueryChange)\r\n  }, [])\r\n\r\n  function watchMediaQueryChange() {\r\n    // This function is triggered each time the device changes its media query.\r\n    // For each media query key in \"mq\" object, check if they match the current\r\n    // device orientation/size, and update their booleans accordingly.\r\n    const mqCopy = { ...mq }\r\n    for (let query in mqCopy) {\r\n      mqCopy[query] = window.matchMedia(uiConfigs.mediaQueries[query]).matches\r\n    }\r\n    setMq(mqCopy)\r\n  }\r\n\r\n  // unite all values to be provided by this context into an object\r\n  const passedContext = { mq }\r\n\r\n  return (\r\n    <MediaQuery.Provider value={passedContext}>{children}</MediaQuery.Provider>\r\n  )\r\n}\r\n","import React, { createContext } from \"react\"\r\nimport useLocalStorage from \"../hooks/useLocalStorage\"\r\nimport uiConfigs from \"../utils/ui.configs.json\"\r\n\r\nexport const LocalStorageContext = createContext({\r\n  logHistory: [],\r\n  currentLP: {},\r\n  playerConfigs: {},\r\n  initialLPLog: {},\r\n  getLSasJSObject: () => {},\r\n  updateLSandGetLSasJSObj: () => {},\r\n  deleteAndGetLSObject: () => {}\r\n})\r\n\r\nexport function LocalStorageContextProvider({ children }) {\r\n  // initialize a local storage handler hook for \"Configs\". It will manage\r\n  // currently active life points, dice ranges, life points limits and\r\n  // player names across components and app reloads\r\n  const {\r\n    getLSasJSObject,\r\n    updateLSandGetLSasJSObj,\r\n    deleteAndGetLSObject\r\n  } = useLocalStorage(\r\n    uiConfigs.localStorageConfigsKeyName,\r\n    uiConfigs.initialConfigsLocalStorage\r\n  )\r\n  // grab last-loaded in-calculator lifepoints and player names, life points\r\n  // limits, player names and dice ranges (if any) from local storage\r\n  const { currentLP, playerConfigs } = getLSasJSObject()\r\n  // unite all values to be provided by this context into an object\r\n  const passedContext = {\r\n    currentLP,\r\n    playerConfigs,\r\n    initialLPLog: uiConfigs.initialLPLog,\r\n    getLSasJSObject,\r\n    updateLSandGetLSasJSObj,\r\n    deleteAndGetLSObject\r\n  }\r\n\r\n  return (\r\n    <LocalStorageContext.Provider value={passedContext}>\r\n      {children}\r\n    </LocalStorageContext.Provider>\r\n  )\r\n}\r\n","import * as logActionTypes from \"./logActionTypes\"\r\n\r\n// logObjectWithTypeTextTimerKeys: <object>\r\n// { type: <string>, text: <string>, timer: <string>, logPing: <boolean> }\r\nexport const log = (logObjectWithTypeTextTimerKeys) => ({\r\n  type: logActionTypes.LOG,\r\n  payload: logObjectWithTypeTextTimerKeys\r\n})\r\n\r\nexport const toggle = () => ({\r\n  type: logActionTypes.TOGGLE\r\n})\r\n","import * as coinDieTokenActionTypes from \"./coinDieTokenActionTypes\"\r\n\r\n// diceOrCoinItem: <object> object with {id, res, alt, img}\r\nexport const modifyArray = (diceOrCoinItem) => ({\r\n  type: coinDieTokenActionTypes.MODIFY_ARRAY,\r\n  payload: diceOrCoinItem\r\n})\r\n\r\n// typeOfItemAsAString: <string> \"coin\", \"dice\", \"token\"\r\nexport const addItem = (typeOfItemAsAString) => ({\r\n  type: coinDieTokenActionTypes.ADD_ITEM,\r\n  payload: typeOfItemAsAString\r\n})\r\n\r\n// removeSelectedBoolean: <boolean> for tokens only, if true then the active\r\n// token will be removed. False will remove the last item of the array\r\nexport const removeItem = (removeSelectedBoolean) => ({\r\n  type: coinDieTokenActionTypes.REMOVE_ITEM,\r\n  payload: { removeSelected: removeSelectedBoolean }\r\n})\r\n\r\n// id: <string> a uuidv4-generated id for tokens\r\nexport const setActiveToken = (id) => ({\r\n  type: coinDieTokenActionTypes.SET_ACTIVE_TOKEN,\r\n  payload: id\r\n})\r\n\r\n// itemId: <string> a uuidv4-generated id for tokens\r\n// incOrDecString: <string> \"inc\" or \"dec\"\r\nexport const modifyTokenCounter = (itemId, incOrDecString) => ({\r\n  type: coinDieTokenActionTypes.MODIFY_TOKEN_COUNTER,\r\n  payload: { itemId, operation: incOrDecString }\r\n})\r\n\r\n// itemId: <string> a uuidv4-generated id for tokens\r\n// moveForwardsBoolean: <boolean> true will move to the next image in the\r\n// array of token images to use. false moves backwards\r\nexport const switchTokenType = (itemId, moveForwardsBoolean) => ({\r\n  type: coinDieTokenActionTypes.SWITCH_TOKEN_TYPE,\r\n  payload: { itemId, moveForwards: !!moveForwardsBoolean }\r\n})\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styles from \"./CoinDieTokenBottomScreen.module.css\"\r\n\r\nexport default function CoinDieTokenBottomScreen({ ariaLabel, children }) {\r\n  return (\r\n    <div className={styles.Container} aria-label={ariaLabel}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nCoinDieTokenBottomScreen.propTypes = {\r\n  ariaLabel: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styles from \"./CoinDieTokenTopScreen.module.css\"\r\n\r\nexport default function CoinDieTokenTopScreen({ ariaLabel, children }) {\r\n  return (\r\n    <div className={styles.Container} aria-label={ariaLabel}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nCoinDieTokenTopScreen.propTypes = {\r\n  ariaLabel: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired\r\n}\r\n","import React, {\r\n  useState,\r\n  createContext,\r\n  useContext,\r\n  useCallback,\r\n  useEffect,\r\n  useRef\r\n} from \"react\"\r\nimport { LocalStorageContext } from \"./LocalStorageContext\"\r\nimport usePlayerToggle from \"../hooks/usePlayerToggle\"\r\nimport uiConfigs from \"../utils/ui.configs.json\"\r\n\r\nexport const PlayerContext = createContext({\r\n  currentPlayer: \"\",\r\n  toggleCurrentPlayer: () => {},\r\n  playerNames: {},\r\n  setPlayerNames: () => {}\r\n})\r\n\r\nexport function PlayerContextProvider({ children }) {\r\n  const isMounting = useRef(true)\r\n  // grab local storage getter and updating functions for \"Configs\" key.\r\n  // We will work with playerConfigs.playerNames local storage entry\r\n  const { getLSasJSObject, updateLSandGetLSasJSObj } = useContext(\r\n    LocalStorageContext\r\n  )\r\n  // generate a player toggle hook to switch between \"p1\" and \"p2\" states\r\n  const [currentPlayer, toggleCurrentPlayer] = usePlayerToggle()\r\n  // state and setter to handle player keys and their assigned names as value.\r\n  // {\"p1\": <name>, \"p2\": <name>}. At app's mount, try fetching them from\r\n  // local storage. If they exist, set them as state. Otherwise, use the\r\n  // default values from uiConfigs\r\n  const [playerNames, setNames] = useState(() => {\r\n    const { playerConfigs } = getLSasJSObject()\r\n    return playerConfigs?.playerNames ?? uiConfigs.initialPlayerNames\r\n  })\r\n\r\n  const setPlayerNames = useCallback(\r\n    // setter function used by usePlayerNameTag hook. It gets an object with\r\n    // the current active player as key and their name as value, and\r\n    // updates the fragment of state concerning that specific player only\r\n    (playerNameObject) =>\r\n      setNames((playerNames) => ({ ...playerNames, ...playerNameObject })),\r\n    []\r\n  )\r\n\r\n  useEffect(() => {\r\n    // do nothing at mount since player names were already loaded from local\r\n    // storage by LocalStorageContextProvider.js, but after that, each time\r\n    // a player name in <LifePointsGauge /> changes, update the corresponding\r\n    // local storage key with that new value\r\n    if (isMounting.current) isMounting.current = false\r\n    else\r\n      updateLSandGetLSasJSObj({\r\n        key: uiConfigs.localStorageConfigsObjectKeys.playerConfigs,\r\n        nestedKey: \"playerNames\",\r\n        value: { [currentPlayer]: playerNames[currentPlayer] }\r\n      })\r\n  }, [playerNames])\r\n\r\n  // unite all values to be provided by this context into an object\r\n  const passedContext = {\r\n    currentPlayer,\r\n    toggleCurrentPlayer,\r\n    playerNames,\r\n    setPlayerNames\r\n  }\r\n\r\n  return (\r\n    <PlayerContext.Provider value={passedContext}>\r\n      {children}\r\n    </PlayerContext.Provider>\r\n  )\r\n}\r\n","import { useState, useCallback } from \"react\"\r\n\r\nexport default function usePlayerToggle() {\r\n  const [currentPlayer, setCurrentPlayer] = useState(\"p1\")\r\n\r\n  const toggleCurrentPlayer = useCallback(\r\n    // toggle between \"p1\" and \"p2\" string values\r\n    () =>\r\n      setCurrentPlayer((currentPlayer) =>\r\n        currentPlayer === \"p1\" ? \"p2\" : \"p1\"\r\n      ),\r\n    []\r\n  )\r\n\r\n  return [currentPlayer, toggleCurrentPlayer]\r\n}\r\n","export const TOGGLE_TIMER_FROZEN = \"TOGGLE_TIMER_FROZEN\"\r\nexport const TOGGLE_TIMER_RUNNING = \"TOGGLE_TIMER_RUNNING\"\r\nexport const START_TIMER = \"START_TIMER\"\r\nexport const STOP_TIMER = \"STOP_TIMER\"\r\nexport const SET_TIME = \"SET_TIME\"\r\nexport const CHANGE_TIMER_INPUT = \"CHANGE_TIMER_INPUT\"\r\n","import { validateInputOnChange } from \"../../utils/utilityFunctions\"\r\nimport * as actionTypes from \"./timerActionTypes\"\r\nimport uiConfigs from \"../../utils/ui.configs.json\"\r\n\r\nconst initialState = {\r\n  timerObject: {\r\n    hs: uiConfigs.initialTimer.hs,\r\n    mins: uiConfigs.initialTimer.mins,\r\n    secs: uiConfigs.initialTimer.secs\r\n  },\r\n  previousInitialTime: {\r\n    hs: uiConfigs.initialTimer.hs,\r\n    mins: uiConfigs.initialTimer.mins,\r\n    secs: uiConfigs.initialTimer.secs\r\n  },\r\n  isTimerFrozen: false,\r\n  isTimerRunning: false\r\n}\r\n\r\nexport default function timerReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actionTypes.TOGGLE_TIMER_FROZEN:\r\n      // isTimerFrozen determines if the timer is Paused (stopped or not)\r\n      return {\r\n        ...state,\r\n        isTimerFrozen: !state.isTimerFrozen\r\n      }\r\n\r\n    case actionTypes.TOGGLE_TIMER_RUNNING:\r\n      // isTimerRunning specifies that the timer has started, even if it is\r\n      // currently paused.\r\n      // If it is not running, we start it up using the previous configured\r\n      // time as its starting point.\r\n      if (state.isTimerRunning)\r\n        return {\r\n          ...state,\r\n          timerObject: {\r\n            ...state.previousInitialTime\r\n          },\r\n          isTimerRunning: !state.isTimerRunning\r\n        }\r\n      // if it was running, it means we paused it. Just flip isTimerRunning around\r\n      return {\r\n        ...state,\r\n        isTimerRunning: !state.isTimerRunning\r\n      }\r\n\r\n    case actionTypes.START_TIMER:\r\n      // on a valid timer configuration, sync both timerObject (which will tick)\r\n      // and previousInitialTime which will serve to reset the timer back to its\r\n      // original value. After that, unfreeze the timer and make it run.\r\n      return {\r\n        ...state,\r\n        timerObject: {\r\n          ...state.timerObject,\r\n          ...action.payload\r\n        },\r\n        previousInitialTime: {\r\n          ...state.previousInitialTime,\r\n          ...action.payload\r\n        },\r\n        isTimerFrozen: false,\r\n        isTimerRunning: true\r\n      }\r\n\r\n    case actionTypes.STOP_TIMER:\r\n      // dead stop the timer.\r\n      return {\r\n        ...state,\r\n        isTimerFrozen: true,\r\n        isTimerRunning: false\r\n      }\r\n\r\n    case actionTypes.SET_TIME:\r\n      // just set timerObject with the configs coming from payload.\r\n      return {\r\n        ...state,\r\n        timerObject: action.payload\r\n      }\r\n\r\n    case actionTypes.CHANGE_TIMER_INPUT:\r\n      // this action is called upon each individual timer input manual change by the user.\r\n      // First, get the name (\"hs\", \"mins\" or \"secs\") and the value from payload\r\n      let { name, value } = action.payload\r\n      // if they hold an invalid value, do nothing\r\n      if (!validateInputOnChange(value, 2)) return state\r\n      // \"mins\" and \"secs\" cannot go beyond 59, and \"hours\", beyond 23\r\n      if ((name === \"mins\" || name === \"secs\") && Number.parseInt(value) > 59)\r\n        value = 59\r\n      else if (Number.parseInt(value) > 23) value = 23\r\n      // update the corresponding key in timerObject with its new value.\r\n      return {\r\n        ...state,\r\n        timerObject: {\r\n          ...state.timerObject,\r\n          [name]: value\r\n        }\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import * as timerActionTypes from \"./timerActionTypes\"\r\n\r\nexport const toggleTimerFrozen = () => ({\r\n  type: timerActionTypes.TOGGLE_TIMER_FROZEN\r\n})\r\n\r\nexport const toggleTimerRunning = () => ({\r\n  type: timerActionTypes.TOGGLE_TIMER_RUNNING\r\n})\r\n\r\n// timerObject: <object> {hs: <string>, mins: <string>, secs: <string>}\r\nexport const startTimer = (timerObject) => ({\r\n  type: timerActionTypes.START_TIMER,\r\n  payload: timerObject\r\n})\r\n\r\nexport const stopTimer = () => ({\r\n  type: timerActionTypes.STOP_TIMER\r\n})\r\n\r\n// timerObject: <object> {hs: <string>, mins: <string>, secs: <string>}\r\nexport const setTime = (timerObject) => ({\r\n  type: timerActionTypes.SET_TIME,\r\n  payload: timerObject\r\n})\r\n\r\n// hsOrMinsOrSecsObject: <object> {hs: 10} or {mins: 30} for example\r\nexport const changeTimerInput = (hsOrMinsOrSecsObject) => ({\r\n  type: timerActionTypes.CHANGE_TIMER_INPUT,\r\n  payload: hsOrMinsOrSecsObject\r\n})\r\n","import React, { createContext, useReducer, useEffect } from \"react\"\r\nimport timerReducer from \"../store/Timer/timerReducer\"\r\nimport useLogReducer from \"../hooks/useLogReducer\"\r\nimport uiConfigs from \"../utils/ui.configs.json\"\r\nimport { tick } from \"../utils/utilityFunctions\"\r\nimport * as timerActionCreators from \"../store/Timer/timerActionCreators\"\r\n\r\nexport const TimerContext = createContext({\r\n  timerObject: {},\r\n  previousInitialTime: {},\r\n  isTimerFrozen: false,\r\n  isTimerRunning: false,\r\n  dispatchTimerAction: () => {},\r\n  log: {},\r\n  logDispatch: () => {}\r\n})\r\n\r\nexport function TimerContextProvider({ children }) {\r\n  // initialize a timer reducer here. Its state needs to persist across components\r\n  // as not only it is needed by several of them, but also if timer is ticking\r\n  // we have to make sure unmounting components does not kill the action\r\n  const [timerState, dispatchTimerAction] = useReducer(timerReducer, {\r\n    timerObject: {\r\n      hs: uiConfigs.initialTimer.hs,\r\n      mins: uiConfigs.initialTimer.mins,\r\n      secs: uiConfigs.initialTimer.secs\r\n    },\r\n    previousInitialTime: {\r\n      hs: uiConfigs.initialTimer.hs,\r\n      mins: uiConfigs.initialTimer.mins,\r\n      secs: uiConfigs.initialTimer.secs\r\n    },\r\n    isTimerFrozen: false,\r\n    isTimerRunning: false\r\n  })\r\n  // spread timer reducer state's variables\r\n  const {\r\n    timerObject,\r\n    previousInitialTime,\r\n    isTimerRunning,\r\n    isTimerFrozen\r\n  } = timerState\r\n  // create a log reducer and dispatcher to be applied to timer actions logging\r\n  const [log, logDispatch] = useLogReducer(\r\n    uiConfigs.localStorageLogsObjectKeys.logHistory,\r\n    null,\r\n    {\r\n      logState: false,\r\n      logType: \"\",\r\n      logText: \"\",\r\n      logIgTimer: \"\"\r\n    }\r\n  )\r\n\r\n  useEffect(() => {\r\n    // useEffect to perform timer ticks\r\n    const timer = setTimeout(() => {\r\n      // if timer is not running, timer is paused or we hit 00:00:00,\r\n      // clear timeout\r\n      if (\r\n        isTimerFrozen ||\r\n        !isTimerRunning ||\r\n        (timerObject.hs === \"00\" &&\r\n          timerObject.mins === \"00\" &&\r\n          timerObject.secs === \"00\")\r\n      ) {\r\n        return clearTimeout(timer)\r\n      }\r\n      // otherwise, dispatch a timer action to tick one second\r\n      dispatchTimerAction(timerActionCreators.setTime(tick(timerObject)))\r\n    }, 1000)\r\n    // on cleanup, clear timeout\r\n    return () => clearTimeout(timer)\r\n  }, [timerObject, isTimerFrozen, isTimerRunning])\r\n\r\n  // unite all values to be provided by this context into an object\r\n  const passedContext = {\r\n    timerObject,\r\n    previousInitialTime,\r\n    isTimerFrozen,\r\n    isTimerRunning,\r\n    dispatchTimerAction,\r\n    log,\r\n    logDispatch\r\n  }\r\n\r\n  return (\r\n    <TimerContext.Provider value={passedContext}>\r\n      {children}\r\n    </TimerContext.Provider>\r\n  )\r\n}\r\n","import React, { useState, useEffect, useContext, useRef } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { CSSTransition } from \"react-transition-group\"\r\nimport { roll } from \"../../../utils/utilityFunctions\"\r\nimport { PlayerContext } from \"../../../contexts/PlayerContext\"\r\nimport { TimerContext } from \"../../../contexts/TimerContext\"\r\nimport * as logActionCreators from \"../../../store/Log/logActionCreators\"\r\nimport * as diceActionCreators from \"../../../store/CoinDieToken/coinDieTokenActionCreators\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport styles from \"./Die.module.css\"\r\n\r\nexport default function Die({\r\n  item = {}, // <object> \"dice\" reducer object in state {id: '', res: ''}\r\n  diceDispatch, // <function> dice reducer's action dispatcher\r\n  logDispatch, // <function> coinLog reducer's action dispatcher\r\n  playerConfigs = {}, // <object> \"playerConfigs\" object inside \"configs\" local storage key\r\n  diceSFX, // <object> useAudio()'s controls object for die roll SFX\r\n  classNames = [] // <Array> array of className strings\r\n}) {\r\n  const { currentPlayer, playerNames } = useContext(PlayerContext)\r\n  const { isTimerRunning, timerObject } = useContext(TimerContext)\r\n  // state controller for CSSTransition\r\n  const [isRolling, setIsRolling] = useState(false)\r\n  // isMounting will stop useEffect to trigger on mount\r\n  const isMounting = useRef(true)\r\n  // if the player configged min and max limits, they should appear on\r\n  // LocalStorage object, so use them. Otherwise, use the default ones\r\n  const { minRoll, maxRoll } = playerConfigs.hasOwnProperty(\"diceConfig\")\r\n    ? playerConfigs[\"diceConfig\"]\r\n    : uiConfigs.diceConfig\r\n  // classNames arrays\r\n  const classes = [styles.Container]\r\n  // push classes coming from props to their respective arrays\r\n  classNames.forEach((c) => classes.push(c))\r\n\r\n  const performRoll = () => {\r\n    // play the roll sfx and toggle roll state if it is off.\r\n    // That will replay die roll CSSAnimation\r\n    diceSFX.restart()\r\n    !isRolling && setIsRolling(true)\r\n  }\r\n\r\n  useEffect(() => {\r\n    let rollTimer\r\n    // do nothing on mount or if die state is false (not rolling)\r\n    if (isMounting.current || !isRolling) isMounting.current = false\r\n    else {\r\n      // when performRoll function changes state to true, trigger a timeout\r\n      rollTimer = setTimeout(() => {\r\n        // calculate roll result\r\n        const rollResult = roll(1, minRoll, maxRoll)\r\n        // modify dice array to show the proper result on the rolled dice\r\n        diceDispatch(\r\n          diceActionCreators.modifyArray({ id: item.id, res: rollResult })\r\n        )\r\n        // if logDispatch action dispatch is defined, log the roll\r\n        logDispatch &&\r\n          logDispatch(\r\n            logActionCreators.log({\r\n              type: uiConfigs.logTypes.dice,\r\n              text: `${playerNames[currentPlayer]} rolled ${rollResult}`,\r\n              timer: isTimerRunning\r\n                ? `${timerObject.hs}:${timerObject.mins}:${timerObject.secs}`\r\n                : \"\",\r\n              logPing: Math.random()\r\n            })\r\n          )\r\n        // reset rolling state so that die can be rolled again\r\n        setIsRolling(false)\r\n      }, uiConfigs.timeouts.diceRollAnimation)\r\n    }\r\n    // clear timeout on unmount to avoid memory leaks\r\n    return () => rollTimer && clearTimeout(rollTimer)\r\n  }, [isRolling, item.id, diceDispatch, currentPlayer, logDispatch])\r\n\r\n  return (\r\n    <CSSTransition\r\n      in={isRolling}\r\n      timeout={uiConfigs.timeouts.diceRollAnimation}\r\n      classNames=\"spin\"\r\n    >\r\n      <div\r\n        className={classes.join(\" \")}\r\n        onClick={performRoll}\r\n        aria-label={`Click to roll. Current roll: ${\r\n          item.res[0] || \"not rolled\"\r\n        }`}\r\n      >\r\n        {item.res}\r\n      </div>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nDie.propTypes = {\r\n  item: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    res: PropTypes.arrayOf(PropTypes.number)\r\n  }).isRequired,\r\n  diceDispatch: PropTypes.func.isRequired,\r\n  logDispatch: PropTypes.func,\r\n  playerConfigs: PropTypes.shape({\r\n    minRoll: PropTypes.number,\r\n    maxRoll: PropTypes.number\r\n  }),\r\n  diceSFX: PropTypes.object.isRequired,\r\n  classNames: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n","import React, { useState, useEffect, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styles from \"./Button.module.css\"\r\n\r\n/**\r\n * IMPORTANT. This was my very first component, and that's why classNames here are\r\n * treated as string names that match the ones in its CSS modules file. I did not\r\n * change it to function like all other components across the app just due to\r\n * nostalgia sake. Sorry\r\n */\r\nfunction Button({\r\n  children, // <any>\r\n  type = \"default\", // <string> \"primary\" or \"secondary\". Will apply different styles\r\n  typeButton, // <boolean> true will assign type=\"button\" to the rendered element\r\n  typeSubmit, // <boolean> true will assign type=\"submit\" to the rendered element\r\n  reference, // <React.createRef> a reference to the rendered button\r\n  ariaLabel, // <string> aria-label\r\n  ariaPressed, // <boolean> aria-pressed state\r\n  dataId, // <string> data-id\r\n  disabled, // <boolean> button's disabled state\r\n  nonStyledDisabled = false, // <boolean> same as disabed, but no \"disabled\" button styles will apply\r\n  onClick = null, // <function> on click callback\r\n  onBlur, // <function> on blur callback\r\n  style, // <object> CSS inline styles\r\n  sutileAnimation, // <boolean> true will set grow scaling on minimal for a sutile click animation\r\n  tabIndex, // <number> tab-index\r\n  classNames = []\r\n}) {\r\n  const [isActive, setIsActive] = useState(false)\r\n  // classNames arrays\r\n  const classes = [styles.Button]\r\n  // push classes coming from props. Notice this is the only component that\r\n  // accepts strings as classes and not an array of strings. I left it like\r\n  // this to try something different, in order to use hard-coded classes\r\n  // inside this same component. Might change in the future.\r\n  classNames.forEach((c) => classes.push(styles[c]))\r\n  // see? Pushing already coded classes depending on the string\r\n  disabled && classes.push(styles.Disabled)\r\n  if (isActive) {\r\n    classes.push(styles.Highlight)\r\n    sutileAnimation && classes.push(styles.GrowSmall)\r\n  }\r\n  // primary or secondary classes pushing by 'type' prop\r\n  switch (type.toLowerCase()) {\r\n    case \"secondary\":\r\n      classes.push(styles.Secondary)\r\n      break\r\n    case \"primary\":\r\n    default:\r\n      classes.push(styles.Primary)\r\n      break\r\n  }\r\n\r\n  const handleClick = (e) => {\r\n    // if button is not disabled, set it as active and trigger its onClick\r\n    if (!disabled) {\r\n      setIsActive(true)\r\n      onClick && onClick(e)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // when clicked, set a timeout to deactivate it. In the meantime, it\r\n    // will be highlighted by the added class\r\n    let highlightTimer\r\n    if (isActive) {\r\n      highlightTimer = setTimeout(() => {\r\n        setIsActive(false)\r\n      }, 200)\r\n    }\r\n    return () => highlightTimer && clearTimeout(highlightTimer)\r\n  }, [isActive])\r\n\r\n  return (\r\n    <button\r\n      type={typeButton ? \"button\" : typeSubmit ? \"submit\" : null}\r\n      style={style}\r\n      disabled={disabled || nonStyledDisabled}\r\n      aria-label={ariaLabel}\r\n      aria-pressed={ariaPressed}\r\n      data-id={dataId}\r\n      ref={reference}\r\n      className={classes.join(\" \")}\r\n      onBlur={onBlur}\r\n      tabIndex={tabIndex}\r\n      onClick={handleClick}\r\n    >\r\n      {children}\r\n    </button>\r\n  )\r\n}\r\n\r\nButton.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  type: PropTypes.string,\r\n  typeButton: PropTypes.bool,\r\n  typeSubmit: PropTypes.bool,\r\n  reference: PropTypes.oneOfType([\r\n    PropTypes.func,\r\n    PropTypes.shape({ current: PropTypes.instanceOf(Element) })\r\n  ]),\r\n  ariaLabel: PropTypes.string,\r\n  ariaPressed: PropTypes.bool,\r\n  dataId: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  nonStyledDisabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  onBlur: PropTypes.func,\r\n  style: PropTypes.object,\r\n  sutileAnimation: PropTypes.bool,\r\n  tabIndex: PropTypes.number,\r\n  classNames: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n\r\nexport default memo(Button)\r\n","export const classes = {\r\n  plusMinusButton: (isMqPortrait) => [\r\n    isMqPortrait ? \"oneInRow\" : \"threeInRow\",\r\n    \"height50\",\r\n    \"letterSpacing\"\r\n  ],\r\n  logButton: (isMqPortrait, logState) => [\r\n    isMqPortrait ? \"oneInRow\" : \"threeInRow\",\r\n    \"height50\",\r\n    \"letterSpacing\",\r\n    logState ? \"\" : \"PrimaryText\"\r\n  ]\r\n}\r\n","import React, { useContext, useEffect, useRef, useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\"\r\nimport { CoinDieTokenContext } from \"../../../contexts/CoinDieTokenContext\"\r\nimport { MediaQuery } from \"../../../contexts/MediaQueryContext\"\r\nimport { LocalStorageContext } from \"../../../contexts/LocalStorageContext\"\r\nimport * as logActionCreators from \"../../../store/Log/logActionCreators\"\r\nimport * as diceActionCreators from \"../../../store/CoinDieToken/coinDieTokenActionCreators\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport useAudio from \"../../../hooks/useAudio\"\r\nimport useReRender from \"../../../hooks/useReRender\"\r\nimport CoinDieTokenBottomScreen from \"../../../wrappers/CoinDieTokenBottomScreen/CoinDieTokenBottomScreen\"\r\nimport CoinDieTokenTopScreen from \"../../../wrappers/CoinDieTokenTopScreen/CoinDieTokenTopScreen\"\r\nimport Die from \"../Die/Die\"\r\nimport Button from \"../../UI/Button/Button\"\r\nimport dicemp3 from \"../../../assets/audios/dice.mp3\"\r\nimport { classes } from \"./DiceScreen.utils\"\r\nimport styles from \"./DiceScreen.module.css\"\r\n\r\nexport default function DiceScreen({\r\n  switchSFX, // <object> useAudio() controls object for BottomScreen's log button\r\n  clickOKSFX, // <object> useAudio() controls object for BottomScreen's - button\r\n  clickCancelSFX, // <object> useAudio() controls object for BottomScreen's + button\r\n  playSFXs, // <boolean> global state to control SFXs, coming from UIContext\r\n  dispatchToastAction // <function> <Toast /> action dispatcher, coming from UIContext\r\n}) {\r\n  const { mq } = useContext(MediaQuery)\r\n  const { diceReducer, diceLogReducer } = useContext(CoinDieTokenContext)\r\n  const { getLSasJSObject } = useContext(LocalStorageContext)\r\n  const [log, logDispatch] = diceLogReducer\r\n  const [diceState, diceDispatch] = diceReducer\r\n  // ref to store min/max roll states if configged by the player\r\n  const rollRef = useRef()\r\n  // function to force a re-render\r\n  const reRender = useReRender()\r\n  // audio JSX and controls object for dice roll SFX\r\n  const [diceAudioJSX, diceSFX] = useAudio(dicemp3, {\r\n    toggleOn: playSFXs,\r\n    playbackRate: 0.7\r\n  })\r\n\r\n  const dispatchAddDieAction = useCallback(() => {\r\n    // add a new die to the array and play the OK sfx\r\n    clickOKSFX.restart()\r\n    diceDispatch(diceActionCreators.addItem({ type: \"dice\" }))\r\n  }, [diceDispatch, clickOKSFX])\r\n\r\n  const dispatchRemoveDieAction = useCallback(() => {\r\n    // remove new die from the array and play the cancel sfx\r\n    clickCancelSFX.restart()\r\n    diceDispatch(diceActionCreators.removeItem())\r\n  }, [diceDispatch, clickCancelSFX])\r\n\r\n  const dispatchToggleLogAction = useCallback(() => {\r\n    // toggle logging for dice actions, and show toast to notify it\r\n    switchSFX.play()\r\n    logDispatch(logActionCreators.toggle())\r\n    dispatchToastAction(toastActionCreators.setLogType(\"DICE\"))\r\n  }, [logDispatch, dispatchToastAction, switchSFX])\r\n\r\n  useEffect(() => {\r\n    // on mount, get min/max player configged dice roll ranges if any.\r\n    // To pass them to the dice array, we need a re-render (they will be\r\n    // stored in a ref, which does not re-render the component when changing)\r\n    const { playerConfigs } = getLSasJSObject()\r\n    rollRef.current = playerConfigs\r\n    reRender()\r\n  }, [reRender, getLSasJSObject])\r\n\r\n  return (\r\n    <div className={styles.Container}>\r\n      <CoinDieTokenTopScreen ariaLabel=\"Click on the dice to perform their rolls.\">\r\n        <TransitionGroup component={null}>\r\n          {diceState.items.map((item, i) => (\r\n            <CSSTransition key={i} timeout={500} classNames=\"dice-in-out\">\r\n              <Die\r\n                item={item}\r\n                diceDispatch={diceDispatch}\r\n                logDispatch={logDispatch}\r\n                playerConfigs={rollRef.current} // {min: <number>, max: <number>}\r\n                diceSFX={diceSFX}\r\n              />\r\n            </CSSTransition>\r\n          ))}\r\n        </TransitionGroup>\r\n        {diceAudioJSX}\r\n      </CoinDieTokenTopScreen>\r\n      <CoinDieTokenBottomScreen ariaLabel=\"Control the dice with the buttons below.\">\r\n        <Button\r\n          type=\"secondary\"\r\n          onClick={dispatchRemoveDieAction}\r\n          disabled={diceState.items.length <= 0}\r\n          ariaLabel={\r\n            diceState.items.length ? \"Remove one die\" : \"No dice to remove\"\r\n          }\r\n          classNames={classes.plusMinusButton(mq.portrait)}\r\n        >\r\n          -\r\n        </Button>\r\n        <Button\r\n          type={log.logState ? \"primary\" : \"secondary\"}\r\n          onClick={dispatchToggleLogAction}\r\n          ariaLabel=\"Toggle log\"\r\n          classNames={classes.logButton(mq.portrait, log.logState)}\r\n        >\r\n          Log {log.logState ? \"ON\" : \"OFF\"}\r\n        </Button>\r\n        <Button\r\n          type=\"secondary\"\r\n          onClick={dispatchAddDieAction}\r\n          disabled={diceState.items.length >= 6}\r\n          ariaLabel={\r\n            diceState.items.length >= 6 ? \"Cannot add more dice\" : \"Add one die\"\r\n          }\r\n          classNames={classes.plusMinusButton(mq.portrait)}\r\n        >\r\n          +\r\n        </Button>\r\n      </CoinDieTokenBottomScreen>\r\n    </div>\r\n  )\r\n}\r\n\r\nDiceScreen.propTypes = {\r\n  switchSFX: PropTypes.object.isRequired,\r\n  clickOKSFX: PropTypes.object.isRequired,\r\n  clickCancelSFX: PropTypes.object.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired,\r\n  dispatchToastAction: PropTypes.func.isRequired\r\n}\r\n","import React, { useState, useEffect, useContext, useRef } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { CSSTransition } from \"react-transition-group\"\r\nimport { PlayerContext } from \"../../../contexts/PlayerContext\"\r\nimport { TimerContext } from \"../../../contexts/TimerContext\"\r\nimport * as logActionCreators from \"../../../store/Log/logActionCreators\"\r\nimport * as coinActionCreators from \"../../../store/CoinDieToken/coinDieTokenActionCreators\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport tick from \"../../../assets/uiIcons/tick.svg\"\r\nimport cross from \"../../../assets/uiIcons/cross.svg\"\r\nimport styles from \"./Coin.module.css\"\r\n\r\nexport default function Coin({\r\n  item, // <object> \"coin\" reducer object in state {id: '', res: '', alt: ''}\r\n  coinDispatch, // <function> coin reducer's action dispatcher\r\n  logDispatch, // <function> coinLog reducer's action dispatcher\r\n  coinSFX // <object> useAudio()'s controls object for coin toss SFX\r\n}) {\r\n  // we need the current player's key and name, as well as timer object and\r\n  // timer running state to log coin tosses. Grab them from context\r\n  const { currentPlayer, playerNames } = useContext(PlayerContext)\r\n  const { isTimerRunning, timerObject } = useContext(TimerContext)\r\n  // state controller for CSSTransition\r\n  const [isTossing, setIsTossing] = useState(false)\r\n  // isMounting will stop useEffect to trigger on mount\r\n  const isMounting = useRef(true)\r\n\r\n  const performToss = () => {\r\n    // play the toss sfx and toggle toss state if it is off.\r\n    // That will replay coin roll CSSAnimation\r\n    coinSFX.restart()\r\n    !isTossing && setIsTossing(true)\r\n  }\r\n\r\n  useEffect(() => {\r\n    let tossTimer\r\n    // do nothing on mount or if coin state is false (not tossing)\r\n    if (isMounting.current || !isTossing) isMounting.current = false\r\n    else {\r\n      // when performToss function changes state to true, trigger a timeout\r\n      tossTimer = setTimeout(() => {\r\n        // calculate flip result\r\n        const flipResult =\r\n          Math.random() > 0.5\r\n            ? { res: tick, alt: \"Heads\" }\r\n            : { res: cross, alt: \"Tails\" }\r\n        // modify coin array to show the proper result on the tossed coin\r\n        coinDispatch(\r\n          coinActionCreators.modifyArray({\r\n            id: item.id,\r\n            res: flipResult.res,\r\n            alt: flipResult.alt\r\n          })\r\n        )\r\n        // log the roll\r\n        logDispatch(\r\n          logActionCreators.log({\r\n            type: uiConfigs.logTypes.coin,\r\n            text: `${playerNames[currentPlayer]} flipped ${flipResult.alt}`,\r\n            timer: isTimerRunning\r\n              ? `${timerObject.hs}:${timerObject.mins}:${timerObject.secs}`\r\n              : \"\",\r\n            logPing: Math.random()\r\n          })\r\n        )\r\n        // reset tossing state so that coin can be tossed again\r\n        setIsTossing(false)\r\n      }, uiConfigs.timeouts.coinTossAnimation)\r\n    }\r\n    // clear timeout on unmount to avoid memory leaks\r\n    return () => tossTimer && clearTimeout(tossTimer)\r\n  }, [isTossing, item.id, coinDispatch, currentPlayer, logDispatch])\r\n\r\n  return (\r\n    <CSSTransition\r\n      in={isTossing}\r\n      timeout={uiConfigs.timeouts.coinTossAnimation}\r\n      classNames=\"flip\"\r\n    >\r\n      <div\r\n        className={styles.Container}\r\n        onClick={performToss}\r\n        aria-label={`Click to flip. Current flip: ${item.alt || \"not flipped\"}`}\r\n      >\r\n        {item.res && (\r\n          <img src={item.res} alt={item.alt} className={styles.Result} />\r\n        )}\r\n      </div>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nCoin.propTypes = {\r\n  item: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    res: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n  }).isRequired,\r\n  coinDispatch: PropTypes.func.isRequired,\r\n  logDispatch: PropTypes.func.isRequired,\r\n  coinSFX: PropTypes.object.isRequired\r\n}\r\n","export const classes = {\r\n  plusMinusButton: (isMqPortrait) => [\r\n    isMqPortrait ? \"oneInRow\" : \"threeInRow\",\r\n    \"height50\",\r\n    \"letterSpacing\"\r\n  ],\r\n  logButton: (isMqPortrait, logState) => [\r\n    isMqPortrait ? \"oneInRow\" : \"threeInRow\",\r\n    \"height50\",\r\n    \"letterSpacing\",\r\n    logState ? \"\" : \"PrimaryText\"\r\n  ]\r\n}\r\n","import React, { useContext, useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\"\r\nimport { CoinDieTokenContext } from \"../../../contexts/CoinDieTokenContext\"\r\nimport { MediaQuery } from \"../../../contexts/MediaQueryContext\"\r\nimport * as logActionCreators from \"../../../store/Log/logActionCreators\"\r\nimport * as coinActionCreators from \"../../../store/CoinDieToken/coinDieTokenActionCreators\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport useAudio from \"../../../hooks/useAudio\"\r\nimport Coin from \"../Coin/Coin\"\r\nimport CoinDieTokenBottomScreen from \"../../../wrappers/CoinDieTokenBottomScreen/CoinDieTokenBottomScreen\"\r\nimport CoinDieTokenTopScreen from \"../../../wrappers/CoinDieTokenTopScreen/CoinDieTokenTopScreen\"\r\nimport Button from \"../../UI/Button/Button\"\r\nimport coinmp3 from \"../../../assets/audios/coin.mp3\"\r\nimport { classes } from \"./CoinScreen.utils\"\r\nimport styles from \"./CoinScreen.module.css\"\r\n\r\nexport default function CoinScreen({\r\n  switchSFX, // <object> useAudio() controls object for BottomScreen's log button\r\n  clickOKSFX, // <object> useAudio() controls object for BottomScreen's - button\r\n  clickCancelSFX, // <object> useAudio() controls object for BottomScreen's + button\r\n  playSFXs, // <boolean> global state to control SFXs, coming from UIContext\r\n  dispatchToastAction // <function> <Toast /> action dispatcher, coming from UIContext\r\n}) {\r\n  const { mq } = useContext(MediaQuery)\r\n  const { coinReducer, coinLogReducer } = useContext(CoinDieTokenContext)\r\n  const [log, logDispatch] = coinLogReducer\r\n  const [coinState, coinDispatch] = coinReducer\r\n  // audio JSX and controls object for coin toss SFX\r\n  const [coinAudioJSX, coinSFX] = useAudio(coinmp3, {\r\n    toggleOn: playSFXs,\r\n    playbackRate: 0.7\r\n  })\r\n\r\n  const dispatchAddCoinAction = useCallback(() => {\r\n    // add a new coin to the array and play the OK sfx\r\n    clickOKSFX.restart()\r\n    coinDispatch(coinActionCreators.addItem({ type: \"coin\" }))\r\n  }, [coinDispatch, clickOKSFX])\r\n\r\n  const dispatchRemoveCoinAction = useCallback(() => {\r\n    // remove a coin from the array and play the cancel sfx\r\n    clickCancelSFX.restart()\r\n    coinDispatch(coinActionCreators.removeItem())\r\n  }, [coinDispatch, clickCancelSFX])\r\n\r\n  const dispatchToggleLogAction = useCallback(() => {\r\n    // toggle logging for coin actions, and show toast to notify it\r\n    switchSFX.play()\r\n    logDispatch(logActionCreators.toggle())\r\n    dispatchToastAction(toastActionCreators.setLogType(\"COINS\"))\r\n  }, [logDispatch, dispatchToastAction, switchSFX])\r\n\r\n  return (\r\n    <div className={styles.Container}>\r\n      <CoinDieTokenTopScreen ariaLabel=\"Click on the coins to flip them.\">\r\n        <TransitionGroup component={null}>\r\n          {coinState.items.map((item, i) => (\r\n            <CSSTransition key={i} timeout={250} classNames=\"coin-in-out\">\r\n              <Coin\r\n                item={item}\r\n                coinDispatch={coinDispatch}\r\n                logDispatch={logDispatch}\r\n                coinSFX={coinSFX}\r\n              />\r\n            </CSSTransition>\r\n          ))}\r\n        </TransitionGroup>\r\n        {coinAudioJSX}\r\n      </CoinDieTokenTopScreen>\r\n      <CoinDieTokenBottomScreen ariaLabel=\"Control the coins with the buttons below.\">\r\n        <Button\r\n          type=\"secondary\"\r\n          onClick={dispatchRemoveCoinAction}\r\n          disabled={coinState.items.length <= 0}\r\n          ariaLabel={\r\n            coinState.items.length ? \"Remove one coin\" : \"No coins to remove\"\r\n          }\r\n          classNames={classes.plusMinusButton(mq.portrait)}\r\n        >\r\n          -\r\n        </Button>\r\n        <Button\r\n          type={log.logState ? \"primary\" : \"secondary\"}\r\n          onClick={dispatchToggleLogAction}\r\n          ariaLabel=\"Toggle Log\"\r\n          classNames={classes.logButton(mq.portrait, log.logState)}\r\n        >\r\n          Log {log.logState ? \"ON\" : \"OFF\"}\r\n        </Button>\r\n        <Button\r\n          type=\"secondary\"\r\n          onClick={dispatchAddCoinAction}\r\n          disabled={coinState.items.length >= 6}\r\n          ariaLabel={\r\n            coinState.items.length >= 6\r\n              ? \"Cannot add more coins\"\r\n              : \"Add one coin\"\r\n          }\r\n          classNames={classes.plusMinusButton(mq.portrait)}\r\n        >\r\n          +\r\n        </Button>\r\n      </CoinDieTokenBottomScreen>\r\n    </div>\r\n  )\r\n}\r\n\r\nCoinScreen.propTypes = {\r\n  switchSFX: PropTypes.object.isRequired,\r\n  clickOKSFX: PropTypes.object.isRequired,\r\n  clickCancelSFX: PropTypes.object.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired,\r\n  dispatchToastAction: PropTypes.func.isRequired\r\n}\r\n","import styles from \"./ArrowIcon.module.css\"\r\n\r\nexport const classes = {\r\n  container: (disabled, onClick, isActive, propsClassNames) =>\r\n    [\r\n      styles.Container,\r\n      disabled ? styles.ContainerDisabled : \"\",\r\n      onClick ? styles.Clickable : \"\",\r\n      isActive ? styles.Active : \"\",\r\n      propsClassNames?.join(\" \")\r\n    ].join(\" \"),\r\n  image: (disabled, direction, propsClassNames) =>\r\n    [\r\n      styles.ArrowImage,\r\n      styles[direction], // dynamically added orientation styles\r\n      disabled ? styles.ArrowImageDisabled : \"\",\r\n      propsClassNames?.join(\" \")\r\n    ].join(\" \"),\r\n  extraText: (disabled, propsClassNames) =>\r\n    [\r\n      styles.ExtraText,\r\n      disabled ? styles.ArrowImageDisabled : \"\",\r\n      propsClassNames?.join(\" \")\r\n    ].join(\" \")\r\n}\r\n","import React, { memo, useState, useEffect, useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport arrow from \"../../../assets/uiIcons/arrow2.svg\"\r\nimport { classes } from \"./ArrowIcon.utils\"\r\nimport styles from \"./ArrowIcon.module.css\"\r\n\r\nfunction ArrowIcon({\r\n  id,\r\n  component = \"div\", // <string> component defaults as <div>, but we also use it as <nav>\r\n  pointing = \"Left\", // <string> the string to dynamically generate classes to rotate the arrow\r\n  arrowImage = null, // <string> the path to icon image to use instead of the default 'arrow'\r\n  alt = \"\", // <string> alt prop for the image\r\n  extraText = null, // <string> text to show in a span besides the img\r\n  disabled = false, // <boolean> disabled condition\r\n  role, // <string> ARIA role\r\n  dataId, // <string> data-id\r\n  dataExtra, // <string> data-extra\r\n  style, // <object> inline CSS styling\r\n  classNames = {},\r\n  onClick = null // <function> onClick callback for outermost element\r\n}) {\r\n  const [isActive, setIsActive] = useState(false)\r\n  // customize component tag (we use this component as \"nav\" and as \"div\")\r\n  const Component = component\r\n  // if direction is provided, it can state any direction (Up, Bottom-Right, and so on)\r\n  // We need to make sure both words are capitalized and joined correctly.\r\n  const direction = pointing\r\n    ? pointing\r\n        .split(\"-\")\r\n        .map(\r\n          (word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\r\n        )\r\n        .join(\"-\")\r\n    : \"Left\"\r\n\r\n  const handleOnClick = useCallback(\r\n    (e) => {\r\n      // if onClick is defined, set this component as active and trigger onClick\r\n      if (onClick) {\r\n        setIsActive(true)\r\n        onClick(e)\r\n      }\r\n    },\r\n    [setIsActive, onClick]\r\n  )\r\n\r\n  useEffect(() => {\r\n    // once this component becomes active, inactivate it after timeout.\r\n    // This is mainly due to active classes toggling\r\n    let activeTimeout\r\n    if (onClick && isActive) {\r\n      activeTimeout = setTimeout(() => {\r\n        setIsActive(false)\r\n      }, 150)\r\n    }\r\n    return () => activeTimeout && clearTimeout(activeTimeout)\r\n  }, [onClick, isActive])\r\n\r\n  return (\r\n    <Component\r\n      id={id}\r\n      data-id={dataId}\r\n      data-extra={dataExtra}\r\n      role={role}\r\n      style={style}\r\n      className={classes.container(\r\n        disabled,\r\n        onClick,\r\n        isActive,\r\n        classNames.container\r\n      )}\r\n      onClick={disabled ? null : handleOnClick}\r\n    >\r\n      <img\r\n        src={arrowImage ? arrowImage : arrow}\r\n        alt={alt || `Arrow ${pointing}`}\r\n        className={classes.image(disabled, direction, classNames.arrow)}\r\n      />\r\n      {extraText && (\r\n        <span className={classes.extraText(disabled, classNames.text)}>\r\n          {extraText}\r\n        </span>\r\n      )}\r\n    </Component>\r\n  )\r\n}\r\n\r\nArrowIcon.propTypes = {\r\n  id: PropTypes.oneOf([PropTypes.string, PropTypes.number]),\r\n  component: PropTypes.string,\r\n  pointing: PropTypes.string,\r\n  arrowImage: PropTypes.string,\r\n  extraText: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  alt: PropTypes.string,\r\n  role: PropTypes.string,\r\n  dataId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  dataExtra: PropTypes.any,\r\n  style: PropTypes.object,\r\n  classNames: PropTypes.shape({\r\n    container: PropTypes.arrayOf(PropTypes.string),\r\n    arrow: PropTypes.arrayOf(PropTypes.string),\r\n    text: PropTypes.arrayOf(PropTypes.string)\r\n  }),\r\n  onClick: PropTypes.func\r\n}\r\n\r\nexport default memo(ArrowIcon)\r\n","import styles from \"./Token.module.css\"\r\n\r\nexport const classes = {\r\n  arrowImageClasses: (isActive) => [\r\n    styles.ArrowImage,\r\n    isActive ? styles.ArrowImageActive : \"\"\r\n  ],\r\n  container: (propsClassNames) =>\r\n    [styles.Container, propsClassNames?.join(\" \")].join(\" \"),\r\n  image: (isActive, propsClassNames) =>\r\n    [\r\n      styles.Image,\r\n      isActive ? styles.ImageActive : \"\",\r\n      propsClassNames?.join(\" \")\r\n    ].join(\" \"),\r\n  arrowClasses: (isActive, direction, propsClassNames) => ({\r\n    container: [\r\n      styles.Arrow,\r\n      styles[\"Arrow\" + direction],\r\n      propsClassNames?.join(\" \")\r\n    ],\r\n    arrow: classes.arrowImageClasses(isActive)\r\n  })\r\n}\r\n","import React, { useCallback, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport * as tokenActionCreators from \"../../../store/CoinDieToken/coinDieTokenActionCreators\"\r\nimport MiniCircle from \"../../UI/MiniCircle/MiniCircle\"\r\nimport ArrowIcon from \"../../UI/ArrowIcon/ArrowIcon\"\r\nimport { classes } from \"./Token.utils\"\r\n\r\nfunction Token({\r\n  item, // <object> \"coin\" reducer object in state {id: '', res: '', alt: ''}\r\n  tokenDispatch, // <function> token reducer's action dispatcher\r\n  tokenSFXs, // <object> object with two useAudio()'s controls objects for token adding/removing SFX\r\n  classNames = {} // <object> object whose keys are array of className strings. Check propTypes below\r\n}) {\r\n  const dispatchIncDecAction = useCallback(\r\n    (e) => {\r\n      // trigger the add/remove SFX and dispatch the token action to\r\n      // modify its counter\r\n      if (e.target.dataset.extra === \"inc\") tokenSFXs.add.restart()\r\n      else tokenSFXs.remove.restart()\r\n      tokenDispatch(\r\n        tokenActionCreators.modifyTokenCounter(\r\n          e.target.dataset.id,\r\n          e.target.dataset.extra\r\n        )\r\n      )\r\n    },\r\n    [tokenDispatch, tokenSFXs.add, tokenSFXs.remove]\r\n  )\r\n\r\n  const dispatchSwitchTokenTypeAction = useCallback(\r\n    // trigger the switch-token-type SFX and its reducer action, which\r\n    // will lead to the next token image to be displayed\r\n    (e) => {\r\n      tokenSFXs.swipe.restart()\r\n      tokenDispatch(\r\n        tokenActionCreators.switchTokenType(\r\n          e.target.dataset.id,\r\n          e.target.dataset.extra\r\n        )\r\n      )\r\n    },\r\n    [tokenSFXs.swipe, tokenDispatch]\r\n  )\r\n\r\n  const dispatchSetActiveTokenAction = useCallback(\r\n    (e) => {\r\n      // dispatch the action that sets the clicked token as active\r\n      tokenDispatch(tokenActionCreators.setActiveToken(e.target.dataset.id))\r\n    },\r\n    [tokenDispatch]\r\n  )\r\n\r\n  return (\r\n    <div className={classes.container(classNames.container)}>\r\n      <img\r\n        src={item.img}\r\n        alt={item.alt}\r\n        data-id={item.id}\r\n        onClick={dispatchSetActiveTokenAction}\r\n        className={classes.image(item.isActive, classNames.image)}\r\n      />\r\n      <MiniCircle display={item.counter} isActive={item.isActive} />\r\n      <ArrowIcon\r\n        pointing=\"top\"\r\n        alt=\"Increase token quantity\"\r\n        dataId={item.id}\r\n        dataExtra=\"inc\"\r\n        onClick={dispatchIncDecAction}\r\n        classNames={classes.arrowClasses(\r\n          item.isActive,\r\n          \"Top\",\r\n          classNames.arrowTop\r\n        )}\r\n      />\r\n      <ArrowIcon\r\n        pointing=\"right\"\r\n        alt=\"Change to next token type\"\r\n        dataId={item.id}\r\n        dataExtra={true}\r\n        onClick={dispatchSwitchTokenTypeAction}\r\n        classNames={classes.arrowClasses(\r\n          item.isActive,\r\n          \"Right\",\r\n          classNames.arrowRight\r\n        )}\r\n      />\r\n      <ArrowIcon\r\n        pointing=\"bottom\"\r\n        alt=\"Decrease token quantity\"\r\n        dataId={item.id}\r\n        dataExtra=\"dec\"\r\n        onClick={dispatchIncDecAction}\r\n        classNames={classes.arrowClasses(\r\n          item.isActive,\r\n          \"Bottom\",\r\n          classNames.arrowBottom\r\n        )}\r\n      />\r\n      <ArrowIcon\r\n        pointing=\"left\"\r\n        alt=\"Change to previous token type\"\r\n        dataId={item.id}\r\n        dataExtra=\"\"\r\n        onClick={dispatchSwitchTokenTypeAction}\r\n        classNames={classes.arrowClasses(\r\n          item.isActive,\r\n          \"Left\",\r\n          classNames.arrowLeft\r\n        )}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nToken.propTypes = {\r\n  item: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    counter: PropTypes.number.isRequired,\r\n    alt: PropTypes.string.isRequired,\r\n    img: PropTypes.string.isRequired,\r\n    isActive: PropTypes.bool.isRequired\r\n  }).isRequired,\r\n  tokenDispatch: PropTypes.func.isRequired,\r\n  tokenSFXs: PropTypes.shape({\r\n    add: PropTypes.object,\r\n    remove: PropTypes.object,\r\n    swipe: PropTypes.object\r\n  }).isRequired,\r\n  classNames: PropTypes.shape({\r\n    container: PropTypes.arrayOf(PropTypes.string),\r\n    arrowTop: PropTypes.arrayOf(PropTypes.string),\r\n    arrowRight: PropTypes.arrayOf(PropTypes.string),\r\n    arrowBottom: PropTypes.arrayOf(PropTypes.string),\r\n    arrowLeft: PropTypes.arrayOf(PropTypes.string)\r\n  })\r\n}\r\n\r\nexport default memo(Token)\r\n","export const classes = {\r\n  plusMinusButton: (isMqPortrait) => [\r\n    isMqPortrait ? \"oneInRow\" : \"threeInRow\",\r\n    \"height50\",\r\n    \"letterSpacing\"\r\n  ],\r\n  removeSelected: (isMqPortrait) => [\r\n    isMqPortrait ? \"oneInRow\" : \"threeInRow\",\r\n    \"height50\"\r\n  ]\r\n}\r\n\r\nexport const ariaLabels = {\r\n  minusButton: (tokenStateItemsLength) =>\r\n    tokenStateItemsLength ? \"Remove one token\" : \"No tokens to remove\",\r\n  removeButton: \"Remove selected token\",\r\n  plusButton: (tokenStateItemsLength) =>\r\n    tokenStateItemsLength >= 6 ? \"Cannot add more tokens\" : \"Add one token\"\r\n}\r\n","import React, { useContext, useCallback, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\"\r\nimport { CoinDieTokenContext } from \"../../../contexts/CoinDieTokenContext\"\r\nimport { MediaQuery } from \"../../../contexts/MediaQueryContext\"\r\nimport * as tokenActionCreators from \"../../../store/CoinDieToken/coinDieTokenActionCreators\"\r\nimport useAudio from \"../../../hooks/useAudio\"\r\nimport CoinDieTokenBottomScreen from \"../../../wrappers/CoinDieTokenBottomScreen/CoinDieTokenBottomScreen\"\r\nimport CoinDieTokenTopScreen from \"../../../wrappers/CoinDieTokenTopScreen/CoinDieTokenTopScreen\"\r\nimport Token from \"../Token/Token\"\r\nimport Button from \"../../UI/Button/Button\"\r\nimport swipemp3 from \"../../../assets/audios/swipe.mp3\"\r\nimport { classes, ariaLabels } from \"./TokenScreen.utils\"\r\nimport styles from \"./TokenScreen.module.css\"\r\n\r\nfunction TokenScreen({\r\n  clickOKSFX, // <object> useAudio() controls object for BottomScreen's - button\r\n  clickCancelSFX, // <object> useAudio() controls object for BottomScreen's + button\r\n  playSFXs // <boolean> global state to control SFXs, coming from UIContext\r\n}) {\r\n  const { mq } = useContext(MediaQuery)\r\n  const {\r\n    tokenReducer: [tokenState, tokenDispatch]\r\n  } = useContext(CoinDieTokenContext)\r\n  // audio JSX and controls object for switching token types SFX\r\n  const [swipeAudioJSX, swipeSFX] = useAudio(swipemp3, {\r\n    toggleOn: playSFXs\r\n  })\r\n\r\n  const dispatchAddTokenAction = useCallback(() => {\r\n    // add a new token to the array and play the OK sfx\r\n    clickOKSFX.restart()\r\n    tokenDispatch(tokenActionCreators.addItem({ type: \"token\" }))\r\n  }, [tokenDispatch, clickOKSFX])\r\n\r\n  const dispatchRemoveTokenAction = useCallback(\r\n    // remove a token from the array and play the cancel sfx\r\n    (e) => {\r\n      clickCancelSFX.restart()\r\n      tokenDispatch(tokenActionCreators.removeItem(e.target.dataset.id))\r\n    },\r\n    [tokenDispatch, clickCancelSFX]\r\n  )\r\n  // since each token needs a SFX when its counter increases/decreases and\r\n  // when switching between its types, construct an object to pass them all\r\n  const tokenSFXs = { add: clickOKSFX, remove: clickCancelSFX, swipe: swipeSFX }\r\n\r\n  return (\r\n    <div className={styles.Container}>\r\n      <CoinDieTokenTopScreen ariaLabel=\"Click on the left or right arrows to increase the quantity of the token, and on top and bottom arrows to switch between token images.\">\r\n        <TransitionGroup component={null}>\r\n          {tokenState.items.map((item) => (\r\n            <CSSTransition\r\n              key={item.id}\r\n              timeout={500}\r\n              classNames=\"token-in-out\"\r\n            >\r\n              <Token\r\n                item={item}\r\n                tokenDispatch={tokenDispatch}\r\n                tokenSFXs={tokenSFXs}\r\n              />\r\n            </CSSTransition>\r\n          ))}\r\n        </TransitionGroup>\r\n      </CoinDieTokenTopScreen>\r\n      <CoinDieTokenBottomScreen ariaLabel=\"Add/Remove tokens with the buttons below.\">\r\n        <Button\r\n          type=\"secondary\"\r\n          onClick={dispatchRemoveTokenAction}\r\n          disabled={tokenState.items.length <= 0}\r\n          ariaLabel={ariaLabels.minusButton(tokenState.items.length)}\r\n          classNames={classes.plusMinusButton(mq.portrait)}\r\n        >\r\n          -\r\n        </Button>\r\n        <Button\r\n          type=\"secondary\"\r\n          onClick={dispatchRemoveTokenAction}\r\n          dataId=\"removeSelected\"\r\n          disabled={tokenState.items.length <= 0}\r\n          ariaLabel={ariaLabels.removeButton}\r\n          classNames={classes.removeSelected(mq.portrait)}\r\n        >\r\n          Remove selected\r\n        </Button>\r\n        <Button\r\n          type=\"secondary\"\r\n          onClick={dispatchAddTokenAction}\r\n          disabled={tokenState.items.length >= 6}\r\n          ariaLabel={ariaLabels.plusButton(tokenState.items.length)}\r\n          classNames={classes.plusMinusButton(mq.portrait)}\r\n        >\r\n          +\r\n        </Button>\r\n      </CoinDieTokenBottomScreen>\r\n      {swipeAudioJSX}\r\n    </div>\r\n  )\r\n}\r\n\r\nTokenScreen.propTypes = {\r\n  clickOKSFX: PropTypes.object.isRequired,\r\n  clickCancelSFX: PropTypes.object.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default memo(TokenScreen)\r\n","import styles from \"./Input.module.css\"\r\n\r\nexport const classes = {\r\n  container: (disabled, propsClassNames) =>\r\n    [\r\n      styles.Container,\r\n      disabled ? styles.Disabled : \"\",\r\n      propsClassNames?.join(\" \")\r\n    ].join(\" \")\r\n}\r\n","import React, { memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { classes } from \"./Input.utils\"\r\nimport styles from \"./Input.module.css\"\r\n\r\nfunction Input({\r\n  id,\r\n  type = \"text\", // <string> input's type\r\n  value = \"\", // <string> input's value\r\n  name, // <string> input's name property\r\n  placeholder, // <string> input's placeholder property\r\n  ariaLabel, // <string> aria-label\r\n  role, // <string> aria-role\r\n  autoComplete, // <string> input's autocomplete property (\"on\", \"off\")\r\n  disabled = false, // <boolean> disabled state\r\n  reference = null, // <React.useRef> a reference targetting the input\r\n  onChange = () => {}, // <function> input's on change callback\r\n  onFocus = () => {}, // <function> input's on focus callback\r\n  onBlur = () => {}, // <function> input's on blur callback\r\n  classNames = [] // <Array> classNames strings in an array\r\n}) {\r\n  // // classNames arrays\r\n  // const classes = [styles.Container, disabled ? styles.Disabled : \"\"]\r\n  // // push classes coming from props to their respective arrays\r\n  // classNames.forEach((c) => classes.push(c))\r\n\r\n  return (\r\n    <input\r\n      id={id}\r\n      type={type}\r\n      value={value}\r\n      name={name}\r\n      placeholder={placeholder}\r\n      aria-label={ariaLabel}\r\n      role={role}\r\n      autoComplete={autoComplete}\r\n      disabled={disabled}\r\n      ref={reference}\r\n      onChange={onChange}\r\n      onFocus={onFocus}\r\n      onBlur={onBlur}\r\n      className={classes.container(disabled, classNames)}\r\n    />\r\n  )\r\n}\r\n\r\nInput.propTypes = {\r\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  type: PropTypes.string,\r\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n  name: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  ariaLabel: PropTypes.string,\r\n  role: PropTypes.string,\r\n  autoComplete: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  reference: PropTypes.oneOfType([\r\n    PropTypes.func,\r\n    PropTypes.shape({ current: PropTypes.instanceOf(Element) })\r\n  ]),\r\n  onChange: PropTypes.func.isRequired,\r\n  onFocus: PropTypes.func,\r\n  onBlur: PropTypes.func,\r\n  classNames: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n\r\nexport default memo(Input)\r\n","import styles from \"./InputWithSubmit.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClassNames) =>\r\n    [styles.Container, propsClassNames?.join(\" \")].join(\" \"),\r\n  input: (propsClassNames) => [styles.Input, propsClassNames?.join(\" \")]\r\n}\r\n","import React, { memo, useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Input from \"../Input/Input\"\r\nimport { classes } from \"./InputWithSubmit.utils\"\r\n\r\nfunction InputWithSubmit({\r\n  onSubmit, // <fuction> <form>'s submission callback\r\n  preventDefault, // <boolean> on true, default <form> event is prevented\r\n  classNames = {}, // <object> classNames object. Check propTypes below for its constitution\r\n  ...otherProps // <object> all other props passed to <Input />\r\n}) {\r\n  const handleSubmit = useCallback(\r\n    // prevent default if assigned in props and trigger onSubit callback\r\n    (e) => {\r\n      preventDefault && e.preventDefault()\r\n      onSubmit(e)\r\n    },\r\n    [preventDefault, onSubmit]\r\n  )\r\n\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit}\r\n      className={classes.container(classNames.container)}\r\n    >\r\n      <Input classNames={classes.input(classNames.input)} {...otherProps} />\r\n    </form>\r\n  )\r\n}\r\n\r\nInputWithSubmit.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n  preventDefault: PropTypes.bool,\r\n  classNames: PropTypes.shape({\r\n    container: PropTypes.arrayOf(PropTypes.string),\r\n    input: PropTypes.arrayOf(PropTypes.string)\r\n  })\r\n}\r\n\r\nexport default memo(InputWithSubmit)\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styles from \"./TimerBottomScreen.module.css\"\r\n\r\nexport default function TimerBottomScreen({ ariaLabel, children }) {\r\n  return (\r\n    <div className={styles.Container} aria-label={ariaLabel}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nTimerBottomScreen.propTypes = {\r\n  ariaLabel: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styles from \"./TimerTopScreen.module.css\"\r\n\r\nexport default function TimerTopScreen({ ariaLabel, onSubmit, children }) {\r\n  return (\r\n    <div className={styles.Container} aria-label={ariaLabel}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nTimerTopScreen.propTypes = {\r\n  ariaLabel: PropTypes.string.isRequired,\r\n  onSubmit: PropTypes.func,\r\n  children: PropTypes.node.isRequired\r\n}\r\n","import styles from \"./TimerScreen.module.css\"\r\n\r\nexport const classes = {\r\n  inputWithSubmit: {\r\n    container: [styles.InputForm],\r\n    input: [styles.Input]\r\n  },\r\n  actionButton: (isMqPortrait) => [\r\n    isMqPortrait ? \"oneInRow\" : \"fourInRow\",\r\n    \"height50\",\r\n    \"letterSpacing\"\r\n  ],\r\n  logButton: (isMqPortrait, logState) => [\r\n    isMqPortrait ? \"oneInRow\" : \"fourInRow\",\r\n    \"height50\",\r\n    \"letterSpacing\",\r\n    logState ? \"\" : \"PrimaryText\"\r\n  ]\r\n}\r\n\r\nexport const ariaLabels = {\r\n  startTimer: (isTimerRunning) =>\r\n    isTimerRunning\r\n      ? \"Timer has already started. Stop it to restart\"\r\n      : \"Start timer\",\r\n  freezeTimer: (isTimerRunning, isTimerFrozen) =>\r\n    isTimerRunning\r\n      ? isTimerFrozen\r\n        ? \"Unpause timer\"\r\n        : \"Pause timer\"\r\n      : \"Timer is not running, you cannot pause it\",\r\n  stopTimer: (isTimerRunning) =>\r\n    isTimerRunning ? \"Stop Timer\" : \"Timer is stopped\",\r\n  logTimer: (logState) =>\r\n    `Click to log timer. Current state: ${logState ? \"ON\" : \"OFF\"}`\r\n}\r\n","import React, { useContext, useCallback, useRef } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { MediaQuery } from \"../../../contexts/MediaQueryContext\"\r\nimport { TimerContext } from \"../../../contexts/TimerContext\"\r\nimport * as timerActionCreators from \"../../../store/Timer/timerActionCreators\"\r\nimport * as logActionCreators from \"../../../store/Log/logActionCreators\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport InputWithSubmit from \"../../UI/InputWithSubmit/InputWithSubmit\"\r\nimport Button from \"../../UI/Button/Button\"\r\nimport TimerBottomScreen from \"../../../wrappers/TimerBottomScreen/TimerBottomScreen\"\r\nimport TimerTopScreen from \"../../../wrappers/TimerTopScreen/TimerTopScreen\"\r\nimport { fillFrontOfInput } from \"../../../utils/utilityFunctions\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport { classes, ariaLabels } from \"./TimerScreen.utils\"\r\nimport styles from \"./TimerScreen.module.css\"\r\n\r\nexport default function TimerScreen({\r\n  switchSFX, // <object> useAudio() controls object for BottomScreen's log button\r\n  clickOKSFX, // <object> useAudio() controls object for BottomScreen's - button\r\n  clickCancelSFX, // <object> useAudio() controls object for BottomScreen's + button\r\n  dispatchToastAction // <function> <Toast /> action dispatcher, coming from UIContext\r\n}) {\r\n  const { mq } = useContext(MediaQuery)\r\n  const {\r\n    timerObject,\r\n    isTimerFrozen,\r\n    isTimerRunning,\r\n    previousInitialTime,\r\n    dispatchTimerAction,\r\n    log,\r\n    logDispatch\r\n  } = useContext(TimerContext)\r\n  const { hs, mins, secs } = timerObject\r\n  // ref to the \"Start\" button, to click it on any input submit\r\n  const startButtonRef = useRef()\r\n\r\n  const dispatchLogAction = useCallback(\r\n    (stage, hs, mins, secs) => {\r\n      // log the action\r\n      logDispatch(\r\n        logActionCreators.log({\r\n          type: uiConfigs.logTypes.timer,\r\n          text: `${stage} at ${hs}:${mins}:${secs}`,\r\n          timer: `${hs}:${mins}:${secs}`\r\n        })\r\n      )\r\n    },\r\n    [logDispatch]\r\n  )\r\n\r\n  const dispatchToggleLogAction = useCallback(() => {\r\n    // toggle logging for coin actions, and show toast to notify it\r\n    switchSFX.play()\r\n    logDispatch(logActionCreators.toggle())\r\n    dispatchToastAction(toastActionCreators.setLogType(\"TIMER\"))\r\n  }, [logDispatch, dispatchToastAction, switchSFX])\r\n\r\n  const changeInput = useCallback(\r\n    // dispatch changeTimerInput action to control hs/mins/secs inputs\r\n    ({ target: { value, name } }) => {\r\n      dispatchTimerAction(timerActionCreators.changeTimerInput({ name, value }))\r\n    },\r\n    [dispatchTimerAction]\r\n  )\r\n\r\n  const startTimer = () => {\r\n    // create a timer object with current timerObject's hs, mins and secs.\r\n    // If any field has less than two digits, fill them with zeroes\r\n    let newTimerObject = {\r\n      hs: fillFrontOfInput(timerObject.hs, \"0\", 2),\r\n      mins: fillFrontOfInput(timerObject.mins, \"0\", 2),\r\n      secs: fillFrontOfInput(timerObject.secs, \"0\", 2)\r\n    }\r\n    // on 00:00:00, use the fallback timer values (previously used initial time)\r\n    if (\r\n      newTimerObject.hs === \"00\" &&\r\n      newTimerObject.mins === \"00\" &&\r\n      newTimerObject.secs === \"00\"\r\n    ) {\r\n      newTimerObject = previousInitialTime\r\n    }\r\n    // play the OK sound effect, dispatch the timer action to start the timer\r\n    // using the constructed timer object and log it\r\n    clickOKSFX.restart()\r\n    dispatchTimerAction(timerActionCreators.startTimer(newTimerObject))\r\n    dispatchLogAction(\r\n      \"Started\",\r\n      newTimerObject.hs,\r\n      newTimerObject.mins,\r\n      newTimerObject.secs\r\n    )\r\n  }\r\n\r\n  const toggleTimerFrozen = () => {\r\n    // If the timer is paused, dispatch the action to pause it and log that\r\n    // action. Else, just dispatch the action to unpause it\r\n    clickCancelSFX.restart()\r\n    !isTimerFrozen && dispatchLogAction(\"Paused\", hs, mins, secs)\r\n    dispatchTimerAction(timerActionCreators.toggleTimerFrozen())\r\n  }\r\n\r\n  const toggleTimerRunning = useCallback(() => {\r\n    // if the timer was running (already started), dispatch the action to\r\n    // stop it. Log it too\r\n    clickCancelSFX.restart()\r\n    dispatchLogAction(\"Stopped\", hs, mins, secs)\r\n    dispatchTimerAction(timerActionCreators.toggleTimerRunning())\r\n  }, [dispatchLogAction, dispatchTimerAction])\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    // on any input submission, target \"Start\" button and click it\r\n    startButtonRef.current && startButtonRef.current.click()\r\n  }, [startButtonRef])\r\n\r\n  return (\r\n    <div className={styles.Container}>\r\n      <TimerTopScreen ariaLabel=\"Click on each input to change the timer's hours/minutes/seconds values.\">\r\n        <InputWithSubmit\r\n          type=\"tel\"\r\n          value={hs}\r\n          name=\"hs\"\r\n          ariaLabel={`${hs} hours`}\r\n          disabled={isTimerRunning}\r\n          autoComplete=\"off\"\r\n          onChange={changeInput}\r\n          onSubmit={handleSubmit}\r\n          preventDefault\r\n          classNames={classes.inputWithSubmit}\r\n        />\r\n        <div>:</div>\r\n        <InputWithSubmit\r\n          type=\"tel\"\r\n          value={mins}\r\n          name=\"mins\"\r\n          ariaLabel={`${mins} minutes`}\r\n          disabled={isTimerRunning}\r\n          autoComplete=\"off\"\r\n          onChange={changeInput}\r\n          onSubmit={handleSubmit}\r\n          preventDefault\r\n          classNames={classes.inputWithSubmit}\r\n        />\r\n        <div>:</div>\r\n        <InputWithSubmit\r\n          type=\"tel\"\r\n          value={secs}\r\n          name=\"secs\"\r\n          ariaLabel={`${secs} seconds`}\r\n          disabled={isTimerRunning}\r\n          autoComplete=\"off\"\r\n          onChange={changeInput}\r\n          onSubmit={handleSubmit}\r\n          preventDefault\r\n          classNames={classes.inputWithSubmit}\r\n        />\r\n      </TimerTopScreen>\r\n      <TimerBottomScreen ariaLabel=\"Control the timer with the these buttons.\">\r\n        <Button\r\n          type=\"secondary\"\r\n          disabled={isTimerRunning}\r\n          onClick={startTimer}\r\n          ariaLabel={ariaLabels.startTimer(isTimerRunning)}\r\n          reference={startButtonRef}\r\n          classNames={classes.actionButton(mq.portrait)}\r\n        >\r\n          Start\r\n        </Button>\r\n        <Button\r\n          type={isTimerFrozen ? \"primary\" : \"secondary\"}\r\n          disabled={!isTimerRunning}\r\n          onClick={toggleTimerFrozen}\r\n          ariaLabel={ariaLabels.freezeTimer(isTimerRunning, isTimerFrozen)}\r\n          classNames={classes.actionButton(mq.portrait)}\r\n        >\r\n          Pause\r\n        </Button>\r\n        <Button\r\n          type=\"secondary\"\r\n          disabled={!isTimerRunning}\r\n          onClick={toggleTimerRunning}\r\n          ariaLabel={ariaLabels.stopTimer(isTimerRunning)}\r\n          classNames={classes.actionButton(mq.portrait)}\r\n        >\r\n          Stop\r\n        </Button>\r\n        <Button\r\n          type={log.logState ? \"primary\" : \"secondary\"}\r\n          onClick={dispatchToggleLogAction}\r\n          ariaLabel={ariaLabels.logTimer(log.logState)}\r\n          ariaPressed={log.logState}\r\n          classNames={classes.logButton(mq.portrait, log.logState)}\r\n        >\r\n          Log {log.logState ? \"ON\" : \"OFF\"}\r\n        </Button>\r\n      </TimerBottomScreen>\r\n    </div>\r\n  )\r\n}\r\n\r\nTimerScreen.propTypes = {\r\n  switchSFX: PropTypes.object.isRequired,\r\n  clickOKSFX: PropTypes.object.isRequired,\r\n  clickCancelSFX: PropTypes.object.isRequired,\r\n  dispatchToastAction: PropTypes.func.isRequired\r\n}\r\n","import * as actionTypes from \"./lifePointsActionTypes\"\r\nimport * as lifePointsActionTypes from \"./lifePointsActionTypes\"\r\nimport * as logActionCreators from \"../Log/logActionCreators\"\r\nimport Validator from \"../../utils/validators\"\r\nimport {\r\n  isValidRestartCondition,\r\n  getLogDisplayText\r\n} from \"../../utils/utilityFunctions\"\r\nimport uiConfigs from \"../../utils/ui.configs.json\"\r\n\r\nconst initialState = {\r\n  p1: 8000,\r\n  p2: 8000,\r\n  tempLP: uiConfigs.tempLP.init\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n  // we will need these two across the statement. Define them.\r\n  let currentPlayerLP, LPToCalculate\r\n  // destructure all other required variables\r\n  const { min, max } = uiConfigs.lpLimits\r\n  const {\r\n    dispatchLogAction,\r\n    currentPlayer,\r\n    playerNames,\r\n    isTimerRunning,\r\n    timerObject,\r\n    value,\r\n    getLSasJSObject,\r\n    toggleSecondScreen\r\n  } = action.payload\r\n\r\n  switch (action.type) {\r\n    case actionTypes.INC:\r\n      // if there's nothing to add, then do nothing\r\n      if (state.tempLP === \"0\") return state\r\n      // log the action if needed\r\n      dispatchLogAction(\r\n        logActionCreators.log({\r\n          type: lifePointsActionTypes.INC,\r\n          text: getLogDisplayText(\r\n            currentPlayer,\r\n            \"+\",\r\n            state,\r\n            { min, max },\r\n            playerNames\r\n          ),\r\n          timer: isTimerRunning\r\n            ? `${timerObject.hs}:${timerObject.mins}:${timerObject.secs}`\r\n            : \"\"\r\n        })\r\n      )\r\n      // get the active player's LP and tempLP from state\r\n      currentPlayerLP = state[currentPlayer]\r\n      LPToCalculate = Number.parseInt(state.tempLP)\r\n      // if the addition would exceed the LP limits set in uiConfigs, then\r\n      // set the current player's LP to its max value and update state\r\n      if (\r\n        new Validator(currentPlayerLP, LPToCalculate).intWouldBeHigherThan(\r\n          uiConfigs.lpLimits.max\r\n        )\r\n      ) {\r\n        return {\r\n          ...state,\r\n\r\n          [currentPlayer]: uiConfigs.lpLimits.max,\r\n          tempLP: uiConfigs.tempLP.init\r\n        }\r\n      }\r\n      // otherwise, add both LP variables up and set current player's state with it\r\n      return {\r\n        ...state,\r\n        [currentPlayer]: currentPlayerLP + LPToCalculate,\r\n        tempLP: uiConfigs.tempLP.init\r\n      }\r\n\r\n    case actionTypes.DEC:\r\n      // if there's nothing to substract manually, then do nothing\r\n      if (state.tempLP === \"0\" && value === \"-\") return state\r\n      // fixedButtonLPValue will either hold '1/2' if we are halving LP,\r\n      // state.tempLP if we are deducting LP manually using '-', or the\r\n      // absolute value of the automatic -100, -500 and -1000 buttons\r\n      const fixedButtonLPValue =\r\n        value === \"1/2\" ? value : value === \"-\" ? state.tempLP : -value\r\n      // log the action if needed\r\n      dispatchLogAction(\r\n        logActionCreators.log({\r\n          type: lifePointsActionTypes.DEC,\r\n          text: getLogDisplayText(\r\n            currentPlayer,\r\n            \"-\",\r\n            state,\r\n            { min, max },\r\n            playerNames,\r\n            fixedButtonLPValue\r\n          ),\r\n          timer: isTimerRunning\r\n            ? `${timerObject.hs}:${timerObject.mins}:${timerObject.secs}`\r\n            : \"\"\r\n        })\r\n      )\r\n      // get the active player's LP from state\r\n      currentPlayerLP = state[currentPlayer]\r\n      // are we halving lifepoints with the respective CalcButton?\r\n      // If so, set LPToCalculate to half currentPlayerLP, else just payload\r\n      if (fixedButtonLPValue === \"1/2\") {\r\n        LPToCalculate = Number.parseInt(currentPlayerLP / 2)\r\n      } else {\r\n        LPToCalculate = Number.parseInt(fixedButtonLPValue)\r\n      }\r\n      // upon substraction, if current player's lifepoints are lower than the\r\n      // minimum set in uiConfigs, set them to the minimum and update state\r\n      if (\r\n        new Validator(currentPlayerLP, LPToCalculate).intWouldBeLowerThan(\r\n          uiConfigs.lpLimits.min\r\n        )\r\n      ) {\r\n        return {\r\n          ...state,\r\n          [currentPlayer]: uiConfigs.lpLimits.min,\r\n          tempLP: uiConfigs.tempLP.init\r\n        }\r\n      }\r\n      // otherwise, substract and update the state\r\n      return {\r\n        ...state,\r\n        [currentPlayer]: currentPlayerLP - LPToCalculate,\r\n        tempLP: uiConfigs.tempLP.init\r\n      }\r\n\r\n    case actionTypes.RESTART:\r\n      // in order to set the LP for a new duel, we need to know if the player\r\n      // configged them in <Configs />. Such info is stored in LocalStorage, so,\r\n      // try parsing it. If there is not such a config, use default uiConfigs values.\r\n      const {\r\n        playerConfigs: { initialLifePoints }\r\n      } = getLSasJSObject()\r\n      const { p1, p2 } = !!initialLifePoints\r\n        ? initialLifePoints\r\n        : uiConfigs.initialLP\r\n      // log the action if needed\r\n      dispatchLogAction(\r\n        logActionCreators.log({\r\n          type: lifePointsActionTypes.RESTART,\r\n          text: `[ ${p1} : ${p2} ] Starting new game`,\r\n          timer: isTimerRunning\r\n            ? `${timerObject.hs}:${timerObject.mins}:${timerObject.secs}`\r\n            : \"\"\r\n        })\r\n      )\r\n      // and update state\r\n      return {\r\n        ...state,\r\n        p1,\r\n        p2,\r\n        tempLP: uiConfigs.tempLP.init\r\n      }\r\n\r\n    case actionTypes.CONFIRM_RESTART:\r\n      // check on uiConfigs using isValidRestartCondition() if settings are\r\n      // proper to restart the duel. Toggle a secondary screen to confirm\r\n      // such a restart if settings are correct or do so automatically otherwise.\r\n      // The reason for which we need setTimeout here is to event-queue up\r\n      // toggleSecondScreen. Since it is a UIContext update, we do not want\r\n      // it to collide with the current LPContext update. It must happen\r\n      // synchronously, one after the other.\r\n      setTimeout(() => {\r\n        toggleSecondScreen(\r\n          uiConfigs.togglers.secondaryScreens[\r\n            `${\r\n              isValidRestartCondition(state)\r\n                ? \"restartDuel\"\r\n                : \"confirmRestartDuel\"\r\n            }`\r\n          ]\r\n        )\r\n      }, 0)\r\n      return state\r\n\r\n    case actionTypes.CLEAR:\r\n      // reset tempLP\r\n      return {\r\n        ...state,\r\n        tempLP: uiConfigs.tempLP.init\r\n      }\r\n\r\n    case actionTypes.MODIFY:\r\n      // this action triggers by pressing any <CalcButton /> with an integer as value.\r\n      // If tempLP's length is 4 or more, there is nothing to add to tempLP\r\n      if (state.tempLP.length > 3) return state\r\n      // on tempLP \"0\"\r\n      if (state.tempLP === \"0\") {\r\n        // by clicking on \"00\" or \"000\", we are not supposed to add more zeroes to\r\n        // tempLP, so return (we do not want tempLP being \"00\", \"000\" or \"0000\")\r\n        if (value === \"00\" || value === \"000\") return state\r\n        // otherwise override tempLP to the selected number (as string)\r\n        // (case tempLP being length === 1)\r\n        return {\r\n          ...state,\r\n          tempLP: value\r\n        }\r\n      }\r\n      // on tempLP of at least 2 numbers (as string), and while attempting\r\n      // to append \"00\" or \"000\" to tempLP with those <CalcButtons />\r\n      if (state.tempLP.length > 1 && (value === \"00\" || value === \"000\")) {\r\n        // append \"0\"s to tempLP up to length === 4 and set state with it.\r\n        // (tempLP being \"45\" and tapping \"00\" will result in tempLP === \"4500\")\r\n        // (tempLP being \"45\" and tapping \"000\" will lead to the same result)\r\n        let completeValue = state.tempLP\r\n        while (completeValue.length < 4) completeValue += \"0\"\r\n        return {\r\n          ...state,\r\n          tempLP: completeValue\r\n        }\r\n      }\r\n      // on any other case, append the value to what's already in tempLP\r\n      // (cases where you add one more number to tempLP regularly)\r\n      return {\r\n        ...state,\r\n        tempLP: state.tempLP + value\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function getLifePointsAudioTrack() {\r\n  return \"Oinkify Agus-style!\"\r\n}\r\n","import React, { createContext, useState } from \"react\"\r\nimport useLPReducer from \"../hooks/useLPReducer\"\r\nimport useLogReducer from \"../hooks/useLogReducer\"\r\nimport uiConfigs from \"../utils/ui.configs.json\"\r\n\r\nexport const LPContext = createContext({\r\n  lpState: {},\r\n  dispatchLPAction: () => {},\r\n  switchState: false,\r\n  setSwitch: () => {},\r\n  lpLog: {},\r\n  dispatchLogAction: () => {}\r\n})\r\n\r\nexport function LPContextProvider({ children }) {\r\n  // grab lifepoints state and action dispatcher from its specific reducer hook\r\n  const [lpState, dispatchLPAction] = useLPReducer()\r\n  // create a context-handled state for lifepoints logging, since it is needed\r\n  // across components.\r\n  const [switchState, setSwitch] = useState(false)\r\n  // generate a log reducer state and action dispatcher for lifepoints actions\r\n  const [lpLog, dispatchLogAction] = useLogReducer(\r\n    uiConfigs.localStorageLogsObjectKeys.logHistory,\r\n    null,\r\n    {\r\n      logState: false,\r\n      logType: \"\",\r\n      logText: \"\",\r\n      logIgTimer: \"\"\r\n    }\r\n  )\r\n  // join everything that needs to be passed across components as context\r\n  const passedContext = {\r\n    lpState,\r\n    dispatchLPAction,\r\n    switchState,\r\n    setSwitch,\r\n    lpLog,\r\n    dispatchLogAction\r\n  }\r\n  // and return the provider with that context object\r\n  return (\r\n    <LPContext.Provider value={passedContext}>{children}</LPContext.Provider>\r\n  )\r\n}\r\n","import { useReducer, useEffect, useContext } from \"react\"\r\nimport { LocalStorageContext } from \"../contexts/LocalStorageContext\"\r\nimport lpReducer from \"../store/LifePoints/lifePointsReducer\"\r\nimport uiConfigs from \"../utils/ui.configs.json\"\r\n\r\nexport default function useLPReducer() {\r\n  // grab current lifepoints in LocalStorage object (retrieved by LocalStorageContext)\r\n  // at mount, and create the reducer with that and temporal life points as state\r\n  const { currentLP, updateLSandGetLSasJSObj } = useContext(LocalStorageContext)\r\n  const [lpState, dispatchLPAction] = useReducer(lpReducer, {\r\n    ...currentLP,\r\n    tempLP: uiConfigs.tempLP.init\r\n  })\r\n\r\n  // at any time lifepoints of any player are modified, update LocalStorage with the new values\r\n  useEffect(() => {\r\n    updateLSandGetLSasJSObj({\r\n      key: uiConfigs.localStorageConfigsObjectKeys.currentLP,\r\n      value: { p1: lpState.p1, p2: lpState.p2 },\r\n      overrideValue: true\r\n    })\r\n  }, [lpState.p1, lpState.p2, updateLSandGetLSasJSObj])\r\n\r\n  return [lpState, dispatchLPAction]\r\n}\r\n","import * as lifePointsActionTypes from \"./lifePointsActionTypes\"\r\n\r\n/* incPayload: { \r\n    dispatchLogAction, currentplayer, isTimerRunning, \r\n    timerObject, value \r\n  }\r\n*/\r\nexport const inc = (incPayload) => ({\r\n  type: lifePointsActionTypes.INC,\r\n  payload: incPayload\r\n})\r\n\r\n/* decPayload: { \r\n    dispatchLogAction, currentplayer, isTimerRunning, \r\n    timerObject, value \r\n  }\r\n*/\r\nexport const dec = (decPayload) => ({\r\n  type: lifePointsActionTypes.DEC,\r\n  payload: decPayload\r\n})\r\n\r\n/* restartPayload: { \r\n    isTimerRunning, timerObject, dispatchLogAction, \r\n    dispatchLPAction, getLSasJSObject\r\n  }\r\n*/\r\nexport const restart = (restartPayload) => ({\r\n  type: lifePointsActionTypes.RESTART,\r\n  payload: restartPayload\r\n})\r\n\r\n/* confirmRestartPayload: { toggleSecondScreen } */\r\nexport const confirmRestart = (confirmRestartPayload) => ({\r\n  type: lifePointsActionTypes.CONFIRM_RESTART,\r\n  payload: confirmRestartPayload\r\n})\r\n\r\n/* modifyPayload: { value } */\r\nexport const modify = (modifyPayload) => ({\r\n  type: lifePointsActionTypes.MODIFY,\r\n  payload: modifyPayload\r\n})\r\n\r\n/* clearPayload: null */\r\nexport const clear = () => ({\r\n  type: lifePointsActionTypes.CLEAR,\r\n  payload: {}\r\n})\r\n\r\n/**\r\n * Switch to map upcoming CalcButton types -which are named on lifepoints\r\n * action types- to their respective action creator functions\r\n * */\r\nexport const getLifePointsActionByType = (type) => {\r\n  switch (type) {\r\n    case lifePointsActionTypes.INC:\r\n      return inc\r\n    case lifePointsActionTypes.DEC:\r\n      return dec\r\n    case lifePointsActionTypes.RESTART:\r\n      return restart\r\n    case lifePointsActionTypes.CONFIRM_RESTART:\r\n      return confirmRestart\r\n    case lifePointsActionTypes.MODIFY:\r\n      return modify\r\n    case lifePointsActionTypes.CLEAR:\r\n      return clear\r\n    default:\r\n      return () => {}\r\n  }\r\n}\r\n","import styles from \"./RestartConfirmScreen.module.css\"\r\n\r\nexport const classes = {\r\n  restartConfirm: [styles.Message, styles.ConfirmMsg].join(\" \"),\r\n  button: (isMqPortrait) => [\r\n    isMqPortrait ? \"oneInRow\" : \"twoInRow\",\r\n    \"letterSpacing\",\r\n    \"flex-center\"\r\n  ]\r\n}\r\n","import React, { useContext, useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { MediaQuery } from \"../../../contexts/MediaQueryContext\"\r\nimport { TimerContext } from \"../../../contexts/TimerContext\"\r\nimport { LPContext } from \"../../../contexts/LPContext\"\r\nimport { LocalStorageContext } from \"../../../contexts/LocalStorageContext\"\r\nimport * as lifePointsActionCreators from \"../../../store/LifePoints/lifePointsActionCreators\"\r\nimport { restartConfirm } from \"../../../utils/utilityObjects\"\r\nimport Button from \"../../UI/Button/Button\"\r\nimport tick from \"../../../assets/uiIcons/tick.svg\"\r\nimport cross from \"../../../assets/uiIcons/cross.svg\"\r\nimport { classes } from \"./RestartConfirmScreen.utils\"\r\nimport styles from \"./RestartConfirmScreen.module.css\"\r\n\r\nexport default function RestartConfirmScreen({ toggleSecondScreen, confirm }) {\r\n  // <Button />s adjust to device orientation (mq).\r\n  // Restarting modifies both players tracked lifepoints and dispatch logging and\r\n  // lifepoints reducer actions (dispatchLogAction, dispatchLPAction).\r\n  // Logging action requires the timer object and current timer running state\r\n  // (timerObject, isTimerRunning).\r\n  // Finally, to modify players lifepoints in local storage, we need to know\r\n  // if they are initially valid as to restart the duel (getLSasJSObject)\r\n  const { mq } = useContext(MediaQuery)\r\n  const { dispatchLogAction, dispatchLPAction } = useContext(LPContext)\r\n  const { isTimerRunning, timerObject } = useContext(TimerContext)\r\n  const { getLSasJSObject } = useContext(LocalStorageContext)\r\n\r\n  const resetGameAndToggleScreen = useCallback(() => {\r\n    // dispatch restart action in LP reducer and toggle Secondary Screen off\r\n    dispatchLPAction(\r\n      lifePointsActionCreators.restart({\r\n        isTimerRunning,\r\n        timerObject,\r\n        dispatchLogAction,\r\n        getLSasJSObject,\r\n        dispatchLPAction\r\n      })\r\n    )\r\n    toggleSecondScreen()\r\n  }, [\r\n    toggleSecondScreen,\r\n    isTimerRunning,\r\n    timerObject,\r\n    dispatchLPAction,\r\n    dispatchLogAction,\r\n    getLSasJSObject\r\n  ])\r\n\r\n  return (\r\n    <>\r\n      {confirm ? (\r\n        <div className={classes.restartConfirm}>{restartConfirm.message}</div>\r\n      ) : (\r\n        <>\r\n          <div className={styles.Message}> Start a new duel? </div>\r\n          <div className={styles.Buttons}>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={resetGameAndToggleScreen}\r\n              classNames={classes.button(mq.portrait)}\r\n            >\r\n              Restart\r\n              <img\r\n                className={styles.TickImage}\r\n                src={tick}\r\n                alt=\"start new duel\"\r\n              />\r\n            </Button>\r\n            <Button\r\n              type=\"secondary\"\r\n              onClick={toggleSecondScreen}\r\n              classNames={classes.button(mq.portrait)}\r\n            >\r\n              Cancel\r\n              <img className={styles.CancelImage} src={cross} alt=\"cancel\" />\r\n            </Button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nRestartConfirmScreen.propTypes = {\r\n  toggleSecondScreen: PropTypes.func.isRequired,\r\n  confirm: PropTypes.bool.isRequired\r\n}\r\n","import React, { useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport useAudio from \"../../../hooks/useAudio\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport SecondaryScreen from \"../../UI/SecondaryScreen/SecondaryScreen\"\r\nimport DiceScreen from \"../DiceScreen/DiceScreen\"\r\nimport CoinScreen from \"../CoinScreen/CoinScreen\"\r\nimport TokenScreen from \"../TokenScreen/TokenScreen\"\r\nimport TimerScreen from \"../TimerScreen/TimerScreen\"\r\nimport RestartConfirmScreen from \"../RestartConfirmScreen/RestartConfirmScreen\"\r\nimport clickOKmp3 from \"../../../assets/audios/clickOK.mp3\"\r\nimport clickCancelmp3 from \"../../../assets/audios/clickCancel.mp3\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\n\r\nexport default function SecondaryScreens({\r\n  secondScreenType, // <string> UIContext Secondary Screen toggler types\r\n  secondScreenState, // <boolean> UIContext Secondary Screen toggled state\r\n  toggleSecondScreen, // <function> secondary screen toggler\r\n  dispatchToastAction, // <function> toast reducer action dispatcher\r\n  switchSFX, // <object> switch sound effect audio controls\r\n  modalSFX, // <object> modal sound effect audio controls\r\n  playSFXs // <boolean> universal sound effect's ON/OFF state\r\n}) {\r\n  const togglers = uiConfigs.togglers.secondaryScreens\r\n  // one toggler should be on at a time, all others off. This triggers the\r\n  // respective second screen to open\r\n  const isDiceSecondScreen = secondScreenType === togglers.die\r\n  const isCoinSecondScreen = secondScreenType === togglers.coin\r\n  const isTokenSecondScreen = secondScreenType === togglers.token\r\n  const isTimerSecondScreen = secondScreenType === togglers.timer\r\n  const isRestartSecondScreen =\r\n    secondScreenType === togglers.restartDuel ||\r\n    secondScreenType === togglers.confirmRestartDuel\r\n  // sound effect to play on \"confirm\" or \"OK\"\r\n  const [clickOKAudioJSX, clickOKSFX] = useAudio(clickOKmp3, {\r\n    toggleOn: playSFXs\r\n  })\r\n  // sound effect to play on \"cancel\"\r\n  const [clickCancelAudioJSX, clickCancelSFX] = useAudio(clickCancelmp3, {\r\n    toggleOn: playSFXs\r\n  })\r\n  // all screens rendered by SecondaryScreen need sound effect objects and\r\n  // toast action dispatcher, so construct an object and pass it to them\r\n  const props = {\r\n    switchSFX,\r\n    clickOKSFX,\r\n    clickCancelSFX,\r\n    playSFXs,\r\n    dispatchToastAction\r\n  }\r\n\r\n  const handleToggleToast = useCallback(() => {\r\n    // toast toggler action dispatcher to assign to \"X\" (close button)\r\n    dispatchToastAction(toastActionCreators.closeToast())\r\n  }, [dispatchToastAction])\r\n\r\n  return (\r\n    <>\r\n      {secondScreenState && (\r\n        <>\r\n          <SecondaryScreen\r\n            toggle={toggleSecondScreen}\r\n            animation=\"scale\"\r\n            sfxObj={modalSFX}\r\n            small={isRestartSecondScreen}\r\n            onClose={handleToggleToast}\r\n          >\r\n            {isDiceSecondScreen && <DiceScreen {...props} />}\r\n            {isCoinSecondScreen && <CoinScreen {...props} />}\r\n            {isTokenSecondScreen && <TokenScreen {...props} />}\r\n            {isTimerSecondScreen && <TimerScreen {...props} />}\r\n            {isRestartSecondScreen && (\r\n              <RestartConfirmScreen\r\n                toggleSecondScreen={toggleSecondScreen}\r\n                confirm={secondScreenType === togglers.confirmRestartDuel}\r\n              />\r\n            )}\r\n          </SecondaryScreen>\r\n          {clickOKAudioJSX}\r\n          {clickCancelAudioJSX}\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nSecondaryScreens.propTypes = {\r\n  secondScreenType: PropTypes.string.isRequired,\r\n  secondScreenState: PropTypes.bool.isRequired,\r\n  toggleSecondScreen: PropTypes.func.isRequired,\r\n  dispatchToastAction: PropTypes.func.isRequired,\r\n  switchSFX: PropTypes.object.isRequired,\r\n  modalSFX: PropTypes.object.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired\r\n}\r\n","export const ADD_CARD = \"ADD_CARD\"\r\nexport const REMOVE_CARD = \"REMOVE_CARD\"\r\nexport const MOVE_CARD_BETWEEN_SECTIONS = \"MOVE_CARD_BETWEEN_SECTIONS\"\r\nexport const CHANGE_SECTION = \"CHANGE_SECTION\"\r\nexport const SORT_SECTION = \"SORT_SECTION\"\r\nexport const SWITCH_DECK = \"SWITCH_DECK\"\r\nexport const DELETE_DECK = \"DELETE_DECK\"\r\nexport const ADD_DECK = \"ADD_DECK\"\r\nexport const SET_DECK_NAME = \"SET_DECK_NAME\"\r\nexport const SET_CAN_SAVE = \"SET_CAN_SAVE\"\r\nexport const INITIALIZE_FALLBACK_DECK = \"INITIALIZE_FALLBACK_DECK\"\r\nexport const INITIALIZE_TEST_DECK = \"INITIALIZE_TEST_DECK\"\r\nexport const CLEAR_TEST_DECK = \"CLEAR_TEST_DECK\"\r\nexport const DRAW_TEST_CARD = \"DRAW_TEST_CARD\"\r\n","import * as deckConstructorActionTypes from \"./deckConstructorActionTypes\"\r\nimport { getSlicedArray, shuffleArray } from \"../../utils/utilityFunctions\"\r\nimport { YugiohValidator } from \"../../utils/validators\"\r\nimport {\r\n  getSimpleCardTypeObj,\r\n  getCardQuantityInDeck,\r\n  getCardDefaultSection,\r\n  getCardIndexInSection,\r\n  getStartingDeckSkeleton,\r\n  generateCardTypeMap,\r\n  sortSectionAndCleanMap\r\n} from \"../../utils/yugiohSpecificFunctions\"\r\n\r\nconst fallbackDeck = getStartingDeckSkeleton()\r\n\r\nconst fallbackState = {\r\n  selectedDeckSection: \"main\",\r\n  selectedDeckId: 1,\r\n  sectionWasModified: false,\r\n  canSave: false,\r\n  fallbackDeck: { ...fallbackDeck },\r\n  fallbackTestDeck: []\r\n}\r\n\r\nconst initialState = {\r\n  // keep decks separated to avoid updating a massive array with all decks\r\n  // each time the state of one deck section changes\r\n  deck_1: { main: [], side: [], extra: [], test: [], name: \"\" },\r\n  deck_2: { main: [], side: [], extra: [], test: [], name: \"\" },\r\n  deck_3: { main: [], side: [], extra: [], test: [], name: \"\" },\r\n  ...fallbackState\r\n}\r\n\r\nlet deckKey = \"\"\r\nlet currentDeck = { main: [], side: [], extra: [], test: [], name: \"\" }\r\nlet currentSection = \"\"\r\nlet cardIndexInSection = 0\r\nlet targetCard = {}\r\nlet cardTypeMap = generateCardTypeMap()\r\nlet sectionArrGenerator\r\nconst ygoVal = new YugiohValidator()\r\n\r\nexport default function deckConstructorReducer(state = initialState, action) {\r\n  // reducer was extremely bloated, so I moved the logic below to make each case\r\n  // visibly leaner. You can also see here which cases need the action to work\r\n  switch (action.type) {\r\n    case deckConstructorActionTypes.ADD_CARD:\r\n      return addCardLogic(state, action)\r\n\r\n    case deckConstructorActionTypes.CHANGE_SECTION:\r\n      return changeSectionLogic(state, action)\r\n\r\n    case deckConstructorActionTypes.REMOVE_CARD:\r\n      return removeCardLogic(state, action)\r\n\r\n    case deckConstructorActionTypes.MOVE_CARD_BETWEEN_SECTIONS:\r\n      return moveCardBetweenSectionsLogic(state, action)\r\n\r\n    case deckConstructorActionTypes.SORT_SECTION:\r\n      return sortSectionLogic(state)\r\n\r\n    case deckConstructorActionTypes.SWITCH_DECK:\r\n      return switchDeckLogic(state, action)\r\n\r\n    case deckConstructorActionTypes.DELETE_DECK:\r\n      return deleteDeckLogic(state, action)\r\n\r\n    case deckConstructorActionTypes.ADD_DECK:\r\n      return addDeckLogic(state)\r\n\r\n    case deckConstructorActionTypes.SET_DECK_NAME:\r\n      return setDeckLogic(state, action)\r\n\r\n    case deckConstructorActionTypes.SET_CAN_SAVE:\r\n      return setCanSaveLogic(state, action)\r\n\r\n    case deckConstructorActionTypes.INITIALIZE_FALLBACK_DECK:\r\n      return initializeFallbackDeckLogic(state)\r\n\r\n    case deckConstructorActionTypes.CLEAR_TEST_DECK:\r\n      return clearTestDeckLogic(state)\r\n\r\n    case deckConstructorActionTypes.INITIALIZE_TEST_DECK:\r\n      return initializeTestDeckLogic(state, action)\r\n\r\n    case deckConstructorActionTypes.DRAW_TEST_CARD:\r\n      return drawTestCardLogic(state, action)\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction setCurrentDeckKeyAndValue(state, deckId) {\r\n  // setter function for deckKey and currentDeck global variables\r\n  deckKey = `deck_${deckId ?? state.selectedDeckId}`\r\n  currentDeck = state[deckKey]\r\n}\r\n\r\nfunction getNewSectionArray(\r\n  sectionArr, // <array> an array with all card objects in the target section\r\n  cardIndexInSection, // <number> the index of the target card object in the section\r\n  cardObj, // <object> target card object we are adding/removing/modifying\r\n  cardQuantityInDeck, // <number> sum of all of that cardObj quantity value in the whole deck\r\n  sectionIsAtMaxLimit // <bool> if no more cards can be added in the section (max limit archieved)\r\n) {\r\n  // not passing a card object implies we are removing a card from list. Slice it at index\r\n  if (!cardObj) {\r\n    return getSlicedArray(currentDeck[currentSection], cardIndexInSection)\r\n  }\r\n  // if we got a card object and it exists in the section, then increase its amount by 1\r\n  // Given the case there are 3 copies of that card in the whole deck, then decrease its\r\n  // quantity to 1 in the target section (loop back to 1 copy in the section)\r\n  return cardIndexInSection > -1\r\n    ? getSlicedArray(sectionArr, cardIndexInSection, {\r\n        ...cardObj,\r\n        quantity:\r\n          cardQuantityInDeck < 3 && !sectionIsAtMaxLimit\r\n            ? sectionArr[cardIndexInSection].quantity + 1\r\n            : 1\r\n      })\r\n    : // no index of cardObject in the section signifies there is no such card. Add it\r\n      [...sectionArr, { ...cardObj, quantity: 1 }]\r\n}\r\n\r\nfunction getOriginAndTargetSectionNewArrays(\r\n  cardObj, // <object> target card object we are adding/removing/modifying\r\n  originSection, // <string> the section name the card will move from\r\n  targetSection, // <string> the section name the card will move to\r\n  cardIndexInOriginSection, // <number> the index of the card object in origin section\r\n  cardIndexInTargetSection // <number> the index of the card object in destination section\r\n) {\r\n  return {\r\n    // while moving a card object from origin section, if its quantity is higher than\r\n    // 1, then reduce it by 1. Otherwise, remove the object completely\r\n    [originSection]:\r\n      cardObj.quantity > 1\r\n        ? getSlicedArray(currentDeck[originSection], cardIndexInOriginSection, {\r\n            ...cardObj,\r\n            quantity: cardObj.quantity - 1\r\n          })\r\n        : getSlicedArray(currentDeck[originSection], cardIndexInOriginSection),\r\n    // upon recieving a card object, if target destination section already has one with\r\n    // the same name, increase its quantity by 1. Otherwise, add it to the array.\r\n    [targetSection]:\r\n      cardIndexInTargetSection > -1\r\n        ? getSlicedArray(currentDeck[targetSection], cardIndexInTargetSection, {\r\n            ...currentDeck[targetSection][cardIndexInTargetSection],\r\n            quantity:\r\n              currentDeck[targetSection][cardIndexInTargetSection].quantity + 1\r\n          })\r\n        : [...currentDeck[targetSection], { ...cardObj, quantity: 1 }]\r\n  }\r\n}\r\n\r\nexport function getLastDeckId(state) {\r\n  let lastDeckId = 0\r\n  // take each \"deck_<id>\" key in state, reckon the highest id, and return it + 1\r\n  Object.keys(state).forEach((key) => {\r\n    if (key.slice(0, 5) === \"deck_\" && +key[5] > lastDeckId) {\r\n      lastDeckId = +key[5]\r\n    }\r\n  })\r\n  return ++lastDeckId\r\n}\r\n\r\nfunction addCardLogic(state, action) {\r\n  // do nothing if we are in \"Test\" section. We cannot add cards from there\r\n  if (ygoVal.isSection(state.selectedDeckSection, \"test\")) return state\r\n  // reduce the detailed card object coming from database to just its \"name\", \"type\" and \"qty\"\r\n  targetCard = getSimpleCardTypeObj(action.payload.cardObject)\r\n  // get the default section a card should be added to (e.g. spells to \"main\", fusions to \"extra\")\r\n  const cardDefaultSection = getCardDefaultSection(targetCard.type)\r\n  // if we are sitting in a section a card is compatible with (it can be placed there),\r\n  // set currentSection to that section. Otherwise, use the card default section\r\n  currentSection =\r\n    !ygoVal.isSection(state.selectedDeckSection, cardDefaultSection) &&\r\n    !ygoVal.isSection(state.selectedDeckSection, \"side\")\r\n      ? cardDefaultSection\r\n      : state.selectedDeckSection\r\n  // sync deckKey and currentDeck to current values\r\n  setCurrentDeckKeyAndValue(state)\r\n  // boolean telling us if max card limit for that section was reached (cannot add more cards)\r\n  const sectionIsAtMaxLimit = ygoVal.isMaxLimitInSectionExceeded(\r\n    currentSection,\r\n    currentDeck[currentSection]\r\n  )\r\n  // store the card quantity of all cards that match card-to-add's name across all sections\r\n  const cardQuantityInDeck = getCardQuantityInDeck(\r\n    targetCard.name,\r\n    currentDeck[getCardDefaultSection(targetCard.type)],\r\n    currentDeck.side\r\n  )\r\n  // do nothing if are we attempting to add a card from <CardList /> filter and either\r\n  // no more cards can be added to the section or there are already 3 copies of that card\r\n  if (\r\n    action.payload.isAddingCardFromList &&\r\n    (cardQuantityInDeck > 2 || sectionIsAtMaxLimit)\r\n  ) {\r\n    return state\r\n  }\r\n  // the target card can be added to the deck. Find its index in current section.\r\n  cardIndexInSection = getCardIndexInSection(\r\n    currentDeck[currentSection],\r\n    targetCard.name\r\n  )\r\n  // modify current deck's current section's array with the new card object to add if\r\n  // it was not there before, or with its quantity + 1 if it was already there\r\n  return {\r\n    ...state,\r\n    [deckKey]: {\r\n      ...currentDeck,\r\n      [currentSection]: getNewSectionArray(\r\n        currentDeck[currentSection],\r\n        cardIndexInSection,\r\n        targetCard,\r\n        cardQuantityInDeck,\r\n        sectionIsAtMaxLimit\r\n      )\r\n    },\r\n    sectionWasModified: true, // flag to re-sort cards in section\r\n    canSave: true // flag to activate save state\r\n  }\r\n}\r\n\r\nfunction changeSectionLogic(state, action) {\r\n  // clicking on the same section title is a null action by default.\r\n  // But as a safeguard, block it in reducer too.\r\n  if (action.payload === state.selectedDeckSection) return state\r\n  // we are switching to a new section, update state with it\r\n  return {\r\n    ...state,\r\n    selectedDeckSection: action.payload\r\n  }\r\n}\r\n\r\nfunction removeCardLogic(state, action) {\r\n  // sync deckKey, currentDeck and currentSection to values at this time\r\n  setCurrentDeckKeyAndValue(state)\r\n  currentSection = state.selectedDeckSection\r\n  // find the index of the card to remove inside currentSection's array\r\n  cardIndexInSection = getCardIndexInSection(\r\n    currentDeck[currentSection],\r\n    action.payload\r\n  )\r\n  // remove the card from the section if index was found. Otherwise, do not touch\r\n  // the section array.\r\n  return {\r\n    ...state,\r\n    [deckKey]: {\r\n      ...currentDeck,\r\n      [currentSection]: getNewSectionArray(\r\n        currentDeck[currentSection],\r\n        cardIndexInSection\r\n      )\r\n    },\r\n    sectionWasModified: true, // flag to re-sort cards in section\r\n    canSave: true // flag to activate save state\r\n  }\r\n}\r\n\r\nfunction moveCardBetweenSectionsLogic(state, action) {\r\n  // sync deckKey, currentDeck and currentSection to values at this time\r\n  setCurrentDeckKeyAndValue(state)\r\n  currentSection = state.selectedDeckSection\r\n  // destructure action.payload to dry code\r\n  const { targetSection, cardName } = action.payload\r\n  // find the index of the card to move between sections inside current section's array\r\n  cardIndexInSection = getCardIndexInSection(\r\n    currentDeck[currentSection],\r\n    cardName\r\n  )\r\n  // target it with the out-of-state variable. Dries code and saves it upon removal\r\n  targetCard = currentDeck[currentSection][cardIndexInSection]\r\n  // if the section where the card needs to land after moving it is already at max limit,\r\n  // or the card quantity of the card in current section + the card quantity of the card\r\n  // in target section > maximum quantity of cards with same name (normally 3), do nothing\r\n  if (\r\n    ygoVal.isMaxLimitInSectionExceeded(\r\n      targetSection,\r\n      currentDeck[targetSection]\r\n    ) ||\r\n    ygoVal.isCardLimitInSectionExceeded(targetCard, currentDeck[targetSection])\r\n  ) {\r\n    return state\r\n  }\r\n  // find the index of the card to move between sections inside the array of the section\r\n  // it will be moved to\r\n  const cardIndexInTargetSection = getCardIndexInSection(\r\n    currentDeck[targetSection],\r\n    cardName\r\n  )\r\n  // construct new arrays for both the array where the card was moved from and the array\r\n  // where the card was moved to\r\n  const newArrays = getOriginAndTargetSectionNewArrays(\r\n    targetCard,\r\n    currentSection,\r\n    targetSection,\r\n    cardIndexInSection,\r\n    cardIndexInTargetSection\r\n  )\r\n  // set both new arrays to the current section and the section where the card was moved to\r\n  return {\r\n    ...state,\r\n    [deckKey]: {\r\n      ...currentDeck,\r\n      [currentSection]: newArrays[currentSection],\r\n      [targetSection]: newArrays[targetSection]\r\n    },\r\n    sectionWasModified: true, // flag to re-sort cards in section\r\n    canSave: true // flag to activate save state\r\n  }\r\n}\r\n\r\nfunction sortSectionLogic(state) {\r\n  // \"main\", \"side\" and \"extra\" deck sections are the only ones capable of sorting\r\n  if (state.selectedDeckSection === \"test\") return state\r\n  // sync deckKey and currentDeck to values at this time\r\n  setCurrentDeckKeyAndValue(state)\r\n  // cosntruct a generator for cardTypeMap given all card objects in current section\r\n  sectionArrGenerator = sortSectionAndCleanMap(\r\n    currentDeck[state.selectedDeckSection],\r\n    cardTypeMap\r\n  )\r\n  // store the newly sorted array coming from first yield\r\n  const sortedSection = sectionArrGenerator.next().value\r\n  // clean up and reconstruct cardTypeMap with the second yield\r\n  cardTypeMap = sectionArrGenerator.next().value\r\n  // set the new sorted array to the deck section we are currently in\r\n  return {\r\n    ...state,\r\n    [deckKey]: {\r\n      ...currentDeck,\r\n      [state.selectedDeckSection]: sortedSection\r\n    },\r\n    sectionWasModified: false // flag as NOT to re-sort the section. We did it here\r\n  }\r\n}\r\n\r\nfunction switchDeckLogic(state, action) {\r\n  // if the current selected deck can be saved and we switch to a different deck,\r\n  // we assign the former stored deck its fallback state (that is, with no changes).\r\n  // On the contrary, if the deck was saved before switching to a new one, we just\r\n  // keep it as it is in state at the time of switching to a new one.\r\n  // Default all relevant state values needed for a fresh new deck load.\r\n  return {\r\n    ...state,\r\n    [`deck_${state.selectedDeckId}`]: state.canSave\r\n      ? { ...state.fallbackDeck }\r\n      : state[`deck_${state.selectedDeckId}`],\r\n    fallbackDeck: state[`deck_${action.payload}`],\r\n    selectedDeckId: action.payload,\r\n    selectedDeckSection: \"main\",\r\n    sectionWasModified: false,\r\n    canSave: false\r\n  }\r\n}\r\n\r\nfunction deleteDeckLogic(state, action) {\r\n  // counter to reassign all ids in ascending order\r\n  let i = 0\r\n  // map all keys in state\r\n  let arrayStateObj = Object.entries(state).reduce((acc, keyValPair) => {\r\n    // grab their beginning 5 characters (\"deck_\", \"fallb\", \"selec\" and the likes)\r\n    const deckString = keyValPair[0].slice(0, 5)\r\n    // if they match the key of the deck to be deleted or anything that is not a deck\r\n    // key, ignore it\r\n    if (keyValPair[0] === action.payload || deckString !== \"deck_\") {\r\n      return acc\r\n    }\r\n    // each remaining deck key is appended a counter in ascending fashion, beginning\r\n    // with 1. \"deck_1\", \"deck_2\", and so on. Keep in mind the deleted deck is no longer\r\n    // present, and the deck key that came after it now holds its key.\r\n    return { ...acc, [deckString + ++i]: keyValPair[1] }\r\n  }, {})\r\n  // given the case there are no decks left (we deleted the only deck remaning), then\r\n  // \"deck_1\" will not be present in state. So, manually add it as default.\r\n  // This assures there will always be one deck both in state and in Local Storage\r\n  if (!arrayStateObj.deck_1) {\r\n    arrayStateObj = { ...arrayStateObj, deck_1: { ...fallbackDeck } }\r\n  }\r\n  // Now, if we deleted a deck that was not the one loaded and was not the first one\r\n  // in list, keep the selected one loaded on screen. Otherwise, default the selection\r\n  // to the previous deck in list.\r\n  const deletedDeckId = +action.payload[5] // deck's id (deck_<id>)\r\n  let newSelectedDeckId = 0\r\n  if (state.selectedDeckId >= deletedDeckId && state.selectedDeckId !== 1) {\r\n    newSelectedDeckId = state.selectedDeckId - 1\r\n  } else if (state.selectedDeckId < deletedDeckId) {\r\n    newSelectedDeckId = state.selectedDeckId\r\n  } else {\r\n    newSelectedDeckId = 1\r\n  }\r\n  // finally, use all data to recreate state\r\n  return {\r\n    ...arrayStateObj,\r\n    ...fallbackState,\r\n    selectedDeckId: newSelectedDeckId\r\n  }\r\n}\r\n\r\nfunction addDeckLogic(state) {\r\n  // grab the id of the last deck in state (number after \"deck_\")\r\n  const lastDeckId = getLastDeckId(state)\r\n  // if there were unsaved changes in the loaded deck at the moment of adding, assign\r\n  // the former stored deck its fallback state (that is, with no changes). Otherwise,\r\n  // keep the deck as is in state.\r\n  // Create a new \"deck_<id>\" key in state with \"name\" being \"Deck <lastDeckId>\". Set\r\n  // all of its other values as default. Sync selectedDeckId to its id and selectedDeckSection\r\n  // to \"main\" (always default on load). Flag of no changes to be saved.\r\n  return {\r\n    ...state,\r\n    [`deck_${state.selectedDeckId}`]: state.canSave\r\n      ? { ...state.fallbackDeck }\r\n      : state[`deck_${state.selectedDeckId}`],\r\n    [`deck_${lastDeckId}`]: { ...fallbackDeck, name: `Deck ${lastDeckId}` },\r\n    selectedDeckId: lastDeckId,\r\n    selectedDeckSection: \"main\",\r\n    canSave: false\r\n  }\r\n}\r\n\r\nfunction setDeckLogic(state, action) {\r\n  // sync deckKey and currentDeck to values at this time\r\n  setCurrentDeckKeyAndValue(state)\r\n  // simply modify loaded deck's name to the one assigned and flag save state\r\n  return {\r\n    ...state,\r\n    [deckKey]: {\r\n      ...currentDeck,\r\n      name: action.payload\r\n    },\r\n    canSave: true\r\n  }\r\n}\r\n\r\nfunction setCanSaveLogic(state, action) {\r\n  // on an already truthy save state (canSave)\r\n  if (state.canSave) {\r\n    // and a truthy payload, do nothing\r\n    if (action.payload) return state\r\n    // falsy payload means we are indeed saving the deck. Update fallbackDeck\r\n    else\r\n      return {\r\n        ...state,\r\n        canSave: action.payload,\r\n        fallbackDeck: state[`deck_${state.selectedDeckId}`]\r\n      }\r\n  }\r\n  // any other case, if canSave is falsy, set it to true\r\n  return {\r\n    ...state,\r\n    canSave: action.payload\r\n  }\r\n}\r\n\r\nfunction initializeFallbackDeckLogic(state) {\r\n  // sync fallbackDeck to the currently loaded deck\r\n  return {\r\n    ...state,\r\n    fallbackDeck: state[`deck_${state.selectedDeckId}`]\r\n  }\r\n}\r\n\r\nfunction clearTestDeckLogic(state) {\r\n  // if \"test\" section in currently loaded deck contains at least one card,\r\n  // clear that section by setting an empty array to it.\r\n  if (state[`deck_${state.selectedDeckId}`].test.length) {\r\n    return {\r\n      ...state,\r\n      [state[`deck_${state.selectedDeckId}`]]: {\r\n        ...state[`deck_${state.selectedDeckId}`],\r\n        test: []\r\n      }\r\n    }\r\n  }\r\n  // if it is already clean, do nothing\r\n  return state\r\n}\r\n\r\nfunction initializeTestDeckLogic(state, action) {\r\n  // sync deckKey and currentDeck to values at this time\r\n  setCurrentDeckKeyAndValue(state)\r\n  // now, understand that \"Test\" section is different from the others in a way that\r\n  // card objects with the same name are not grouped into one with its quantity ===\r\n  // to the amount of cards that share that name, but it holds all individual card\r\n  // objects with quantity === 1. This is so as to be able to handle \"shuffle\" and\r\n  // \"draw\" actions in a way where cards are displayed properly, one by one.\r\n  let curCard = []\r\n  // \"test\" section is designed to, indeed, test hands of cards in \"main\" section.\r\n  // So, reduce it into a single array of card objects all with quantity === 1,\r\n  // in the same fashion explained above\r\n  const currentTestDeck = currentDeck.main.reduce((deck, cardObj) => {\r\n    curCard = []\r\n    for (let i = 0; i < cardObj.quantity; i++)\r\n      curCard.push({\r\n        ...cardObj,\r\n        reactKey: cardObj.name + Math.random(), // before we used the name as key, now we need a unique one\r\n        quantity: 1\r\n      })\r\n    return [...deck, ...curCard]\r\n  }, [])\r\n  // once constructed, shuffle the array\r\n  shuffleArray(currentTestDeck)\r\n  // action.payload is a boolean. True means we are shuffling the deck (passing cards)\r\n  // from fallbackTestDeck to \"test\" section. False is the other way round: we are\r\n  // cleaning \"test\" section to re-test cards. Thus, depending on that boolean we clear\r\n  // or populate either \"test\" section or fallbackTestDeck\r\n  return {\r\n    ...state,\r\n    [deckKey]: {\r\n      ...currentDeck,\r\n      test: action.payload ? currentTestDeck : []\r\n    },\r\n    fallbackTestDeck: action.payload ? [] : currentTestDeck\r\n  }\r\n}\r\n\r\nfunction drawTestCardLogic(state, action) {\r\n  // sync deckKey and currentDeck to values at this time\r\n  setCurrentDeckKeyAndValue(state)\r\n  // copy the current \"test\" section in a new array and push the amount of drawn\r\n  // cards (action.payload) from the beginning of fallbackTestDeck to it\r\n  const newTestDeck = [...currentDeck.test]\r\n  newTestDeck.push(state.fallbackTestDeck.slice(0, +action.payload))\r\n  // since we are pushing an array into another array, set \"test\" section as that\r\n  // array, flattened. And since we used cards from fallbackTestDeck, slice them out\r\n  return {\r\n    ...state,\r\n    [deckKey]: {\r\n      ...currentDeck,\r\n      test: newTestDeck.flat()\r\n    },\r\n    fallbackTestDeck: state.fallbackTestDeck.slice(+action.payload)\r\n  }\r\n}\r\n","import * as deckConstructorActionTypes from \"./deckConstructorActionTypes\"\r\n\r\n// cardObject: <object> an object with { name: <string>, type: <string>, quantity: <number> }\r\n// isAddingCardFromList: <boolean> true means we are adding a card from the database-\r\n// fetched card list. On false, we are increasing the card's quantity by its in-deck\r\n// <MiniCircle />\r\nexport const addCard = (cardObject, isAddingCardFromList) => ({\r\n  type: deckConstructorActionTypes.ADD_CARD,\r\n  payload: { cardObject, isAddingCardFromList }\r\n})\r\n\r\n// cardName: <string>\r\nexport const removeCard = (cardName) => ({\r\n  type: deckConstructorActionTypes.REMOVE_CARD,\r\n  payload: cardName\r\n})\r\n\r\n// newSection: <string> \"main\", \"side\", \"extra\" or \"test\"\r\nexport const changeSection = (newSection) => ({\r\n  type: deckConstructorActionTypes.CHANGE_SECTION,\r\n  payload: newSection\r\n})\r\n\r\n// cardName: <string>\r\n// targetSection: <string> either \"main\", \"side\" or \"extra\"\r\nexport const moveCardBetweenSections = (cardName, targetSection) => ({\r\n  type: deckConstructorActionTypes.MOVE_CARD_BETWEEN_SECTIONS,\r\n  payload: { cardName, targetSection }\r\n})\r\n\r\nexport const sortSection = () => ({\r\n  type: deckConstructorActionTypes.SORT_SECTION\r\n})\r\n\r\n// deckId: <number> deck number after \"deck_\" string in state. \"deck_5\" is 5\r\nexport const switchDeck = (deckId) => ({\r\n  type: deckConstructorActionTypes.SWITCH_DECK,\r\n  payload: deckId\r\n})\r\n\r\n// deckKey: <string> deck key in local storage. \"deck_1\", \"deck_2\" and the likes\r\nexport const deleteDeck = (deckKey) => ({\r\n  type: deckConstructorActionTypes.DELETE_DECK,\r\n  payload: deckKey\r\n})\r\n\r\nexport const addDeck = () => ({\r\n  type: deckConstructorActionTypes.ADD_DECK\r\n})\r\n\r\n// newDeckName: <string>\r\nexport const setDeckName = (newDeckName) => ({\r\n  type: deckConstructorActionTypes.SET_DECK_NAME,\r\n  payload: newDeckName\r\n})\r\n\r\n// newSaveState: <boolean> true means changes were made and deck can be saved\r\nexport const setCanSave = (newSaveState) => ({\r\n  type: deckConstructorActionTypes.SET_CAN_SAVE,\r\n  payload: newSaveState\r\n})\r\n\r\nexport const initializeFallbackDeck = () => ({\r\n  type: deckConstructorActionTypes.INITIALIZE_FALLBACK_DECK\r\n})\r\n\r\n// isShufflingDeck: <boolean> true means state.fallbackTestDeck is filled and\r\n// needs to be shuffled and set to state.deck_<id>.test. False is the other way\r\n// round. The \"test\" section needs to be cleared and state.fallbackTestDeck, resetted\r\nexport const intitializeTestDeck = (isShufflingDeck) => ({\r\n  type: deckConstructorActionTypes.INITIALIZE_TEST_DECK,\r\n  payload: isShufflingDeck\r\n})\r\n\r\nexport const clearTestDeck = () => ({\r\n  type: deckConstructorActionTypes.CLEAR_TEST_DECK\r\n})\r\n\r\n// quantity: <number> the amount of cards to remove from state.fallbackTestDeck\r\n// and add to state.deck_<id>.test\r\nexport const drawTestCard = (quantity) => ({\r\n  type: deckConstructorActionTypes.DRAW_TEST_CARD,\r\n  payload: quantity\r\n})\r\n","import React, {\r\n  createContext,\r\n  useEffect,\r\n  useState,\r\n  useReducer,\r\n  useContext,\r\n  useCallback\r\n} from \"react\"\r\nimport useLocalStorage from \"../hooks/useLocalStorage\"\r\nimport useFetch from \"../hooks/useFetch\"\r\nimport { UIContext } from \"./UIContext\"\r\nimport deckConstructorReducer from \"../store/DeckConstructor/deckConstructorReducer\"\r\nimport * as deckConstructorActionCreators from \"../store/DeckConstructor/deckConstructorActionCreators\"\r\nimport * as toastActionCreators from \"../store/Toast/toastActionCreators\"\r\nimport { getStartingDeckSkeleton } from \"../utils/yugiohSpecificFunctions\"\r\nimport uiConfigs from \"../utils/ui.configs.json\"\r\n\r\nconst defaultDeck = getStartingDeckSkeleton()\r\nconst defaultLocalStorageStartingDeck = { deck_1: defaultDeck }\r\nlet initialDecksInLocalStorage = {}\r\n\r\nexport const DeckBuilderContext = createContext({\r\n  cardListState: {},\r\n  cardCache: [],\r\n  deckState: {},\r\n  dispatchDeckAction: () => {},\r\n  updateLSandGetLSasJSObj: () => {},\r\n  deleteAndGetLSObject: () => {},\r\n  cardFetchLastDate: {},\r\n  setFetchCardsNewDate: () => {},\r\n  fetchCardList: () => {},\r\n  setCardCache: () => {},\r\n  triggerCardDetailsToast: () => {}\r\n})\r\n\r\nexport function DeckBuilderContextProvider({ children }) {\r\n  const { dispatchToastAction } = useContext(UIContext)\r\n  // state to hold and set date objects as strings, which will be measured against\r\n  // current date to determine if we can refetch cards from database\r\n  const [cardFetchLastDate, setCardFetchLastDate] = useState(\"\")\r\n  // cache to store the cards retrieved from database. It will be immutable unless\r\n  // cards are re-fetched. \"cards\" array down the component line will be modified\r\n  // by filtering this cache\r\n  const [cardCache, setCardCache] = useState([])\r\n  // card database fetch state and fetch function configged with database url\r\n  const [cardListState, fetchCardList] = useFetch(\r\n    uiConfigs.apiConfigs.globalCardListURL\r\n  )\r\n  // \"decks\" localstorage handler functions\r\n  const {\r\n    getLSasJSObject,\r\n    updateLSandGetLSasJSObj,\r\n    deleteAndGetLSObject\r\n  } = useLocalStorage(\r\n    uiConfigs.localStorageDecksKeyName,\r\n    uiConfigs.initialDecksLocalStorage\r\n  )\r\n  // \"configs\" localstorage handler functions\r\n  const configsLS = useLocalStorage(\r\n    uiConfigs.localStorageConfigsKeyName,\r\n    uiConfigs.initialConfigsLocalStorage\r\n  )\r\n  // reducer state and action dispatcher for this component tree.\r\n  // Initial state needs to be calculated with local storage. Function is down below\r\n  const [deckState, dispatchDeckAction] = useReducer(\r\n    deckConstructorReducer,\r\n    getInitialLocalStorage(getLSasJSObject, updateLSandGetLSasJSObj)\r\n  )\r\n\r\n  const setFetchCardsNewDate = useCallback(() => {\r\n    // grab a new date object, update \"configs\" local storage object with it\r\n    // and sync state with that same date\r\n    const currentDateObj = new Date()\r\n    configsLS.updateLSandGetLSasJSObj({\r\n      key: uiConfigs.localStorageConfigsObjectKeys.fetchedCardsLastDate,\r\n      value: [currentDateObj], // as an array to be compatible with all other LS values\r\n      overrideValue: true\r\n    })\r\n    setCardFetchLastDate(currentDateObj)\r\n  }, [configsLS.updateLSandGetLSasJSObj, setCardFetchLastDate])\r\n\r\n  const triggerCardDetailsToast = useCallback(\r\n    // we need to determine which message to show in toast depending on cardCache.\r\n    // Instead of using context hook deep inside nested components, we generate a\r\n    // callback'd function here to be passed down\r\n    (cardObj) => {\r\n      // find the respective card object in cache (list of card objects with all details)\r\n      const detailedCardObj = cardCache.find(\r\n        (card) => card.name === cardObj.name\r\n      )\r\n      // if found, it means we have a compatible object to render <CardSearch /> view.\r\n      // Notify it with a toast and give the user the chance to show it in UI.\r\n      if (detailedCardObj) {\r\n        dispatchToastAction(\r\n          toastActionCreators.setToastState(\r\n            \"Click to show details for\",\r\n            detailedCardObj,\r\n            \"cardInfo\"\r\n          )\r\n        )\r\n        // otherwise, cache does not hold a detailed card object compatible with the card's\r\n        // name (cards weren't fetched from DB or there was an error). Notify the user too.\r\n      } else {\r\n        dispatchToastAction(\r\n          toastActionCreators.setToastState(\r\n            'Cannot display card info. Try reloading the app or resetting cards at \"Configs\" page.',\r\n            null,\r\n            \"cardInfoWarning\"\r\n          )\r\n        )\r\n      }\r\n    },\r\n    [dispatchToastAction, cardCache]\r\n  )\r\n\r\n  useEffect(() => {\r\n    // on mount, parse \"configs\" local storage and retrieve the last date when\r\n    // cards were manually retrieved from database (user fetch)\r\n    const { fetchedCardsLastDate } = configsLS.getLSasJSObject()\r\n    // if fetchedCardsLastDate key has length, it means is not null nor an empty\r\n    // string. So sync state with its value\r\n    if (fetchedCardsLastDate.length) {\r\n      setCardFetchLastDate(fetchedCardsLastDate[0])\r\n    }\r\n    // also on mount, make sure to update to the current value of initialDecksInLocalStorage,\r\n    // which is always sync'd with localStorage decks or the default one if none\r\n    updateLSandGetLSasJSObj({\r\n      key: uiConfigs.localStorageDecksObjectKeys.decks,\r\n      value: initialDecksInLocalStorage\r\n    })\r\n    // and sync fallbackDeck in reducer with the active deck\r\n    dispatchDeckAction(deckConstructorActionCreators.initializeFallbackDeck())\r\n  }, [dispatchDeckAction, setCardFetchLastDate, configsLS.getLSasJSObject])\r\n\r\n  useEffect(() => {\r\n    // whenever cards are re-fetched, update card cache. This is the only instance\r\n    // where card cache should change\r\n    cardListState.data && setCardCache(cardListState.data)\r\n  }, [cardListState.data])\r\n\r\n  // unite all values to be provided by this context into an object\r\n  const passedContext = {\r\n    cardListState,\r\n    cardCache,\r\n    deckState,\r\n    dispatchDeckAction,\r\n    updateLSandGetLSasJSObj,\r\n    deleteAndGetLSObject,\r\n    cardFetchLastDate,\r\n    setFetchCardsNewDate,\r\n    fetchCardList,\r\n    setCardCache,\r\n    triggerCardDetailsToast\r\n  }\r\n\r\n  return (\r\n    <DeckBuilderContext.Provider value={passedContext}>\r\n      {children}\r\n    </DeckBuilderContext.Provider>\r\n  )\r\n}\r\n\r\nfunction getInitialLocalStorage(localStorageGetter) {\r\n  // get \"decks\" local storage values (all \"deck_<id>\" objects)\r\n  const { decks } = localStorageGetter()\r\n  // if there were at least one, assign them to initialDecksInLocalStorage,\r\n  // otherwise create a new default deck object and assign it.\r\n  // We keep it in a separate outer variable as we will need to contrast it\r\n  // if local storage keys are deleted at running time (on an app reset)\r\n  initialDecksInLocalStorage = Object.keys(decks).length\r\n    ? decks\r\n    : defaultLocalStorageStartingDeck\r\n  // construct a valid reducer state to initialize it\r\n  return {\r\n    ...initialDecksInLocalStorage,\r\n    selectedDeckId: 1,\r\n    selectedDeckSection: \"main\",\r\n    sectionWasModified: false,\r\n    canSave: false,\r\n    fallbackDeck: defaultDeck,\r\n    fallbackTestDeck: []\r\n  }\r\n}\r\n","import { useState, useEffect } from \"react\"\r\n\r\nexport default function useFetch(url, triggerOn) {\r\n  const [fetchState, setFetchState] = useState({\r\n    data: null,\r\n    isLoading: false,\r\n    hasError: false\r\n  })\r\n\r\n  async function fetchData() {\r\n    // set loading state and reset error\r\n    setFetchState({ ...fetchState, isLoading: true, hasError: false })\r\n    try {\r\n      // fetch data and convert it to JSON\r\n      const rawData = await fetch(url)\r\n      const { data } = await rawData.json()\r\n      // set data in state, as well as loading and error to false\r\n      setFetchState({ data, isLoading: false, hasError: false })\r\n      // if we need to do something immediately afterwards, return a resolved promise\r\n      return Promise.resolve(data)\r\n    } catch (err) {\r\n      // set loading to false and error to true, and chain a rejected promise with the error\r\n      setFetchState({ isLoading: false, hasError: true })\r\n      return Promise.reject(err)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // my little brain could not figure out how to avoid code repetition\r\n    // by using the function declared above in this async useEffect\r\n    async function fetchData() {\r\n      setFetchState((prevFetchState) => ({\r\n        ...prevFetchState,\r\n        isLoading: true,\r\n        hasError: false\r\n      }))\r\n      try {\r\n        const rawData = await fetch(url)\r\n        const { data } = await rawData.json()\r\n        setFetchState({ data, isLoading: false, hasError: false })\r\n        return Promise.resolve(data)\r\n      } catch (err) {\r\n        setFetchState({ isLoading: false, hasError: true })\r\n        return Promise.reject(err)\r\n      }\r\n    }\r\n    fetchData() // this triggers a request to database on app's mount\r\n  }, [url, triggerOn])\r\n\r\n  return [fetchState, fetchData]\r\n}\r\n","import { useState, useEffect, useCallback } from \"react\"\r\n\r\n// a hook that listens to double taps (touch devices) or clicks (non-touch)\r\n// devices. It leverages on \"onClick\", reckognized by both, and is needed\r\n// since \"onDoubleClick\" and \"ontouchstart\" are two different events. We\r\n// single them out in one here\r\nexport default function useDoubleTap(configs) {\r\n  const { delayBetweenTaps } = configs\r\n  const [taps, setTaps] = useState(0)\r\n  const [isDoubleTap, setIsDoubleTap] = useState(false)\r\n\r\n  const call = useCallback(\r\n    (doubleTapCallback, singleTapCallback) => {\r\n      // each time a tap happens, increase taps by 1\r\n      setTaps((tap) => tap + 1)\r\n      // if a double tap happened, set its state to false and trigger the callback\r\n      if (isDoubleTap) {\r\n        setIsDoubleTap(false)\r\n        doubleTapCallback()\r\n        // otherwise, if we assigned a callback to single tapping, fire it\r\n      } else {\r\n        singleTapCallback && singleTapCallback()\r\n      }\r\n    },\r\n    [isDoubleTap]\r\n  )\r\n\r\n  useEffect(() => {\r\n    // whenever we hit 1 or more taps, set them back to 0 and set\r\n    // doubleTap to true, which triggers call() above\r\n    if (taps) {\r\n      setTaps(0)\r\n      setIsDoubleTap(true)\r\n    }\r\n    // upon each single tap, wait for a delay. If no new taps happen in that\r\n    // interval, set taps back to 0 and dobuletaps to false again\r\n    const clearClick = setTimeout(() => {\r\n      setTaps(0)\r\n      setIsDoubleTap(false)\r\n    }, delayBetweenTaps || 300)\r\n    // on a new tap timeout is cleared, which means the new tap is indeed\r\n    // a double tap (it happened before setTimout triggered)\r\n    return () => clearTimeout(clearClick)\r\n  }, [taps])\r\n\r\n  // pass the function that controls the taps\r\n  return call\r\n}\r\n","import styles from \"./PlayerNameTag.module.css\"\r\n\r\nexport const classes = {\r\n  span: (propsClassNames) =>\r\n    [styles.Span, propsClassNames?.join(\" \")].join(\" \"),\r\n  inputWithSubmit: (propsContainerClassNames, propsInputClassNames) => ({\r\n    container: [styles.Form, propsContainerClassNames?.join(\" \")],\r\n    input: [styles.Input, propsInputClassNames?.join(\" \")]\r\n  }),\r\n  charLimit: (propsClassNames) =>\r\n    [styles.CharLimit, propsClassNames?.join(\" \")].join(\" \")\r\n}\r\n\r\nexport const inlineStyles = {\r\n  editableSpan: (nameLength) => ({\r\n    filter: `hue-rotate(${-50 + (nameLength * 100) / 24}deg) brightness(${\r\n      175 - nameLength * 6\r\n    }%)`\r\n  })\r\n}\r\n","import React, { useRef, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport usePlayerNameTag from \"../../../hooks/usePlayerNameTag\"\r\nimport useDoubleTap from \"../../../hooks/useDoubleTap\"\r\nimport InputWithSubmit from \"../../UI/InputWithSubmit/InputWithSubmit\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport { classes, inlineStyles } from \"./PlayerNameTag.utils\"\r\n\r\nfunction PlayerNameTag({\r\n  currentPlayer, // <string> Either \"p1\" or \"p2\"\r\n  playerName, // <string> The target player name in PlayerContext\r\n  setPlayerNames, // <function> playerName's setter function\r\n  nameChangeSFX, // <object> useAudio() controls object with two sources (ok and cancel)\r\n  classNames = {} // <object> classNames to apply to elements. Check propTypes below\r\n}) {\r\n  // a ref for the input. usePlayerNameTag needs it to focus on it\r\n  const inputRef = useRef()\r\n  // bring all states and handlers from usePlayerNameTag specific hook to\r\n  // manage <InputWithSubmit />\r\n  const {\r\n    name,\r\n    isEditingInput,\r\n    toggleEditingInput,\r\n    submitNewName,\r\n    handleInputChange\r\n  } = usePlayerNameTag({\r\n    contextPlayerName:\r\n      playerName || uiConfigs.initialPlayerNames[currentPlayer],\r\n    updateContextPlayerNames: setPlayerNames,\r\n    contextCurrentPlayer: currentPlayer,\r\n    inputReference: inputRef,\r\n    maxPlayerNameLength: uiConfigs.calcConfigs.playerNames.maxLength,\r\n    soundEffects: nameChangeSFX\r\n  })\r\n  // bring the double tap/click hook and assign input toggling to it\r\n  const call = useDoubleTap({\r\n    delayBetweenTaps: uiConfigs.timeouts.doubleTapDelay\r\n  })\r\n  const handleDoubleTap = () => call(toggleEditingInput)\r\n\r\n  // if we are on editing state, show the input and a span showing the\r\n  // remaining available characters. If we are not editing, then just\r\n  // show the span with the player name\r\n  return isEditingInput ? (\r\n    <>\r\n      <InputWithSubmit\r\n        value={name}\r\n        reference={inputRef}\r\n        preventDefault\r\n        onChange={handleInputChange}\r\n        onBlur={submitNewName}\r\n        onSubmit={submitNewName}\r\n        autocomplete=\"off\"\r\n        ariaLabel=\"Enter a new name\"\r\n        classNames={classes.inputWithSubmit(classNames.form, classNames.input)}\r\n      />\r\n      <span\r\n        className={classes.charLimit(classNames.charLimit)}\r\n        // adjust hue and brightness between primary and secondary as\r\n        // an extra effect on remaining characters\r\n        style={inlineStyles.editableSpan(name.length)}\r\n      >\r\n        {uiConfigs.calcConfigs.playerNames.maxLength - name.length}\r\n      </span>\r\n    </>\r\n  ) : (\r\n    <span\r\n      data-id={currentPlayer}\r\n      onClick={handleDoubleTap}\r\n      aria-label=\"Player name. Click to edit\"\r\n      className={classes.span(classNames.span)}\r\n    >\r\n      {name}\r\n    </span>\r\n  )\r\n}\r\n\r\nPlayerNameTag.propTypes = {\r\n  currentPlayer: PropTypes.string.isRequired,\r\n  playerName: PropTypes.string,\r\n  setPlayerNames: PropTypes.func.isRequired,\r\n  nameChangeSFX: PropTypes.object.isRequired,\r\n  classNames: PropTypes.shape({\r\n    span: PropTypes.arrayOf(PropTypes.string),\r\n    form: PropTypes.arrayOf(PropTypes.string),\r\n    input: PropTypes.arrayOf(PropTypes.string)\r\n  })\r\n}\r\n\r\nexport default memo(PlayerNameTag)\r\n","import { useState, useEffect } from \"react\"\r\nimport useToggle from \"./useToggle\"\r\nimport { InputValidator } from \"../utils/validators\"\r\n\r\nexport default function usePlayerNameTag({\r\n  contextPlayerName, // The target player name as a string, from PlayerContext\r\n  updateContextPlayerNames, // setPlayerNames function (does not override the other player's name)\r\n  contextCurrentPlayer, // \"p1\" or \"p2\"\r\n  inputReference, // the target input reference\r\n  maxPlayerNameLength, // max name's length\r\n  soundEffects // a useAudio() SFX object with two sources as tracks\r\n}) {\r\n  // state to control input edit toggling.\r\n  const [isEditingInput, toggleEditingInput] = useToggle(false)\r\n  // tag.name will hold the player name to be edited, and tag.fallback\r\n  // its previous state. If the edit is unsuccessful, then tag.name will\r\n  // be set to tag.fallback\r\n  const [tag, setTag] = useState({\r\n    name: contextPlayerName,\r\n    fallback: contextPlayerName\r\n  })\r\n\r\n  function submitNewName() {\r\n    const trimmedName = tag.name.trim()\r\n    // on an invalid name or a string of only empty spaces\r\n    if (\r\n      !new InputValidator(tag.name).isValidPlayerName() ||\r\n      !trimmedName.length\r\n    ) {\r\n      // set name to its previous state and play the \"cancel\" sfx\r\n      setTag({ ...tag, name: tag.fallback })\r\n      soundEffects.setNextSrc(1)\r\n      soundEffects.play()\r\n      // on a valid name\r\n    } else {\r\n      // if the submitted name is not equal to its previous state\r\n      if (!(trimmedName === tag.fallback)) {\r\n        // set both name and previous state to the new value, update LocalStorage\r\n        // to persist changes and play the \"OK\" sfx\r\n        setTag({ name: trimmedName, fallback: trimmedName })\r\n        updateContextPlayerNames({ [contextCurrentPlayer]: trimmedName })\r\n        soundEffects.setNextSrc(0)\r\n        soundEffects.play()\r\n      }\r\n    }\r\n    // on all cases, close the editing state\r\n    toggleEditingInput()\r\n  }\r\n\r\n  function handleInputChange(e) {\r\n    // do not exceed the maximim player length\r\n    if (e.target.value.length > maxPlayerNameLength) return\r\n    // control the input by the name key in tag state\r\n    setTag({\r\n      ...tag,\r\n      name: e.target.value\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    // whenever we start editing, set focus on the input, if any\r\n    isEditingInput && inputReference.current && inputReference.current.focus()\r\n  }, [isEditingInput, inputReference])\r\n\r\n  return {\r\n    name: tag.name,\r\n    isEditingInput,\r\n    toggleEditingInput,\r\n    submitNewName,\r\n    handleInputChange\r\n  }\r\n}\r\n","import styles from \"./LifePointsGauge.module.css\"\r\n\r\nexport const classes = {\r\n  container: (isActive, containerClassNames) =>\r\n    [\r\n      styles.Container,\r\n      isActive ? styles.ActiveContainer : \"\",\r\n      containerClassNames?.join(\" \")\r\n    ].join(\" \"),\r\n  playerTag: (isActive, classNames) => ({\r\n    span: [\r\n      styles.PlayerTag,\r\n      isActive ? styles.ActiveTag : \"\",\r\n      classNames.tag?.join(\" \")\r\n    ],\r\n    form: [\r\n      styles.PlayerTag,\r\n      classNames.tag?.join(\" \"),\r\n      classNames.form?.join(\" \")\r\n    ],\r\n    input: [styles.PlayerTagInput, classNames.input?.join(\" \")],\r\n    charLimit: [styles.PlayerTag, classNames.charLimit?.join(\" \")]\r\n  }),\r\n  progress: (isActive, progressClassNames) =>\r\n    [\r\n      styles.Progress,\r\n      isActive ? styles.ActiveProgress : \"\",\r\n      progressClassNames?.join(\" \")\r\n    ].join(\" \")\r\n}\r\n\r\nexport const inlineStyles = {\r\n  affectedLP: (affectedLPColor) => ({ color: affectedLPColor }),\r\n  progress: (animatedNumberValue, maxLP) => ({\r\n    width: `${getLPProgressBarPercentage(animatedNumberValue, maxLP)}%`\r\n  })\r\n}\r\n\r\n/**\r\n * Gets player's LP progressbar value using its reducer actual LP state and\r\n * the maximum set in LocalStorage object or in default configs\r\n * @param {number} currentLP current player's LP set in reducer\r\n * @param {number} maxLP Maximum LP set in playerConfigs LocalStorage object or default ui.configs.json\r\n */\r\nexport function getLPProgressBarPercentage(currentLP, maxLP) {\r\n  if (maxLP <= currentLP) return 100\r\n  return (currentLP / maxLP) * 100\r\n}\r\n","import React, { memo, useEffect, useState, useRef } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport AnimatedNumber from \"animated-number-react\"\r\nimport PlayerNameTag from \"../PlayerNameTag/PlayerNameTag\"\r\nimport { classes, inlineStyles } from \"./LifePointsGauge.utils\"\r\nimport styles from \"./LifePointsGauge.module.css\"\r\n\r\nfunction LifePointsGauge({\r\n  dataId, // <string> \"p1\" or \"p2\"\r\n  isActive, // <boolean> to set this component as active (to modify LP)\r\n  animatedNumber = {}, // <object> AnimatedNumber config object\r\n  maxLP, // <number> uiConfigs max lifepoints limit\r\n  ariaLabel, // <string> outermost <div> aria-label\r\n  role, // <string> outermost <div> role. Normally \"button\"\r\n  nameChangeSFX, // <object> useAudio() controls object with two sources (ok and cancel)\r\n  playerName, // <string> The target player name in PlayerContext\r\n  setPlayerNames, // <function> setter function from playerName\r\n  classNames = {}, // <object> classNames object. Check propTypes below for its shape\r\n  onClick = () => {} // <function> outermost <div> on click callback\r\n}) {\r\n  // state for the effect of increasing/decreasing life points.\r\n  // Will show the amount of increased/decreased LP and different colors\r\n  // depending on the +/- operation. it will render on isChanging = true\r\n  const [affectedLP, setAffectedLP] = useState({\r\n    lp: animatedNumber.value,\r\n    isChanging: false,\r\n    color: \"#8857fa\"\r\n  })\r\n  // isMounting stops affectedLP to trigger on mount\r\n  const isMounting = useRef(true)\r\n\r\n  useEffect(() => {\r\n    let affectedLPtimeout\r\n    // do nothing on mount\r\n    if (isMounting.current) isMounting.current = false\r\n    // when AnimatedNumber changes, it means lifepoints were affected\r\n    else {\r\n      // calculate the variation between previous lifepoints and current one\r\n      const deltaLP = animatedNumber.value - affectedLP.lp\r\n      // set the proper values for the affected operation span to show\r\n      setAffectedLP({\r\n        lp: deltaLP,\r\n        isChanging: true,\r\n        color: deltaLP <= 0 ? \"#8857fa\" : \"#86f1f1\"\r\n      })\r\n      // and a timeout to hide it and prepare the currect values for the next\r\n      // affection. Sync its dissapearance with the duration of AnimatedNumber effect\r\n      affectedLPtimeout = setTimeout(() => {\r\n        setAffectedLP({\r\n          lp: animatedNumber.value,\r\n          isChanging: false,\r\n          color: \"#8857fa\"\r\n        })\r\n      }, animatedNumber.duration)\r\n    }\r\n    // clear timeout on unmouting\r\n    return () => affectedLPtimeout && clearTimeout(affectedLPtimeout)\r\n  }, [animatedNumber.value])\r\n\r\n  return (\r\n    <div\r\n      data-id={dataId}\r\n      className={classes.container(isActive, classNames.container)}\r\n      aria-label={`${ariaLabel} ${isActive ? \"(active)\" : \"\"}`}\r\n      role={role}\r\n      aria-pressed={isActive}\r\n      onClick={onClick}\r\n    >\r\n      <AnimatedNumber\r\n        value={animatedNumber.value}\r\n        formatValue={animatedNumber.formatValue}\r\n        // on mount do not freeze screen. So, apply no duration\r\n        duration={!isMounting.current ? animatedNumber.duration : 0}\r\n        begin={animatedNumber.begin}\r\n        complete={animatedNumber.complete}\r\n        className={styles.AnimatedNumber}\r\n      />\r\n      {\r\n        // are lifepoints being modified? If so, show the span with the animation\r\n        affectedLP.isChanging && (\r\n          <span\r\n            style={inlineStyles.affectedLP(affectedLP.color)}\r\n            className={styles.AffectedLP}\r\n          >\r\n            {affectedLP.lp}\r\n          </span>\r\n        )\r\n      }\r\n      <PlayerNameTag\r\n        currentPlayer={dataId}\r\n        playerName={playerName}\r\n        setPlayerNames={setPlayerNames}\r\n        nameChangeSFX={nameChangeSFX}\r\n        classNames={classes.playerTag(isActive, classNames)}\r\n      />\r\n      <div\r\n        style={inlineStyles.progress(animatedNumber.value, maxLP)}\r\n        className={classes.progress(isActive, classNames.progress)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nLifePointsGauge.propTypes = {\r\n  dataId: PropTypes.string.isRequired,\r\n  isActive: PropTypes.bool,\r\n  animatedNumber: PropTypes.shape({\r\n    value: PropTypes.number.isRequired,\r\n    formatValue: PropTypes.func.isRequired,\r\n    duration: PropTypes.number.isRequired,\r\n    begin: PropTypes.func,\r\n    complete: PropTypes.func\r\n  }).isRequired,\r\n  maxLP: PropTypes.number.isRequired,\r\n  ariaLabel: PropTypes.string.isRequired,\r\n  role: PropTypes.string.isRequired,\r\n  nameChangeSFX: PropTypes.object.isRequired,\r\n  playerName: PropTypes.string,\r\n  setPlayerNames: PropTypes.func.isRequired,\r\n  classNames: PropTypes.shape({\r\n    container: PropTypes.arrayOf(PropTypes.string),\r\n    tag: PropTypes.arrayOf(PropTypes.string),\r\n    form: PropTypes.arrayOf(PropTypes.string),\r\n    input: PropTypes.arrayOf(PropTypes.string),\r\n    charLimit: PropTypes.arrayOf(PropTypes.string),\r\n    progress: PropTypes.arrayOf(PropTypes.string)\r\n  }),\r\n  onClick: PropTypes.func\r\n}\r\n\r\nexport default memo(LifePointsGauge)\r\n","import styles from \"./LifePoints.module.css\"\r\n\r\nexport const classes = {\r\n  container: (isExpanded) =>\r\n    [styles.Container, isExpanded ? styles.ContainerExpanded : \"\"].join(\" \"),\r\n  p1LPGauge: (isExpanded) => ({\r\n    container: [\r\n      styles.LPContainer,\r\n      isExpanded ? styles.LPContainerExpanded : \"\"\r\n    ],\r\n    tag: [styles.PlayerOneTag],\r\n    input: [styles.PlayerOneTagInput],\r\n    form: [styles.PlayerOneTagForm],\r\n    charLimit: [styles.PlayerOneCharLimit]\r\n  }),\r\n  p2LPGauge: (isExpanded) => ({\r\n    container: [\r\n      styles.LPContainer,\r\n      isExpanded ? styles.LPContainerExpanded : \"\"\r\n    ],\r\n    tag: [styles.PlayerTwoTag],\r\n    input: [styles.PlayerTwoTagInput],\r\n    form: [styles.PlayerTwoTagForm],\r\n    charLimit: [styles.PlayerTwoCharLimit]\r\n  })\r\n}\r\n","import React, {\r\n  useContext,\r\n  useCallback,\r\n  useRef,\r\n  useState,\r\n  useEffect\r\n} from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { LPContext } from \"../../../contexts/LPContext\"\r\nimport { PlayerContext } from \"../../../contexts/PlayerContext\"\r\nimport { LocalStorageContext } from \"../../../contexts/LocalStorageContext\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport useAudio from \"../../../hooks/useAudio\"\r\nimport useLifePointsAudio from \"../../../hooks/useLifePointsAudio\"\r\nimport LifePointsGauge from \"../LifePointsGauge/LifePointsGauge\"\r\nimport lpmp3 from \"../../../assets/audios/lifepoints.mp3\"\r\nimport switchTitlesmp3 from \"../../../assets/audios/switchTitles.mp3\"\r\nimport clickOKmp3 from \"../../../assets/audios/clickOK.mp3\"\r\nimport clickCancelmp3 from \"../../../assets/audios/clickCancel.mp3\"\r\nimport { getPlayerNameWarning } from \"../../../utils/utilityFunctions\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport { classes } from \"./LifePoints.utils\"\r\nimport styles from \"./LifePoints.module.css\"\r\n\r\nexport default function Lifepoints({\r\n  isExpanded, // <boolean> on true, calculator buttons were hidden. View should change accordingly\r\n  playSFXs, // <boolean> universal sound effect's ON/OFF state\r\n  setScreenIsFrozen, // <function> screen freezing toggler\r\n  dispatchToastAction // <function> toast reducer action dispatcher\r\n}) {\r\n  const { lpState } = useContext(LPContext)\r\n  const {\r\n    currentPlayer,\r\n    toggleCurrentPlayer,\r\n    playerNames,\r\n    setPlayerNames\r\n  } = useContext(PlayerContext)\r\n  const { getLSasJSObject } = useContext(LocalStorageContext)\r\n  // isMouting will stop SFXs from playing on mount\r\n  const isMounting = useRef(true)\r\n  // max Lifepoints reference to get the progressbar value inside LifePointsGauge\r\n  const [maxLP, setMaxLP] = useState({ p1: 0, p2: 0 })\r\n  // use useLifePointsAudio to get the correct lifepoint end animation audio sfx\r\n  const { lpChangemp3, lpChangeGameEndmp3 } = useLifePointsAudio()\r\n  // sound effect that plays when lifepoints are being modified\r\n  // (the \"ding ding ding ding ding\")\r\n  const [lpAudioJSX, lpSFX] = useAudio(lpmp3, {\r\n    toggleOn: playSFXs\r\n  })\r\n  // sound effect to toggle between LifePointGauges\r\n  const [toggleAudioJSX, toggleSFX] = useAudio(switchTitlesmp3, {\r\n    toggleOn: playSFXs,\r\n    playbackRate: 1.3\r\n  })\r\n  // sound effect that plays after the first lifepoints modification sfx.\r\n  // (after the \"ding ding ding ding ding\")\r\n  const [lpAnimationEndAudioJSX, lpAnimationEndSFX] = useAudio(lpChangemp3, {\r\n    toggleOn: playSFXs,\r\n    playbackRate: 1.1,\r\n    sources: [lpChangemp3, lpChangeGameEndmp3]\r\n  })\r\n  // sound effects for a successful/failed name change attempt\r\n  const [nameChangeAudioJSX, nameChangeSFX] = useAudio(lpChangemp3, {\r\n    toggleOn: playSFXs,\r\n    playbackRate: 1.5,\r\n    sources: [clickOKmp3, clickCancelmp3]\r\n  })\r\n\r\n  // when clicking in each players' lifepoints gauges, switch them if they\r\n  // are different. Play the toggling SFX if so, too\r\n  const togglePlayer = useCallback(\r\n    (e) => {\r\n      if (e.target.dataset.id && e.target.dataset.id !== currentPlayer) {\r\n        toggleSFX.restart()\r\n        toggleCurrentPlayer()\r\n      }\r\n    },\r\n    [currentPlayer, toggleSFX, toggleCurrentPlayer]\r\n  )\r\n\r\n  // we want no decimals in lifepoints' Animated Numbers\r\n  const formatValue = useCallback((value) => value.toFixed(0), [])\r\n\r\n  const setLPChangeSFXandFreezeScreen = useCallback(\r\n    (currentPlayerLP) => {\r\n      // To avoid memory leaks when unmounting the component, we freeze the screen\r\n      // when the animation is playing.\r\n      // If any player's lifepoints hit 0, the sound effect toggles to the second\r\n      // track. Otherwise, we set it to the first one\r\n      setScreenIsFrozen(true)\r\n      if (!currentPlayerLP) lpAnimationEndSFX.setNextSrc(1)\r\n      else lpAnimationEndSFX.setNextSrc(0)\r\n    },\r\n    [setScreenIsFrozen]\r\n  )\r\n\r\n  const playLPSFXAndUnfreezeScreen = useCallback(() => {\r\n    // we add the extra check here since we cannot stop this effect from playing\r\n    // at mount. isMounting would be set to false by then due to useEffect above.\r\n    // LifePoints will be frozen at mount, this AnimatedNumber will not play (first\r\n    // prevention). playSFXs will be set to false if Sound effects are off, so it\r\n    // will not play after mount either (second prevention)\r\n    if (playSFXs) lpAnimationEndSFX.play()\r\n    setScreenIsFrozen(false)\r\n  }, [lpAnimationEndSFX, setScreenIsFrozen])\r\n\r\n  // grab player configged lifepoints limits from LocalStorage, or set the default\r\n  // ones if there are none. Since this one is the landing page, set its title.\r\n  useEffect(() => {\r\n    const {\r\n      playerConfigs: { initialLifePoints }\r\n    } = getLSasJSObject()\r\n    setMaxLP(!!initialLifePoints ? initialLifePoints : uiConfigs.initialLP)\r\n    document.title = uiConfigs.documentTitle\r\n  }, [getLSasJSObject])\r\n\r\n  useEffect(() => {\r\n    // it might happen that downwards components trigger an error while setting\r\n    // any player name tags. To deal with this issue before the reducer sets\r\n    // the name, we can use a Toast to show a warning to the user\r\n    if (!isMounting.current && playerNames && playerNames[currentPlayer]) {\r\n      const toastText = getPlayerNameWarning(playerNames[currentPlayer])\r\n      toastText &&\r\n        dispatchToastAction(\r\n          toastActionCreators.setToastState(\r\n            toastText,\r\n            null,\r\n            uiConfigs.togglers.toast.logSwitches\r\n          )\r\n        )\r\n    }\r\n  }, [playerNames])\r\n\r\n  useEffect(() => {\r\n    // we do not play lifepoint's inc/dec sound effect on mount, but we do so\r\n    // at any other time they change. If the user repeatedly clicks to affect\r\n    // them when the animation is still playing, then just replay the sound\r\n    // instantly (force stop the previous one, play the next one)\r\n    if (isMounting.current) isMounting.current = false\r\n    else lpSFX.restart()\r\n  }, [lpState.p1, lpState.p2])\r\n\r\n  return (\r\n    <section className={classes.container(isExpanded)}>\r\n      <LifePointsGauge\r\n        dataId=\"p1\"\r\n        isActive={currentPlayer === \"p1\"}\r\n        animatedNumber={{\r\n          value: lpState.p1,\r\n          formatValue,\r\n          duration: uiConfigs.timeouts.animatedNumber,\r\n          begin: () => setLPChangeSFXandFreezeScreen(lpState.p1),\r\n          complete: playLPSFXAndUnfreezeScreen\r\n        }}\r\n        maxLP={maxLP.p1}\r\n        ariaLabel=\"Player 1 lifepoints\"\r\n        role=\"button\"\r\n        nameChangeSFX={nameChangeSFX}\r\n        onClick={togglePlayer}\r\n        playerName={playerNames.p1}\r\n        setPlayerNames={setPlayerNames}\r\n        classNames={classes.p1LPGauge(isExpanded)}\r\n      />\r\n      {!isExpanded && (\r\n        <div aria-label=\"Operation display\" className={styles.LPCalcContainer}>\r\n          {lpState.tempLP}\r\n        </div>\r\n      )}\r\n\r\n      <LifePointsGauge\r\n        dataId=\"p2\"\r\n        isActive={currentPlayer === \"p2\"}\r\n        animatedNumber={{\r\n          value: lpState.p2,\r\n          formatValue,\r\n          duration: uiConfigs.timeouts.animatedNumber,\r\n          begin: () => setLPChangeSFXandFreezeScreen(lpState.p2),\r\n          complete: playLPSFXAndUnfreezeScreen\r\n        }}\r\n        maxLP={maxLP.p2}\r\n        ariaLabel=\"Player 2 lifepoints\"\r\n        role=\"button\"\r\n        nameChangeSFX={nameChangeSFX}\r\n        playerName={playerNames.p2}\r\n        setPlayerNames={setPlayerNames}\r\n        onClick={togglePlayer}\r\n        classNames={classes.p2LPGauge(isExpanded)}\r\n      />\r\n      {lpAudioJSX}\r\n      {lpAnimationEndAudioJSX}\r\n      {toggleAudioJSX}\r\n      {nameChangeAudioJSX}\r\n    </section>\r\n  )\r\n}\r\n\r\nLifepoints.propTypes = {\r\n  isExpanded: PropTypes.bool.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired,\r\n  setScreenIsFrozen: PropTypes.func.isRequired,\r\n  dispatchToastAction: PropTypes.func.isRequired\r\n}\r\n","import { useContext } from \"react\"\r\nimport { DeckBuilderContext } from \"../contexts/DeckBuilderContext\"\r\nimport { getLifePointsAudioTrack } from \"../store/LifePoints/lifePointsReducer\"\r\nimport lpChangemp3 from \"../assets/audios/lpChange.mp3\"\r\nimport lpChangeGameEndmp3 from \"../assets/audios/lpChangeGameEnd.mp3\"\r\nimport lpChangemp4 from \"../assets/audios/openToast.mp3\"\r\nimport lpChangeGameEndmp4 from \"../assets/audios/closeToast.mp3\"\r\n\r\nexport default function useLifePointsAudio() {\r\n  const { deckState } = useContext(DeckBuilderContext)\r\n  return deckState[`deck_${deckState.selectedDeckId}`] &&\r\n    deckState[`deck_${deckState.selectedDeckId}`].name !==\r\n      getLifePointsAudioTrack()\r\n    ? {\r\n        lpChangemp3,\r\n        lpChangeGameEndmp3\r\n      }\r\n    : {\r\n        lpChangemp3: lpChangemp4,\r\n        lpChangeGameEndmp3: lpChangeGameEndmp4\r\n      }\r\n}\r\n","import styles from \"./Toast.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClassNames) =>\r\n    [styles.Container, propsClassNames?.join(\" \")].join(\" \"),\r\n  cross: (propsClassNames) =>\r\n    [styles.Cross, propsClassNames?.join(\" \")].join(\" \"),\r\n  children: (propsClassNames) =>\r\n    [styles.Children, propsClassNames?.join(\" \")].join(\" \")\r\n}\r\n","import React, { useEffect, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { CSSTransition } from \"react-transition-group\"\r\nimport cross from \"../../../assets/uiIcons/cross.svg\"\r\nimport { classes } from \"./Toast.utils\"\r\n\r\nfunction Toast({\r\n  show, // <boolean> on true, this component becomes active (appears on screen)\r\n  toggler, // <function> setter for \"show\" prop. Needed as a callback to close toast on \"X\"\r\n  inactiveTimeout, // <number> timeout to call for \"toggler\", in ms\r\n  children, // <any> component's content\r\n  refreshTimeoutOn, // <boolean> whenever this prop changes, timeout will reset\r\n  classNames = {} // <object> classNames object. Check propTypes below for its constitution\r\n}) {\r\n  useEffect(() => {\r\n    // show triggers the toast (sets it as active). When so, set a timeout to\r\n    // unmount it. Additionally, listen to refreshTimeoutOn to restart\r\n    // that timeout (this keeps the toast active to changes).\r\n    // An alternative would be to listen to children, but the drawback on this\r\n    // approach is that anything that re-renders children will also reset the\r\n    // timer. For example, timer ticking re-renders log texts, so each tick will\r\n    // reset the toast.\r\n    let unmountingTimeout\r\n    if (show) unmountingTimeout = setTimeout(toggler, inactiveTimeout)\r\n    return () => unmountingTimeout && clearTimeout(unmountingTimeout)\r\n  }, [show, refreshTimeoutOn, inactiveTimeout, toggler])\r\n\r\n  return (\r\n    <CSSTransition\r\n      unmountOnExit\r\n      mountOnEnter\r\n      in={show}\r\n      component={null}\r\n      timeout={250}\r\n      classNames=\"toast-in-out\"\r\n    >\r\n      <div className={classes.container(classNames.container)}>\r\n        <div role=\"status\" className={classes.children(classNames.children)}>\r\n          {children}\r\n        </div>\r\n        <img\r\n          src={cross}\r\n          alt=\"Dismiss\"\r\n          role=\"button\"\r\n          className={classes.cross(classNames.cross)}\r\n          onClick={toggler}\r\n        />\r\n      </div>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nToast.propTypes = {\r\n  show: PropTypes.bool.isRequired,\r\n  toggler: PropTypes.func.isRequired,\r\n  inactiveTimeout: PropTypes.number.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n  classNames: PropTypes.shape({\r\n    container: PropTypes.arrayOf(PropTypes.string),\r\n    cross: PropTypes.arrayOf(PropTypes.string),\r\n    children: PropTypes.arrayOf(PropTypes.string)\r\n  })\r\n}\r\n\r\nexport default memo(Toast)\r\n","import styles from \"./Timer.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClassNames) =>\r\n    [styles.Container, propsClassNames?.join(\" \")].join(\" \")\r\n}\r\n","import React, { memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { classes } from \"./Timer.utils\"\r\n\r\nfunction Timer({\r\n  timerObject, // <object> timer reducer's timerObject {hs: <number>, mins: <number>, secs: <number>}\r\n  ariaLabel, // <string> outermost <div> aria-label\r\n  onClick = null, // <function> outermost <div> on click callback\r\n  classNames = [] // <Array> array of className strings\r\n}) {\r\n  return (\r\n    <div\r\n      className={classes.container(classNames)}\r\n      onClick={onClick}\r\n      aria-label={ariaLabel || `Timer`}\r\n    >\r\n      {timerObject.hs + \":\" + timerObject.mins + \":\" + timerObject.secs}\r\n    </div>\r\n  )\r\n}\r\n\r\nTimer.propTypes = {\r\n  timerObject: PropTypes.shape({\r\n    hs: PropTypes.string,\r\n    mins: PropTypes.string,\r\n    secs: PropTypes.string\r\n  }).isRequired,\r\n  classNames: PropTypes.arrayOf(PropTypes.string),\r\n  ariaLabel: PropTypes.string,\r\n  onClick: PropTypes.func\r\n}\r\n\r\nexport default memo(Timer)\r\n","import styles from \"./ProgressBar.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClassNames) =>\r\n    [styles.Container, propsClassNames?.join(\" \")].join(\" \"),\r\n  progress: (propsClassNames) =>\r\n    [styles.Progress, propsClassNames?.join(\" \")].join(\" \"),\r\n  percentage: (propsClassNames) =>\r\n    [styles.Percentage, propsClassNames?.join(\" \")].join(\" \"),\r\n  timer: (propsClassNames) => [styles.Timer, propsClassNames?.join(\" \")]\r\n}\r\n\r\nexport const inlineStyles = {\r\n  container: (currentPercentage, showProgress) => ({\r\n    // progress width in %, and color rotation for extra effect\r\n    width: showProgress ? `${100 - currentPercentage}%` : 0,\r\n    filter: `hue-rotate(${-70 + currentPercentage}deg) opacity(35%)`\r\n  })\r\n}\r\n","import React, { memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Timer from \"../../LifePointsCounter/Timer/Timer\"\r\nimport { classes, inlineStyles } from \"./ProgressBar.utils\"\r\n\r\nfunction ProgressBar({\r\n  currentValue, // <number> current progressbar value\r\n  maxValue, // <number> maximum (total) value\r\n  disabled = false, // <boolean> disabled state\r\n  showTimer = true, // <boolean> true will render <Timer /> component inside progressbar\r\n  showProgress = true, // <boolean> true will \"paint\" the background using \"width\" inline style\r\n  showPercentage = false, // <boolean> true will render a <span> with current progress percentage\r\n  timerConfigs = {}, // <object> <Timer /> required props\r\n  dataId, // string> outermost element's aria-label\r\n  onClick = () => {}, // <function> on click callback\r\n  classNames = {} // <object> classNames object. Check propTypes below for its constitution\r\n}) {\r\n  // sinple progress calculation for width in %\r\n  const currentPercentage = 100 - (currentValue / maxValue) * 100\r\n\r\n  return (\r\n    <div\r\n      className={classes.container(classNames.container)}\r\n      data-id={dataId}\r\n      onClick={disabled ? null : onClick}\r\n    >\r\n      {showTimer && Object.keys(timerConfigs).length && (\r\n        <Timer\r\n          timerObject={timerConfigs.timerObject}\r\n          ariaLabel={timerConfigs.ariaLabel}\r\n          onClick={timerConfigs.onClick}\r\n          classNames={classes.timer(classNames.timer)}\r\n        />\r\n      )}\r\n      <div\r\n        className={classes.progress(classNames.progress)}\r\n        style={inlineStyles.container(currentPercentage, showProgress)}\r\n      />\r\n      {showPercentage && (\r\n        <div className={classes.percentage(classNames.percentage)}>\r\n          {Math.round(Math.floor(100 - currentPercentage))}%\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nProgressBar.propTypes = {\r\n  currentValue: PropTypes.number,\r\n  maxValue: PropTypes.number,\r\n  disabled: PropTypes.bool,\r\n  showTimer: PropTypes.bool,\r\n  showProgress: PropTypes.bool,\r\n  showPercentage: PropTypes.bool,\r\n  timerConfigs: PropTypes.shape({\r\n    hs: PropTypes.number,\r\n    mins: PropTypes.number,\r\n    secs: PropTypes.number\r\n  }),\r\n  dataId: PropTypes.string,\r\n  classNames: PropTypes.shape({\r\n    container: PropTypes.arrayOf(PropTypes.string),\r\n    progress: PropTypes.arrayOf(PropTypes.string),\r\n    percentage: PropTypes.arrayOf(PropTypes.string),\r\n    timer: PropTypes.arrayOf(PropTypes.string)\r\n  }),\r\n  onClick: PropTypes.func\r\n}\r\n\r\nexport default memo(ProgressBar)\r\n","import styles from \"./Slider.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClassNames) =>\r\n    [styles.Container, propsClassNames?.join(\" \")].join(\" \"),\r\n  sliderBar: (propsClassNames) =>\r\n    [styles.SlideBar, propsClassNames?.join(\" \")].join(\" \"),\r\n  selector: (switchState, propsSelectorClassNames, propsSelectorOnClassNames) =>\r\n    [\r\n      styles.SliderSwitchOff,\r\n      propsSelectorClassNames?.join(\" \"),\r\n      switchState\r\n        ? `${styles.SliderSwitchOn} ${propsSelectorOnClassNames.join(\" \")}`\r\n        : \"\"\r\n    ].join(\" \"),\r\n  text: (switchState, propsTextOffClassNames, propsTextOnClasses) =>\r\n    [\r\n      styles.TextOff,\r\n      propsTextOffClassNames?.join(\" \"),\r\n      switchState ? `${styles.TextOn} ${propsTextOnClasses.join(\" \")}` : \"\"\r\n    ].join(\" \")\r\n}\r\n","import React, { useEffect, useRef, memo, useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { classes } from \"./Slider.utils\"\r\n\r\nfunction Slider({\r\n  switchState, // <boolean> not needed if using setState in this component\r\n  setSwitch, // <function> not needed if using setState in this component\r\n  onSwitchOn = () => {}, // <function> callback to trigger when we toggle switch on\r\n  onSwitchOff = () => {}, // <function> callback to trigger when we toggle switch off\r\n  textON, // <string> text to display on switch on\r\n  textOFF, // <string> text to display on switch off\r\n  ariaLabelOn = \"Switch ON\", // <string> aria-label for outermost <div> when switch is on\r\n  ariaLabelOff = \"Switch OFF\", // <string> aria-label for outermost <div> when switch is off\r\n  classNames = {} // <object> classNames object. Check propTypes below for its constitution\r\n}) {\r\n  // uncomment this if you need to use this standalone component\r\n  // (passing no switchState/setSwitch props)\r\n  // const [switchState, setSwitch] = useState(false)\r\n\r\n  // isMounting will prevent SFX to play on mount and switch to auto-toggle\r\n  const isMounting = useRef(true)\r\n\r\n  // switch toggler callback\r\n  const toggleSwitch = useCallback(\r\n    () => setSwitch((switchState) => !switchState),\r\n    [setSwitch]\r\n  )\r\n\r\n  useEffect(() => {\r\n    // do nothing on mount. It will auto-toggle otherwise\r\n    if (isMounting.current) isMounting.current = false\r\n    // trigger onSwitchOn callback if switchState changes to true\r\n    else if (switchState) onSwitchOn()\r\n    // onSwitchOff callback otherwise\r\n    else onSwitchOff()\r\n  }, [switchState, onSwitchOn, onSwitchOff])\r\n\r\n  return (\r\n    <div\r\n      className={classes.container(classNames.container)}\r\n      aria-label={switchState ? ariaLabelOn : ariaLabelOff}\r\n      role=\"switch\"\r\n      aria-checked={switchState}\r\n    >\r\n      <div\r\n        className={classes.sliderBar(classNames.sliderBar)}\r\n        onClick={toggleSwitch}\r\n      >\r\n        <div\r\n          // selector classes by default. selectorOn classes if active\r\n          className={classes.selector(\r\n            switchState,\r\n            classNames.selector,\r\n            classNames.selectorOn\r\n          )}\r\n        />\r\n        <div\r\n          // textOff classes by default. textOn classes if active\r\n          className={classes.text(\r\n            switchState,\r\n            classNames.textOff,\r\n            classNames.textOn\r\n          )}\r\n        >\r\n          {switchState ? textON : textOFF}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nSlider.propTypes = {\r\n  switchState: PropTypes.bool,\r\n  setSwitch: PropTypes.func,\r\n  onSwitchOn: PropTypes.func.isRequired,\r\n  onSwitchOff: PropTypes.func.isRequired,\r\n  textON: PropTypes.string.isRequired,\r\n  textOFF: PropTypes.string.isRequired,\r\n  ariaLabelOn: PropTypes.string,\r\n  ariaLabelOff: PropTypes.string,\r\n  classNames: PropTypes.shape({\r\n    container: PropTypes.arrayOf(PropTypes.string),\r\n    slideBar: PropTypes.arrayOf(PropTypes.string),\r\n    selector: PropTypes.arrayOf(PropTypes.string),\r\n    selectorOn: PropTypes.arrayOf(PropTypes.string),\r\n    textOn: PropTypes.arrayOf(PropTypes.string),\r\n    textOff: PropTypes.arrayOf(PropTypes.string)\r\n  })\r\n}\r\n\r\nexport default memo(Slider)\r\n","import styles from \"./CalculatorLeftSide.module.css\"\r\n\r\nexport const classes = {\r\n  container: (isExpanded) =>\r\n    [styles.Container, isExpanded ? \"\" : styles.Collapsed].join(\" \"),\r\n  slider: (isExpanded) => ({\r\n    container: [\r\n      styles.SliderContainer,\r\n      isExpanded ? \"\" : styles.SliderContainerCollapsed\r\n    ],\r\n    selector: [styles.SliderSelector],\r\n    selectorOn: [styles.SliderSelectorOn],\r\n    textOn: [styles.SliderTextOn],\r\n    textOff: [styles.SliderTextOff]\r\n  }),\r\n  progressBar: (isExpanded) => ({\r\n    container: [\r\n      styles.ProgressBarContainer,\r\n      isExpanded ? \"\" : styles.ProgressBarContainerCollapsed\r\n    ],\r\n    percentage: [styles.ProgressBarPercentage],\r\n    timer: [styles.TimerCounter]\r\n  })\r\n}\r\n","import React, { useState, useEffect, useCallback, useRef, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport * as logActionCreators from \"../../../store/Log/logActionCreators\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport ProgressBar from \"../../UI/ProgressBar/ProgressBar\"\r\nimport Slider from \"../../UI/Slider/Slider\"\r\nimport { getTimerProgressBarValue } from \"../../../utils/utilityFunctions\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport { classes } from \"./CalculatorLeftSide.utils\"\r\n\r\nfunction CalculatorLeftSide({\r\n  isExpanded, // <boolean> on true, calculator buttons were hidden. View should change accordingly\r\n  switchSFX, // <object> switch sound effect audio controls\r\n  toggleSecondScreen, // <function> secondary screen toggler\r\n  timerObject, // <object> current timer object { hs: <number>, mins: <number>, secs: <number>}\r\n  previousInitialTime, // <object> previous time the timer started at { hs: <number>, mins: <number>, secs: <number>}\r\n  isTimerRunning, // <boolean> true if timer has started\r\n  switchState, // <boolean> LPContext switch state to show logging UI\r\n  setSwitch, // <function> switch toggler for switchState\r\n  dispatchLogAction, // <function> log reducer action dispatcher\r\n  dispatchToastAction // <function> toast reducer action dispatcher\r\n}) {\r\n  // state to hold all necessary values to paint the progress bar\r\n  const [progressArray, setProgressArray] = useState([])\r\n  // isMounting will prevent lifepoints log from toggling or playing SFX at mount phase\r\n  const isMounting = useRef(true)\r\n\r\n  const dispatchToggleLPLogAction = useCallback(() => {\r\n    // on mount, do NOT switch nor play its SFX\r\n    if (isMounting.current) isMounting.current = false\r\n    else {\r\n      // ON/OFF log switch happened. Play its SFX, dispatch the log action that\r\n      // toggles it on/off, and the Toast action to notify the user\r\n      switchSFX.play()\r\n      dispatchLogAction(logActionCreators.toggle())\r\n      dispatchToastAction(toastActionCreators.setLogType(\"LIFEPOINTS\"))\r\n    }\r\n  }, [dispatchLogAction, dispatchToastAction, switchSFX.isOn])\r\n\r\n  const handleToggleSecondScreen = useCallback(\r\n    (e) => {\r\n      // we second screen using <ProgressBar />'s data-id as type\r\n      toggleSecondScreen(e.target.dataset.id)\r\n    },\r\n    [toggleSecondScreen]\r\n  )\r\n\r\n  useEffect(() => {\r\n    // we gets all required values to paint the progress bar, and set them in state\r\n    setProgressArray(getTimerProgressBarValue(timerObject, previousInitialTime))\r\n  }, [timerObject, previousInitialTime])\r\n\r\n  return (\r\n    <aside className={classes.container(isExpanded)}>\r\n      <Slider\r\n        switchState={switchState}\r\n        setSwitch={setSwitch}\r\n        onSwitchOn={dispatchToggleLPLogAction}\r\n        onSwitchOff={dispatchToggleLPLogAction}\r\n        textON=\"LOG ON\"\r\n        textOFF=\"LOG OFF\"\r\n        ariaLabelOn=\"Toggle life points log. Current state: ON\"\r\n        ariaLabelOff=\"Toggle life points log. Current state: OFF\"\r\n        classNames={classes.slider(isExpanded)}\r\n      />\r\n      <ProgressBar\r\n        currentValue={progressArray[1]}\r\n        maxValue={progressArray[2]}\r\n        showProgress={\r\n          // we show progressbar only if stated in configs and if timer is not stopped\r\n          uiConfigs.calcConfigs.progressBar.showProgress && isTimerRunning\r\n        }\r\n        showPercentage={\r\n          // we show percentage only if stated in configs and if timer is not stopped\r\n          uiConfigs.calcConfigs.progressBar.showPercentage && isTimerRunning\r\n        }\r\n        showTimer={uiConfigs.calcConfigs.progressBar.showTimer}\r\n        timerConfigs={{\r\n          // if the timer is not frozen, we display the current time in timerobject.\r\n          // Otherwise, we always show the previously used initial time\r\n          timerObject: isTimerRunning ? timerObject : previousInitialTime\r\n        }}\r\n        dataId={uiConfigs.togglers.secondaryScreens.timer}\r\n        classNames={classes.progressBar(isExpanded)}\r\n        onClick={handleToggleSecondScreen}\r\n      />\r\n    </aside>\r\n  )\r\n}\r\n\r\nCalculatorLeftSide.propTypes = {\r\n  isExpanded: PropTypes.bool.isRequired,\r\n  switchSFX: PropTypes.object.isRequired,\r\n  toggleSecondScreen: PropTypes.func.isRequired,\r\n  timerObject: PropTypes.shape({\r\n    hs: PropTypes.string,\r\n    mins: PropTypes.string,\r\n    secs: PropTypes.string\r\n  }).isRequired,\r\n  previousInitialTime: PropTypes.shape({\r\n    hs: PropTypes.string,\r\n    mins: PropTypes.string,\r\n    secs: PropTypes.string\r\n  }).isRequired,\r\n  isTimerRunning: PropTypes.bool.isRequired,\r\n  switchState: PropTypes.bool.isRequired,\r\n  setSwitch: PropTypes.func.isRequired,\r\n  dispatchLogAction: PropTypes.func.isRequired,\r\n  dispatchToastAction: PropTypes.func.isRequired\r\n}\r\n\r\nexport default memo(CalculatorLeftSide)\r\n","import React, { memo, useContext } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { LocalStorageContext } from \"../../../contexts/LocalStorageContext\"\r\nimport { LPContext } from \"../../../contexts/LPContext\"\r\nimport { PlayerContext } from \"../../../contexts/PlayerContext\"\r\nimport * as lifePointsActionCreators from \"../../../store/LifePoints/lifePointsActionCreators\"\r\nimport Button from \"../../UI/Button/Button\"\r\n// import styles from './CalcButton.module.css'\r\n\r\nfunction CalcButton({\r\n  value, // <string> button's label\r\n  dispatchLogAction, // <function> log reducer action dispatcher\r\n  disabled, // <boolean> gray-styled disabled\r\n  nonStyledDisabled, // <boolean> null click disabled with no style changes\r\n  ariaLabel, // <string> aria-label to assign to the button\r\n  ariaPressed, // <boolean> ARIA pressed boolean\r\n  timerObject, // <object> current timer object { hs: <number>, mins: <number>, secs: <number>}\r\n  isTimerRunning, // <boolean> true if timer has started\r\n  toggleSecondScreen, // <function> secondary screen toggler\r\n  dataId, // <string> button's type, which matches a lifepoints reducer action type\r\n  classNames, // <Array> array of className strings\r\n  children // <string|React.node> what is to be rendered as children\r\n}) {\r\n  const { dispatchLPAction } = useContext(LPContext)\r\n  const { currentPlayer, playerNames } = useContext(PlayerContext)\r\n  const { getLSasJSObject } = useContext(LocalStorageContext)\r\n  // calculator buttons handle all lifepoints actions for both players:\r\n  // increasing, resetting or decreasing by a variable or fixed amount.\r\n  // Naturally, the reducer action they trigger needs a payload can handle\r\n  // all those. They are explained in detail in lifePointsReducer.js\r\n  const payload = {\r\n    value,\r\n    dispatchLPAction,\r\n    currentPlayer,\r\n    playerNames,\r\n    getLSasJSObject,\r\n    dispatchLogAction,\r\n    isTimerRunning,\r\n    timerObject,\r\n    toggleSecondScreen\r\n  }\r\n\r\n  const handleDispatchLPAction = (e) => {\r\n    // map the data-id assigned to each button to its respective lifepoints action\r\n    // creator, assign the payload and dispatch that action.\r\n    // data-id corresponds to the button type, which matches a lifepoints action type.\r\n    dispatchLPAction(\r\n      lifePointsActionCreators.getLifePointsActionByType(e.target.dataset.id)(\r\n        payload\r\n      )\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      type=\"secondary\"\r\n      dataId={dataId}\r\n      disabled={disabled}\r\n      nonStyledDisabled={nonStyledDisabled}\r\n      ariaLabel={ariaLabel}\r\n      ariaPressed={ariaPressed}\r\n      classNames={classNames}\r\n      onClick={handleDispatchLPAction}\r\n    >\r\n      {children}\r\n    </Button>\r\n  )\r\n}\r\n\r\nCalcButton.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  dispatchLogAction: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  nonStyledDisabled: PropTypes.bool,\r\n  ariaLabel: PropTypes.string,\r\n  ariaPressed: PropTypes.bool,\r\n  timerObject: PropTypes.shape({\r\n    hs: PropTypes.string,\r\n    mins: PropTypes.string,\r\n    secs: PropTypes.string\r\n  }),\r\n  isTimerRunning: PropTypes.bool,\r\n  toggleSecondScreen: PropTypes.func,\r\n  dataId: PropTypes.string,\r\n  classNames: PropTypes.arrayOf(PropTypes.string),\r\n  children: PropTypes.node.isRequired\r\n}\r\n\r\nexport default memo(CalcButton)\r\n","import styles from \"./SVGImage.module.css\"\r\n\r\nexport const classes = {\r\n  container: (type, propsClassNames) =>\r\n    [\r\n      (styles.Default,\r\n      type\r\n        ? styles[`${type[0].toUpperCase() + type.slice(1).toLowerCase()}`]\r\n        : \"\"),\r\n      propsClassNames?.join(\" \")\r\n    ].join(\" \")\r\n}\r\n","import React, { memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { classes } from \"./SVGImage.utils\"\r\n\r\nfunction SVGImage({\r\n  src, // <string> path to img source\r\n  type = \"primary\", // <string> \"primary\", \"secondary\", \"disabed\". Will apply CSS stypes\r\n  alt, // <string> <img>'s alt\r\n  style, // <object> inline CSS styling\r\n  role, // <string> role of outermost component\r\n  ariaPressed, // <boolean> aria-pressed if we assigned role=\"button\"\r\n  dataId, // <string> data-id\r\n  dataExtra, // <string> data-extra\r\n  onClick = null, // <function> on click callback\r\n  classNames = [] // <Array> an array of className strings to assign to element\r\n}) {\r\n  return (\r\n    <img\r\n      src={src}\r\n      type={type}\r\n      alt={alt}\r\n      style={style}\r\n      role={role}\r\n      aria-pressed={ariaPressed}\r\n      data-id={dataId}\r\n      data-extra={dataExtra}\r\n      className={classes.container(type, classNames)}\r\n      onClick={onClick}\r\n    />\r\n  )\r\n}\r\n\r\nSVGImage.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  type: PropTypes.string,\r\n  alt: PropTypes.string.isRequired,\r\n  style: PropTypes.object,\r\n  role: PropTypes.string,\r\n  ariaPressed: PropTypes.bool,\r\n  dataId: PropTypes.string,\r\n  dataExtra: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.bool\r\n  ]),\r\n  classNames: PropTypes.arrayOf(PropTypes.string),\r\n  onClick: PropTypes.func\r\n}\r\n\r\nexport default memo(SVGImage)\r\n","import styles from \"./CalculatorRightSide.module.css\"\r\n\r\nexport const classes = {\r\n  container: (isExpanded) =>\r\n    [styles.Container, isExpanded ? \"\" : styles.Collapsed].join(\" \"),\r\n  coin: (isExpanded) => [styles.Coin, isExpanded ? \"\" : styles.CoinCollapsed],\r\n  die: (isExpanded) => [styles.Die, isExpanded ? \"\" : styles.DieCollapsed],\r\n  token: (isExpanded) => [styles.Token, isExpanded ? \"\" : styles.TokenCollapsed]\r\n}\r\n","import React, { useCallback, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport SVGImage from \"../../UI/SVGImage/SVGImage\"\r\nimport die from \"../../../assets/uiIcons/die.svg\"\r\nimport coin from \"../../../assets/uiIcons/coin.svg\"\r\nimport token from \"../../../assets/uiIcons/token.svg\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport { classes } from \"./CalculatorRightSide.utils\"\r\n\r\nfunction CalculatorRightSide({\r\n  isExpanded, // <boolean> on true, calculator buttons were hidden. View should change accordingly\r\n  toggleSecondScreen // <function> UIContext's secondary screen toggler\r\n}) {\r\n  const handleToggleSecondScreen = useCallback(\r\n    // each SVGImage holds the toggler string as their data-id\r\n    (e) => toggleSecondScreen(e.target.dataset.id),\r\n    [toggleSecondScreen]\r\n  )\r\n\r\n  return (\r\n    <aside className={classes.container(isExpanded)}>\r\n      <SVGImage\r\n        src={coin}\r\n        alt=\"Open coin screen\"\r\n        type=\"secondary\"\r\n        role=\"button\"\r\n        dataId={uiConfigs.togglers.secondaryScreens.coin}\r\n        onClick={handleToggleSecondScreen}\r\n        classNames={classes.coin(isExpanded)}\r\n      />\r\n      <SVGImage\r\n        src={die}\r\n        alt=\"Open dice screen\"\r\n        type=\"secondary\"\r\n        role=\"button\"\r\n        dataId={uiConfigs.togglers.secondaryScreens.die}\r\n        onClick={handleToggleSecondScreen}\r\n        classNames={classes.die(isExpanded)}\r\n      />\r\n      <SVGImage\r\n        src={token}\r\n        alt=\"Open token screen\"\r\n        type=\"secondary\"\r\n        role=\"button\"\r\n        dataId={uiConfigs.togglers.secondaryScreens.token}\r\n        onClick={handleToggleSecondScreen}\r\n        classNames={classes.token(isExpanded)}\r\n      />\r\n    </aside>\r\n  )\r\n}\r\n\r\nCalculatorRightSide.propTypes = {\r\n  isExpanded: PropTypes.bool.isRequired,\r\n  toggleSecondScreen: PropTypes.func.isRequired\r\n}\r\n\r\nexport default memo(CalculatorRightSide)\r\n","import styles from \"./Calculator.module.css\"\r\n\r\nexport const classes = {\r\n  container: (showCalcButtons) =>\r\n    [styles.Container, showCalcButtons ? \"\" : styles.Collapsed].join(\" \")\r\n}\r\n\r\n/**\r\n * Calculator buttons configs. It holds an array with each individual button\r\n * objects. They consist of:\r\n * > label: what's diplayed in button's UI.\r\n * > type: the action type to fire off LifePoints reducer\r\n * > ariaLabel: if the type is unclear for screen readers, then ariaLabel applies\r\n */\r\nexport const calcButtons = {\r\n  buttonsArray: [\r\n    {\r\n      label: \"C\",\r\n      type: \"CLEAR\",\r\n      ariaLabel: \"Clear operation\"\r\n    },\r\n    {\r\n      label: \"1\",\r\n      type: \"MODIFY\"\r\n    },\r\n    {\r\n      label: \"2\",\r\n      type: \"MODIFY\"\r\n    },\r\n    {\r\n      label: \"3\",\r\n      type: \"MODIFY\"\r\n    },\r\n    {\r\n      label: \"-100\",\r\n      type: \"DEC\",\r\n      ariaLabel: \"Decrease 100 Life Points\"\r\n    },\r\n    {\r\n      label: \"R\",\r\n      type: \"CONFIRM_RESTART\",\r\n      ariaLabel: \"Start a new duel\"\r\n    },\r\n    {\r\n      label: \"4\",\r\n      type: \"MODIFY\"\r\n    },\r\n    {\r\n      label: \"5\",\r\n      type: \"MODIFY\"\r\n    },\r\n    {\r\n      label: \"6\",\r\n      type: \"MODIFY\"\r\n    },\r\n    {\r\n      label: \"-500\",\r\n      type: \"DEC\",\r\n      ariaLabel: \"Decrease 500 Life Points\"\r\n    },\r\n    {\r\n      label: \"1/2\",\r\n      type: \"DEC\",\r\n      ariaLabel: \"Halve life points\"\r\n    },\r\n    {\r\n      label: \"7\",\r\n      type: \"MODIFY\"\r\n    },\r\n    {\r\n      label: \"8\",\r\n      type: \"MODIFY\"\r\n    },\r\n    {\r\n      label: \"9\",\r\n      type: \"MODIFY\"\r\n    },\r\n    {\r\n      label: \"-1000\",\r\n      type: \"DEC\",\r\n      ariaLabel: \"Decrease 1000 Life Points\"\r\n    },\r\n    {\r\n      label: \"+\",\r\n      type: \"INC\",\r\n      ariaLabel: \"Increase life points\"\r\n    },\r\n    {\r\n      label: \"0\",\r\n      type: \"MODIFY\"\r\n    },\r\n    {\r\n      label: \"00\",\r\n      type: \"MODIFY\"\r\n    },\r\n    {\r\n      label: \"000\",\r\n      type: \"MODIFY\"\r\n    },\r\n    {\r\n      label: \"-\",\r\n      type: \"DEC\",\r\n      ariaLabel: \"Decrease life points\"\r\n    }\r\n  ]\r\n}\r\n","import React, { useContext, useCallback, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\"\r\nimport { LPContext } from \"../../../contexts/LPContext\"\r\nimport { TimerContext } from \"../../../contexts/TimerContext\"\r\nimport { UIContext } from \"../../../contexts/UIContext\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport Toast from \"../../UI/Toast/Toast\"\r\nimport CalculatorLeftSide from \"../CalculatorLeftSide/CalculatorLeftSide\"\r\nimport CalcButton from \"../CalcButton/CalcButton\"\r\nimport CalculatorRightSide from \"../CalculatorRightSide/CalculatorRightSide\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport { classes, calcButtons } from \"./Calculator.utils\"\r\nimport styles from \"./Calculator.module.css\"\r\n\r\nfunction Calculator({\r\n  showCalcButtons, // <boolean> on true, Calculator is in full view (calculator buttons shown)\r\n  switchSFX // <object> useAudio()'s contol object for calculator buttons toggling\r\n}) {\r\n  // log switch state and setter is grabbed from LPContext as its state should\r\n  // persist between components. Log action dispatch comes from there too\r\n  const { switchState, setSwitch, dispatchLogAction } = useContext(LPContext)\r\n  // grab all needed UI state and handlers from UIContext\r\n  const {\r\n    toggleSecondScreen,\r\n    toastState,\r\n    dispatchToastAction,\r\n    screenIsFrozen\r\n  } = useContext(UIContext)\r\n  // and timer context variables too\r\n  const { timerObject, previousInitialTime, isTimerRunning } = useContext(\r\n    TimerContext\r\n  )\r\n\r\n  const handleToggleToast = useCallback(() => {\r\n    // toggler to assign to the \"X\" button in toasts to close them\r\n    dispatchToastAction(toastActionCreators.closeToast())\r\n  }, [dispatchToastAction])\r\n\r\n  return (\r\n    <>\r\n      {/* <Toast /> to show coin/die/timer log changes */}\r\n      <Toast\r\n        show={\r\n          toastState.isActive &&\r\n          toastState.type === uiConfigs.togglers.toast.logSwitches\r\n        }\r\n        toggler={handleToggleToast}\r\n        inactiveTimeout={uiConfigs.timeouts.toast.inactiveCalcSwitches}\r\n        refreshTimeoutOn={toastState.refreshTimeoutToggler}\r\n      >\r\n        <div className={styles.ToastText}>\r\n          {toastState.text} <br />\r\n          {/* log texts should transition in list form, dependent on each other */}\r\n          <TransitionGroup component={null}>\r\n            {toastState.logTypeArray.map((log) => (\r\n              <CSSTransition\r\n                key={log}\r\n                component={null}\r\n                timeout={500}\r\n                classNames=\"log-type-in-out\"\r\n              >\r\n                <span className={styles.ToastLogItems}> {log} </span>\r\n              </CSSTransition>\r\n            ))}\r\n          </TransitionGroup>\r\n        </div>\r\n      </Toast>\r\n      {/* from here on, we are in component's \"visible\" static area. \r\n      <Toast /> renders only upon being called, this one is always active.*/}\r\n      <section className={classes.container(showCalcButtons)}>\r\n        {/* Timer/Progressbar holder component. CSS Transition it to \"flicker\" in/out\r\n        when showCalcButtons state toggles */}\r\n        <CSSTransition\r\n          in={showCalcButtons}\r\n          component={null}\r\n          timeout={400}\r\n          classNames=\"flicker-calc-sides\"\r\n        >\r\n          <CalculatorLeftSide\r\n            isExpanded={showCalcButtons}\r\n            switchSFX={switchSFX}\r\n            toggleSecondScreen={toggleSecondScreen}\r\n            timerObject={timerObject}\r\n            previousInitialTime={previousInitialTime}\r\n            isTimerRunning={isTimerRunning}\r\n            switchState={switchState}\r\n            setSwitch={setSwitch}\r\n            dispatchLogAction={dispatchLogAction}\r\n            dispatchToastAction={dispatchToastAction}\r\n          />\r\n        </CSSTransition>\r\n        {/* calculator buttons. CSS Transition their wrapper section to smooth animate\r\n        them in and out when showCalcButton state toggles */}\r\n        <CSSTransition\r\n          in={showCalcButtons}\r\n          component={null}\r\n          timeout={180}\r\n          mountOnEnter\r\n          unmountOnExit\r\n          classNames=\"toggle-calc-button\"\r\n        >\r\n          <div className={styles.MidColumn}>\r\n            {calcButtons.buttonsArray.map((b) => (\r\n              <CalcButton\r\n                key={b.label}\r\n                value={b.label}\r\n                nonStyledDisabled={screenIsFrozen}\r\n                dataId={b.type}\r\n                ariaLabel={b.ariaLabel || \"\"}\r\n                timerObject={timerObject}\r\n                isTimerRunning={isTimerRunning}\r\n                dispatchLogAction={dispatchLogAction}\r\n                toggleSecondScreen={toggleSecondScreen}\r\n              >\r\n                {b.label}\r\n              </CalcButton>\r\n            ))}\r\n          </div>\r\n        </CSSTransition>\r\n        {/* Die/Coin/Token holder component. CSS Transition it to \"flicker\" in/out\r\n        when showCalcButton state toggles */}\r\n        <CSSTransition\r\n          in={showCalcButtons}\r\n          component={null}\r\n          timeout={400}\r\n          classNames=\"flicker-calc-sides\"\r\n        >\r\n          <CalculatorRightSide\r\n            isExpanded={showCalcButtons}\r\n            toggleSecondScreen={toggleSecondScreen}\r\n          />\r\n        </CSSTransition>\r\n      </section>\r\n    </>\r\n  )\r\n}\r\n\r\nCalculator.propTypes = {\r\n  showCalcButtons: PropTypes.bool.isRequired,\r\n  switchSFX: PropTypes.object.isRequired\r\n}\r\n\r\nexport default memo(Calculator)\r\n","import uiConfigs from \"../../utils/ui.configs.json\"\r\nimport styles from \"./LifePointsCounterPage.module.css\"\r\n\r\nexport const classes = {\r\n  miniCircle: (showCalcButtons) => [\r\n    styles.CalculatorMiniCircle,\r\n    showCalcButtons ? styles.CalculatorMiniCircleActive : \"\"\r\n  ]\r\n}\r\n\r\nexport function swipeHandlers(toggleCalcButtons) {\r\n  return {\r\n    onSwipedUp: toggleCalcButtons,\r\n    onSwipedDown: toggleCalcButtons,\r\n    delta: uiConfigs.swipeDelta\r\n  }\r\n}\r\n","import React, { useState, useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { useSwipeable } from \"react-swipeable\"\r\nimport useAudio from \"../../hooks/useAudio\"\r\nimport SecondaryScreens from \"../../components/LifePointsCounter/SecondaryScreens/SecondaryScreens\"\r\nimport MiniCircle from \"../../components/UI/MiniCircle/MiniCircle\"\r\nimport Lifepoints from \"../../components/LifePointsCounter/LifePoints/LifePoints\"\r\nimport Calculator from \"../../components/LifePointsCounter/Calculator/Calculator\"\r\nimport switchmp3 from \"../../assets/audios/switch.mp3\"\r\nimport toggleCalcmp3 from \"../../assets/audios/switchTitles.mp3\"\r\nimport calculatorSVG from \"../../assets/uiIcons/calculator.svg\"\r\nimport { classes, swipeHandlers } from \"./LifePointsCounterPage.utils\"\r\nimport styles from \"./LifePointsCounterPage.module.css\"\r\n\r\nexport default function LifePointsCounterPage({\r\n  toggleSecondScreen, // <function> UIContext's secondary screen toggler\r\n  secondScreenState, // <boolean> UIContext's secondary screen state\r\n  secondScreenType, // <string> UIContext's secondary screen type\r\n  setScreenIsFrozen, // <function> UIContext's swipe-freezing toggler\r\n  dispatchToastAction, // <function> UIContext's <Toast /> action dispatcher\r\n  playSFXs, // <boolean> global ON/OFF sfx switch\r\n  modalSFX // <object> useAudio()'s controls for secondary screen toggling sfx\r\n}) {\r\n  // audio JSX and controls object for log toggling SFX\r\n  const [switchAudioJSX, switchSFX] = useAudio(switchmp3, {\r\n    toggleOn: playSFXs\r\n  })\r\n  // audio JSX and controls object for calculator toggling SFX\r\n  const [toggleCalcAudioJSX, toggleCalcSFX] = useAudio(toggleCalcmp3, {\r\n    toggleOn: playSFXs,\r\n    playbackRate: 1.2\r\n  })\r\n  // boolean and setter to toggle calculator buttons on/off\r\n  const [showCalcButtons, setShowCalcButtons] = useState(true)\r\n\r\n  const toggleCalcButtons = useCallback(() => {\r\n    // play toggling sfx on calculator showCalcButtons and toggle showCalcButtons state\r\n    toggleCalcSFX.play()\r\n    setShowCalcButtons((prevState) => !prevState)\r\n  }, [setShowCalcButtons, toggleCalcSFX])\r\n  // useSwipeable()'s up + down swipe handlers to spread on visible area\r\n  const swipeUpDownHandlers = useSwipeable(swipeHandlers(toggleCalcButtons))\r\n\r\n  return (\r\n    <>\r\n      <SecondaryScreens\r\n        toggleSecondScreen={toggleSecondScreen}\r\n        secondScreenState={secondScreenState}\r\n        secondScreenType={secondScreenType}\r\n        dispatchToastAction={dispatchToastAction}\r\n        switchSFX={switchSFX}\r\n        modalSFX={modalSFX}\r\n        playSFXs={playSFXs}\r\n      />\r\n      <main {...swipeUpDownHandlers} className={styles.Container}>\r\n        <MiniCircle\r\n          display={\r\n            <img\r\n              src={calculatorSVG}\r\n              alt=\"toggle calculator\"\r\n              className={styles.CalculatorImage}\r\n            />\r\n          }\r\n          role=\"button\"\r\n          ariaPressed={showCalcButtons}\r\n          animateOnClick\r\n          onClick={toggleCalcButtons}\r\n          classNames={classes.miniCircle(showCalcButtons)}\r\n        />\r\n        <Lifepoints\r\n          isExpanded={!showCalcButtons}\r\n          playSFXs={playSFXs}\r\n          setScreenIsFrozen={setScreenIsFrozen}\r\n          dispatchToastAction={dispatchToastAction}\r\n        />\r\n        <Calculator showCalcButtons={showCalcButtons} switchSFX={switchSFX} />\r\n      </main>\r\n      {switchAudioJSX}\r\n      {toggleCalcAudioJSX}\r\n    </>\r\n  )\r\n}\r\n\r\nLifePointsCounterPage.propTypes = {\r\n  secondScreenState: PropTypes.bool.isRequired,\r\n  secondScreenType: PropTypes.string.isRequired,\r\n  toggleSecondScreen: PropTypes.func.isRequired,\r\n  setScreenIsFrozen: PropTypes.func.isRequired,\r\n  dispatchToastAction: PropTypes.func.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired,\r\n  modalSFX: PropTypes.object.isRequired\r\n}\r\n","import React from \"react\"\r\nimport SVGImage from \"../../UI/SVGImage/SVGImage\"\r\nimport heart from \"../../../assets/uiIcons/heart.svg\"\r\nimport die from \"../../../assets/uiIcons/die.svg\"\r\nimport coin from \"../../../assets/uiIcons/coin.svg\"\r\nimport clock from \"../../../assets/uiIcons/clock.svg\"\r\nimport styles from \"./LogMenu.module.css\"\r\n\r\nexport const classes = {\r\n  allLogs: (activeIcon) =>\r\n    [\r\n      styles.LogIconAll,\r\n      activeIcon === \"all\" ? styles.LogIconAllActive : \"\"\r\n    ].join(\" \"),\r\n  lp: (activeIcon) => [\r\n    styles.LogMenuIcon,\r\n    activeIcon === \"lp\" ? styles.LogMenuIconActive : \"\"\r\n  ],\r\n  dice: (activeIcon) => [\r\n    styles.LogMenuIcon,\r\n    styles.LogIconDie,\r\n    activeIcon === \"dice\" ? styles.LogMenuIconActive : \"\"\r\n  ],\r\n  coin: (activeIcon) => [\r\n    styles.LogMenuIcon,\r\n    styles.Bright0,\r\n    activeIcon === \"coin\" ? styles.LogMenuIconActive : \"\"\r\n  ],\r\n  timer: (activeIcon) => [\r\n    styles.LogMenuIcon,\r\n    styles.LogIconClock,\r\n    activeIcon === \"timer\" ? styles.LogMenuIconActive : \"\"\r\n  ],\r\n  trash: [styles.LogMenuIcon, styles.LogIconTrash]\r\n}\r\n\r\nexport function getLogFilterSVGImg(type, activeIcon, onClickCallback) {\r\n  return (\r\n    <SVGImage\r\n      src={getSVGImgSrc(type)}\r\n      alt={`Filter by ${type}`}\r\n      type=\"secondary\"\r\n      role=\"button\"\r\n      ariaPressed={activeIcon === type}\r\n      classNames={classes[type](activeIcon)}\r\n      onClick={onClickCallback}\r\n      dataId={type}\r\n    />\r\n  )\r\n}\r\n\r\nfunction getSVGImgSrc(type) {\r\n  switch (type) {\r\n    case \"lp\":\r\n      return heart\r\n    case \"dice\":\r\n      return die\r\n    case \"coin\":\r\n      return coin\r\n    case \"timer\":\r\n      return clock\r\n    default:\r\n      return null\r\n  }\r\n}\r\n","import React, { useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport useAudio from \"../../../hooks/useAudio\"\r\nimport SVGImage from \"../../UI/SVGImage/SVGImage\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport switchmp3 from \"../../../assets/audios/switch.mp3\"\r\nimport trash from \"../../../assets/uiIcons/trash.svg\"\r\nimport { classes, getLogFilterSVGImg } from \"./LogMenu.utils\"\r\nimport styles from \"./LogMenu.module.css\"\r\n\r\nexport default function LogMenu({\r\n  filterLogs, // <function> log reducer's action to filter logs (in LogContext)\r\n  logPageState: { activeIcon }, // <string> logPage reducer's \"activeIcon\" value\r\n  toggleSecondScreen, // <function> <SecondaryScreen /> toggler\r\n  playSFXs // <boolean> global ON/OFF switch state for audios\r\n}) {\r\n  // audio JSX and controls object for log filtering icons' SFX\r\n  const [switchAudioSFX, switchSFX] = useAudio(switchmp3, {\r\n    toggleOn: playSFXs\r\n  })\r\n\r\n  const handleFilterLogs = useCallback(\r\n    (e) => {\r\n      // on an icon click different to the active one, play the SFX and\r\n      // dispatch log action to filter by the respective icon type\r\n      if (activeIcon !== e.target.dataset.id) {\r\n        switchSFX.play()\r\n        filterLogs(e.target.dataset.id)\r\n      }\r\n    },\r\n    [filterLogs, activeIcon, switchSFX]\r\n  )\r\n\r\n  const handleToggleSecondScreen = useCallback(\r\n    (e) => {\r\n      // data-id of each SVGImage contains its respective log type string\r\n      toggleSecondScreen(e.target.dataset.id)\r\n    },\r\n    [toggleSecondScreen]\r\n  )\r\n\r\n  return (\r\n    <section className={styles.Container}>\r\n      <div\r\n        className={classes.allLogs(activeIcon)}\r\n        aria-label=\"Show all logs\"\r\n        role=\"button\"\r\n        aria-pressed={activeIcon === \"all\"}\r\n        onClick={handleFilterLogs}\r\n        data-id=\"all\"\r\n      >\r\n        ALL\r\n      </div>\r\n      {getLogFilterSVGImg(\"lp\", activeIcon, handleFilterLogs)}\r\n      {getLogFilterSVGImg(\"dice\", activeIcon, handleFilterLogs)}\r\n      {getLogFilterSVGImg(\"coin\", activeIcon, handleFilterLogs)}\r\n      {getLogFilterSVGImg(\"timer\", activeIcon, handleFilterLogs)}\r\n      <SVGImage\r\n        src={trash}\r\n        alt=\"Delete all logs\"\r\n        type=\"secondary\"\r\n        role=\"button\"\r\n        onClick={handleToggleSecondScreen}\r\n        dataId={uiConfigs.togglers.secondaryScreens.deleteLogs}\r\n        classNames={classes.trash}\r\n      />\r\n      {switchAudioSFX}\r\n    </section>\r\n  )\r\n}\r\n\r\nLogMenu.propTypes = {\r\n  filterLogs: PropTypes.func.isRequired,\r\n  logPageState: PropTypes.shape({\r\n    logs: PropTypes.arrayOf(PropTypes.object),\r\n    cache: PropTypes.arrayOf(PropTypes.object),\r\n    activeIcon: PropTypes.string\r\n  }).isRequired,\r\n  toggleSecondScreen: PropTypes.func.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired\r\n}\r\n","import React, { useContext } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { MediaQuery } from \"../../../contexts/MediaQueryContext\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport { divideLogString } from \"./LogItem.utils\"\r\nimport styles from \"./LogItem.module.css\"\r\n\r\nexport default function LogItem({ type, text, timer, irlTime }) {\r\n  const { mq } = useContext(MediaQuery)\r\n  // while holding the device vertically, we want to separate the log text for\r\n  // lifepoints, coin tosses and timer so that they can be nicely displayed in UI\r\n  const mediaQueriedText = mq.portrait\r\n    ? divideLogString(\r\n        text,\r\n        type === uiConfigs.logTypes.timer\r\n          ? [\"at\"]\r\n          : type === uiConfigs.logTypes.lp\r\n          ? [\"]\", \"-\", \"+\"]\r\n          : [null]\r\n      ).map((t, i) => <span key={i}> {t} </span>)\r\n    : text\r\n  // same for real-time logging. Date on the first line, time on the next one\r\n  const mediaQueriedIrlTime = mq.portrait ? (\r\n    <div>\r\n      {irlTime.split(\"-\").map((t, i) => (\r\n        <span key={i}> {t} </span>\r\n      ))}\r\n    </div>\r\n  ) : (\r\n    <div> {irlTime} </div>\r\n  )\r\n\r\n  return (\r\n    <li className={styles.Container}>\r\n      <div> {type} </div>\r\n      <div> {mediaQueriedText} </div>\r\n      <div> {timer} </div>\r\n      {mediaQueriedIrlTime}\r\n    </li>\r\n  )\r\n}\r\n\r\nLogItem.propTypes = {\r\n  type: PropTypes.string.isRequired,\r\n  text: PropTypes.string.isRequired,\r\n  timer: PropTypes.string,\r\n  irlTime: PropTypes.string.isRequired\r\n}\r\n","import { divideStrByCharWithoutRemovingChar } from \"../../../utils/utilityFunctions\"\r\n\r\n/**\r\n * Splits the upcoming Log Items (dice, lifepoints, coin, timer), and returns\r\n * the divided fragments in an array to be mapped as individual <span>s\r\n * @param {string} str The log type string\r\n * @param  {...string} chars the characters to divide the log string: ']', '-', '+', 'at'\r\n */\r\nexport function divideLogString(str, ...chars) {\r\n  // flatten the incoming array of arrays into only one array with all chars in it\r\n  const charsFlat = chars.flat()\r\n  // divide as normal for the first time\r\n  const firstDivision = divideStrByCharWithoutRemovingChar(str, charsFlat[0])\r\n  // lifepoints logs are the only ones with more than one character (length > 1).\r\n  // They will always be in the order ['-', '+']\r\n  if (charsFlat.length > 1) {\r\n    let secondDivision\r\n    // if the character is '-', separate the string, add the char to the\r\n    // last string and create a new log type array to return\r\n    if (firstDivision[1].indexOf(charsFlat[1]) !== -1) {\r\n      secondDivision = firstDivision[1].split(charsFlat[1])\r\n      secondDivision[1] = charsFlat[1] + secondDivision[1]\r\n      return [firstDivision[0], ...secondDivision]\r\n      // same for '+', it is the second character\r\n    } else if (firstDivision[1].indexOf(charsFlat[2]) !== -1) {\r\n      secondDivision = firstDivision[1].split(charsFlat[2])\r\n      secondDivision[1] = charsFlat[2] + secondDivision[1]\r\n      return [firstDivision[0], ...secondDivision]\r\n    }\r\n  }\r\n  // dice, coin, timer and \"restart\" lifepoints logs will only return the\r\n  // first splitted string\r\n  return firstDivision\r\n}\r\n","import React, { useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\"\r\nimport LogItem from \"../LogItem/LogItem\"\r\nimport styles from \"./LogScreen.module.css\"\r\n\r\nexport default function LogScreen({\r\n  logs, // <Array> log array inside logState reducer\r\n  filterLogs // <function> log reducer's action to filter logs (in LogContext)\r\n}) {\r\n  // callback to reverse logs\r\n  const reverseLogs = useCallback(() => filterLogs(\"reverse\"), [filterLogs])\r\n\r\n  return (\r\n    <section className={styles.Container} aria-label=\"Log page\">\r\n      <div className={styles.LogBackground}> Log </div>\r\n      <ul aria-label=\"log properties\" className={styles.Header}>\r\n        <li> Type </li>\r\n        <li> Message </li>\r\n        <li> Timer </li>\r\n        <li onClick={reverseLogs} aria-label=\"Order by date\">\r\n          IRL time\r\n        </li>\r\n      </ul>\r\n      <ul aria-label=\"log list\" className={styles.Content}>\r\n        <TransitionGroup component={null}>\r\n          {logs?.map((log) => (\r\n            <CSSTransition\r\n              key={log.id}\r\n              timeout={500}\r\n              classNames=\"animate-log-item\"\r\n            >\r\n              <LogItem {...log} />\r\n            </CSSTransition>\r\n          ))}\r\n        </TransitionGroup>\r\n      </ul>\r\n    </section>\r\n  )\r\n}\r\n\r\nLogScreen.propTypes = {\r\n  logs: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      type: PropTypes.string.isRequired,\r\n      text: PropTypes.string.isRequired,\r\n      timer: PropTypes.string,\r\n      irlTime: PropTypes.string.isRequired\r\n    }).isRequired\r\n  ).isRequired,\r\n  filterLogs: PropTypes.func.isRequired\r\n}\r\n","export const classes = {\r\n  button: (isMQPortrait) => [\r\n    isMQPortrait ? \"oneInRow\" : \"twoInRow\",\r\n    \"letterSpacing\",\r\n    \"flex-center\"\r\n  ]\r\n}\r\n","import React, { useContext, useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { MediaQuery } from \"../../../contexts/MediaQueryContext\"\r\nimport Button from \"../../UI/Button/Button\"\r\nimport styles from \"./LogDeleteScreen.module.css\"\r\nimport trash from \"../../../assets/uiIcons/trash.svg\"\r\nimport cross from \"../../../assets/uiIcons/cross.svg\"\r\nimport { classes } from \"./LogDeleteScreen.utils\"\r\n\r\nexport default function LogDeleteScreen({\r\n  toggleSecondScreen, // <function> UIContext's <SecondaryScreen /> toggler\r\n  deleteLSLogHistory // <function> LogContext's action to delete logs from local storage\r\n}) {\r\n  // <Button>'s classNames change depeding on device orientation, so bring\r\n  // media query object from context\r\n  const { mq } = useContext(MediaQuery)\r\n\r\n  const deleteLogsAndToggleSecondScreen = useCallback(() => {\r\n    deleteLSLogHistory()\r\n    toggleSecondScreen()\r\n  }, [deleteLSLogHistory, toggleSecondScreen])\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.Message}> Delete all logs? </div>\r\n      <div className={styles.Buttons}>\r\n        <Button\r\n          type=\"primary\"\r\n          classNames={classes.button(mq.portrait)}\r\n          onClick={deleteLogsAndToggleSecondScreen}\r\n        >\r\n          Delete\r\n          <img className={styles.DeleteImage} src={trash} alt=\"delete logs\" />\r\n        </Button>\r\n        <Button\r\n          type=\"secondary\"\r\n          classNames={classes.button(mq.portrait)}\r\n          onClick={toggleSecondScreen}\r\n        >\r\n          Cancel\r\n          <img className={styles.CancelImage} src={cross} alt=\"cancel\" />\r\n        </Button>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nLogDeleteScreen.propTypes = {\r\n  toggleSecondScreen: PropTypes.func.isRequired,\r\n  deleteLSLogHistory: PropTypes.func.isRequired\r\n}\r\n","import React, { useContext, useEffect } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { LogContext } from \"../../contexts/LogContext\"\r\nimport SecondaryScreen from \"../../components/UI/SecondaryScreen/SecondaryScreen\"\r\nimport LogMenu from \"../../components/Log/LogMenu/LogMenu\"\r\nimport LogScreen from \"../../components/Log/LogScreen/LogScreen\"\r\nimport LogDeleteScreen from \"../../components/Log/LogDeleteScreen/LogDeleteScreen\"\r\nimport uiConfigs from \"../../utils/ui.configs.json\"\r\nimport styles from \"./LogPage.module.css\"\r\n\r\nexport default function LogPage({\r\n  toggleSecondScreen, // <function> UIContext's secondary screen toggler\r\n  secondScreenState, // <boolean> UIContext's secondary screen state\r\n  secondScreenType, // <string> UIContext's secondary screen type\r\n  modalSFX, // <object> useAudio()'s controls for secondary screen toggling sfx\r\n  playSFXs // <boolean> global ON/OFF sfx switch\r\n}) {\r\n  // grab everything needed from LogContext\r\n  const {\r\n    logPageState,\r\n    filterLogs,\r\n    deleteLSLogHistory,\r\n    mountLogs\r\n  } = useContext(LogContext)\r\n  // at mount phase, load logs from local storage and set them in reducer\r\n  useEffect(mountLogs, [])\r\n\r\n  return (\r\n    <>\r\n      {\r\n        // only mount <SecondaryScreen /> if \"Delete\" log option was selected\r\n        // (represented by deleteLogs toggler set in secondScreenType)\r\n        secondScreenType === uiConfigs.togglers.secondaryScreens.deleteLogs &&\r\n          secondScreenState && (\r\n            <SecondaryScreen\r\n              toggle={toggleSecondScreen}\r\n              small\r\n              animation=\"scale\"\r\n              sfxObj={modalSFX}\r\n            >\r\n              <LogDeleteScreen\r\n                toggleSecondScreen={toggleSecondScreen}\r\n                deleteLSLogHistory={deleteLSLogHistory}\r\n              />\r\n            </SecondaryScreen>\r\n          )\r\n      }\r\n      <main className={styles.Container}>\r\n        <LogScreen logs={logPageState.logs} filterLogs={filterLogs} />\r\n        <LogMenu\r\n          filterLogs={filterLogs}\r\n          logPageState={logPageState}\r\n          toggleSecondScreen={toggleSecondScreen}\r\n          playSFXs={playSFXs}\r\n        />\r\n      </main>\r\n    </>\r\n  )\r\n}\r\n\r\nLogPage.propTypes = {\r\n  secondScreenType: PropTypes.string.isRequired,\r\n  secondScreenState: PropTypes.bool.isRequired,\r\n  toggleSecondScreen: PropTypes.func.isRequired,\r\n  modalSFX: PropTypes.object.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired\r\n}\r\n","export const SET_CURRENT_CARD = \"SET_CURRENT_CARD\"\r\nexport const SET_CURRENT_LIST = \"SET_CURRENT_LIST\"\r\nexport const FILTER_LIST = \"FILTER_LIST\"\r\nexport const SET_ALT_IMG_ID = \"SET_ALT_IMG_ID\"\r\nexport const DISPLAY_LIST_SCREEN = \"DISPLAY_LIST_SCREEN\"\r\nexport const DISPLAY_CARD_SCREEN = \"DISPLAY_CARD_SCREEN\"\r\nexport const SET_LOADING = \"SET_LOADING\"\r\nexport const SET_ERROR = \"SET_ERROR\"\r\nexport const RESET_FETCH_STATE = \"RESET_FETCH_STATE\"\r\n","import * as actionTypes from \"./cardSearchActionTypes\"\r\n\r\nconst initialState = {\r\n  currentCard: {\r\n    img: \"\",\r\n    prices: {},\r\n    data: {}\r\n  },\r\n  currentList: [],\r\n  filterableList: [],\r\n  altImgId: \"\",\r\n  isInListScreen: true,\r\n  isLoading: false,\r\n  hasError: false,\r\n  errorMsg: \"\"\r\n}\r\n\r\nexport default function cardSearchReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actionTypes.SET_CURRENT_CARD:\r\n      // set currentCard state object to the constructed object valid to\r\n      // display in view. Also set isInListScreen to false, which will toggle\r\n      // view to <DescPriceScreen />\r\n      return {\r\n        ...state,\r\n        currentCard: {\r\n          img: action.payload.img,\r\n          prices: action.payload.prices,\r\n          data: action.payload.data\r\n        },\r\n        isInListScreen: false\r\n      }\r\n    case actionTypes.SET_CURRENT_LIST:\r\n      // set both currentList (immutable full database-fetched results) and filterableList\r\n      // (same, but mutable depeding on <input> filtering) to what comes from the\r\n      // database. Also set isInListScreen to true, which will toggles view to\r\n      // <ListScreen />\r\n      return {\r\n        ...state,\r\n        currentList: action.payload,\r\n        filterableList: action.payload,\r\n        isInListScreen: true\r\n      }\r\n    case actionTypes.FILTER_LIST:\r\n      // set filterableList to the result of currentList filtered by \"search\"\r\n      // <input>'s current value\r\n      return {\r\n        ...state,\r\n        filterableList: state.currentList.filter((cardName) =>\r\n          cardName.name.toLowerCase().includes(action.payload.toLowerCase())\r\n        )\r\n      }\r\n    case actionTypes.SET_ALT_IMG_ID:\r\n      // set altImgId to a valid card string id to search in database\r\n      return {\r\n        ...state,\r\n        altImgId: action.payload\r\n      }\r\n    case actionTypes.DISPLAY_LIST_SCREEN:\r\n      // set isInListScreen to true, which will toggles view to  <ListScreen />\r\n      return {\r\n        ...state,\r\n        isInListScreen: true\r\n      }\r\n    case actionTypes.DISPLAY_CARD_SCREEN:\r\n      // set isInListScreen to false, which will toggle view to <DescPriceScreen />\r\n      return {\r\n        ...state,\r\n        isInListScreen: false\r\n      }\r\n    case actionTypes.SET_LOADING:\r\n      // set fetch state to loading and clear error states\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        hasError: false,\r\n        errorMsg: \"\"\r\n      }\r\n    case actionTypes.SET_ERROR:\r\n      // set fetch state to error with the given message, and loading to false\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        hasError: true,\r\n        errorMsg: action.payload\r\n      }\r\n    case actionTypes.RESET_FETCH_STATE:\r\n      // clear fetch state (loading and error to default)\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        hasError: false,\r\n        errorMsg: \"\"\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import {\r\n  getCardIcon,\r\n  getCardTypeStyle,\r\n  getBanlistInfo,\r\n  getRankOrLevelIconURLArray\r\n} from \"./yugiohSpecificFunctions\"\r\nimport uiConfigs from \"../utils/ui.configs.json\"\r\n\r\n/**\r\n * Gets the named search response from YgoProDeck's API. If it is an array\r\n * containing multiple card objects, it sets them all into card list reducer\r\n * array (currentList). On a single object inside the array, it populates card\r\n * object in the reducer (currentCard).\r\n * @param {array} apiResponse YgoProDeck's API response in array form\r\n * @param {function} functionToStoreListOfCards Reducer dispatch with type to set currentList\r\n * @param {object} functionToStoreSingleCard Reducer dispatch with type to set currentCard\r\n */\r\nexport function storeAPICall(\r\n  apiResponse,\r\n  functionToStoreListOfCards,\r\n  functionToStoreSingleCard\r\n) {\r\n  // api response is an array with a single card object\r\n  if (apiResponse.length === 1) {\r\n    // construct the card object and store it in the assigned variable with\r\n    // its respective setter function.\r\n    functionToStoreSingleCard(getCardObject(apiResponse[0]))\r\n  } else {\r\n    // the search hols multiple cards, so use currentList's dispatch\r\n    // action and store the array of responses normally.\r\n    functionToStoreListOfCards(apiResponse)\r\n  }\r\n}\r\n\r\n/**\r\n * From YgoProDeck's API response, it constructs a valid object for ListScreen and DescPriceScreen views.\r\n * @param {object} apiResponse API response containing card data as is from the database\r\n * @param {object} objectToFuseIfAny An object to add all properties of a valid card object. Leave empty unless strictly necessary\r\n */\r\nexport function getCardObject(cardApiResponse, objectToFuseIfAny = {}) {\r\n  return {\r\n    ...objectToFuseIfAny,\r\n    img: cardApiResponse.card_images[0].image_url,\r\n    prices: {\r\n      ...objectToFuseIfAny.prices,\r\n      averages: cardApiResponse.card_prices,\r\n      sets: cardApiResponse.card_sets\r\n    },\r\n    data: {\r\n      ...objectToFuseIfAny.data,\r\n      id: cardApiResponse.id,\r\n      name: cardApiResponse.name,\r\n      race: cardApiResponse.race,\r\n      type: [cardApiResponse.type, getCardTypeStyle(cardApiResponse.type)],\r\n      attributeIcon: getCardIcon(cardApiResponse.attribute)\r\n        ? getCardIcon(cardApiResponse.attribute)\r\n        : getCardIcon(cardApiResponse.race),\r\n      attribute: cardApiResponse.attribute,\r\n      atk: cardApiResponse.atk,\r\n      def: cardApiResponse.def,\r\n      desc: cardApiResponse.desc && cardApiResponse.desc.split(\"\\n\"),\r\n      banlist_info: [\r\n        getBanlistInfo(cardApiResponse.banlist_info, \"tcg\"),\r\n        getBanlistInfo(cardApiResponse.banlist_info, \"ocg\")\r\n      ],\r\n      starArray: getRankOrLevelIconURLArray(\r\n        cardApiResponse.level,\r\n        cardApiResponse.type\r\n      ),\r\n      level: cardApiResponse.level,\r\n      link_value: cardApiResponse.linkval,\r\n      link_markers: cardApiResponse.linkmarkers,\r\n      images: cardApiResponse.card_images\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * (LEGACY - Deprecated) The database got updated and this bug, removed\r\n * Returns true if the card string being searched contains an invalid\r\n * character for the API search. Otherwise, false.\r\n * @param {string} cardName The name of the searched card (or part of its name).\r\n */\r\nexport function includesInvalidFuzzyCharacter(cardName) {\r\n  let cardNameCharArr = cardName.split(\"\")\r\n\r\n  for (let invalidChar of uiConfigs.invalidNameSearchCharacters) {\r\n    if (cardNameCharArr.includes(invalidChar)) return true\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * A timeout handler for promises. Pass a promise and a timeout in ms as\r\n * parameters. If the time expires, the promise will reject automatically.\r\n * Otherwise, it will resolve or reject depending on the promise's fulfillment.\r\n * @param {Promise} promise The promise object to apply timeout to.\r\n * @param {number} time Time upon automatically rejecting, in ms.\r\n * @param {string} errorMsg The string the rejection will output.\r\n */\r\nexport function timeout(promise, time, errorMsg) {\r\n  return new Promise((resolve, reject) => {\r\n    const timeout = setTimeout(() => {\r\n      reject(errorMsg)\r\n    }, time)\r\n    promise.then(\r\n      (res) => {\r\n        clearTimeout(timeout)\r\n        resolve(res)\r\n      },\r\n      (err) => {\r\n        clearTimeout(timeout)\r\n        reject(err)\r\n      }\r\n    )\r\n  })\r\n}\r\n","import React, { createContext, useReducer } from \"react\"\r\nimport cardSearchReducer from \"../store/CardSearch/cardSearchReducer\"\r\nimport useApiCallWithReducer from \"../hooks/useApiCallWithReducer\"\r\n\r\nexport const CardSearchContext = createContext({\r\n  searchReducer: {},\r\n  dispatchSearchAction: () => {},\r\n  apiFetchAndStoreRes: () => {}\r\n})\r\n\r\nexport function CardSearchContextProvider({ children }) {\r\n  // initialize the reducer and action dispatcher responsible of setting fetch states\r\n  // when calling the API, creating valid card objects to be displayed in <DescPriceScreen />,\r\n  // setting card list cache (immutable unless re-fetching from API) and current card\r\n  // list array (mutable, used to filter loaded cards)\r\n  const [searchReducer, dispatchSearchAction] = useReducer(cardSearchReducer, {\r\n    currentCard: {\r\n      img: \"\",\r\n      prices: {},\r\n      data: {}\r\n    },\r\n    currentList: [],\r\n    filterableList: [],\r\n    altImgId: \"\",\r\n    isInListScreen: true,\r\n    isLoading: false,\r\n    hasError: false,\r\n    errorMsg: \"\"\r\n  })\r\n  // call for the hook responsible of fetching data from the API and interacting\r\n  // with the reducer above to set fetch states and data in the proper arrays\r\n  const { apiFetchAndStoreRes } = useApiCallWithReducer()\r\n  // unite all values to be provided by this context into an object\r\n  const passedContext = {\r\n    searchReducer,\r\n    dispatchSearchAction,\r\n    apiFetchAndStoreRes\r\n  }\r\n\r\n  return (\r\n    <CardSearchContext.Provider value={passedContext}>\r\n      {children}\r\n    </CardSearchContext.Provider>\r\n  )\r\n}\r\n","import { storeAPICall, timeout } from \"../utils/apiFunctions\"\r\nimport uiConfigs from \"../utils/ui.configs.json\"\r\n\r\nexport default function useApiCallWithReducer() {\r\n  /**\r\n   * Triggers the associated reducer loading action and fetches from urlWithNameOrFuzzyQuery\r\n   * what was was inputted as nameOrFuzzyNameQueryParam using storeApiCall function,\r\n   * which is responsible to determine what to do with the upcoming data.\r\n   * On a successful storeApiCall resolution, reducer success dispatch action is executed,\r\n   * otherwise error function is triggered.\r\n   * @param {string} urlWithNameOrFuzzyQuery YgoProDeck's endpoint\r\n   * @param {string} nameOrFuzzyNameQueryParam Query string for fuzzy/name search '?fuzzy=\"blue-eyes\"'\r\n   * @param {function} functionToStoreResObj Reducer function to store an array of responses (currentList)\r\n   * @param {function} loadingAction Reducer's loading dispatch function\r\n   * @param {function} successAction Reducer's success dispatch function\r\n   * @param {function} errorAction Reducer's error dispatch function\r\n   * @param {function} fallbackFunctionToStoreResObj Reducer dispatch function to store a single card (currentCard)\r\n   */\r\n  async function apiFetchAndStoreRes(\r\n    urlWithNameOrFuzzyQuery,\r\n    nameOrFuzzyNameQueryParam,\r\n    functionToStoreListOfCards,\r\n    reducerLoadingDispatch,\r\n    reducerSuccessDispatch,\r\n    reducerErrorDispatch,\r\n    functionToStoreSingleCard\r\n  ) {\r\n    // first thing first, set state to loading\r\n    reducerLoadingDispatch()\r\n    // call for YgoProDeck API with a fallback timeout. This assures to break\r\n    // the user out of the loading state if the DB hangs or internet\r\n    // connection fails.\r\n    let res\r\n    try {\r\n      res = await timeout(\r\n        fetch(`${urlWithNameOrFuzzyQuery}${nameOrFuzzyNameQueryParam}`),\r\n        uiConfigs.apiConfigs.callTimeout,\r\n        \"Connection timeout\"\r\n      )\r\n      res = await res.json()\r\n      // On a successful response, store it in its respective object.\r\n      storeAPICall(\r\n        res.data,\r\n        functionToStoreListOfCards,\r\n        functionToStoreSingleCard\r\n      )\r\n      // and reset loading state\r\n      reducerSuccessDispatch(res.data)\r\n      // return a new resolved promise with the data response\r\n      return Promise.resolve(res.data)\r\n    } catch (error) {\r\n      // Summon a modal screen to tell the user what happened\r\n      // Set loading to false and return a rejected promise with the\r\n      // error object\r\n      reducerErrorDispatch(error)\r\n      return Promise.reject(error)\r\n    }\r\n  }\r\n\r\n  return { apiFetchAndStoreRes }\r\n}\r\n","import * as cardSearchActionTypes from \"./cardSearchActionTypes\"\r\n\r\n// currentCard: <object> a valid cardObject {img, prices, data} to be displayed in view\r\nexport const setCurrentCard = (currentCardObject) => ({\r\n  type: cardSearchActionTypes.SET_CURRENT_CARD,\r\n  payload: currentCardObject\r\n})\r\n\r\n// currentList: <Array> an array of filtered database card objects\r\nexport const setCurrentList = (currentList) => ({\r\n  type: cardSearchActionTypes.SET_CURRENT_LIST,\r\n  payload: currentList\r\n})\r\n\r\n// searchTerm: <string> \"search\" input's value\r\nexport const filterList = (searchTerm) => ({\r\n  type: cardSearchActionTypes.FILTER_LIST,\r\n  payload: searchTerm\r\n})\r\n\r\n// altImgId: <string> the id of the target card image to fetch in database\r\nexport const setAltImgId = (altImgId) => ({\r\n  type: cardSearchActionTypes.SET_ALT_IMG_ID,\r\n  payload: altImgId\r\n})\r\n\r\nexport const displayListScreen = () => ({\r\n  type: cardSearchActionTypes.DISPLAY_LIST_SCREEN\r\n})\r\n\r\nexport const displayCardScreen = () => ({\r\n  type: cardSearchActionTypes.DISPLAY_CARD_SCREEN\r\n})\r\n\r\nexport const setLoading = () => ({\r\n  type: cardSearchActionTypes.SET_LOADING\r\n})\r\n\r\n// errorMsg: <string> the error message to set when card loading fails\r\nexport const setError = (errorMsg) => ({\r\n  type: cardSearchActionTypes.SET_ERROR,\r\n  payload: errorMsg\r\n})\r\n\r\nexport const resetFetchState = () => ({\r\n  type: cardSearchActionTypes.RESET_FETCH_STATE\r\n})\r\n","import styles from \"./CardSearchScreenDivision.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClassNames) =>\r\n    [styles.Container, propsClassNames?.join(\" \")].join(\" \")\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { classes } from \"./CardSearchScreenDivision.utils\"\r\nimport styles from \"./CardSearchScreenDivision.module.css\"\r\n\r\nexport default function CardSearchScreenDivision({ children, classNames }) {\r\n  return <div className={classes.container(classNames)}>{children}</div>\r\n}\r\n\r\nCardSearchScreenDivision.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  classNames: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n","import styles from \"./ImgScreen.module.css\"\r\n\r\nexport const classes = {\r\n  container: [styles.Container],\r\n  image: (toastIsActive) =>\r\n    [styles.CardImage, toastIsActive ? styles.CardImageActive : \"\"].join(\" \")\r\n}\r\n","import React, { useContext, useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { UIContext } from \"../../../contexts/UIContext\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport CardSearchScreenDivision from \"../../../wrappers/CardSearchScreenDivision/CardSearchScreenDivision\"\r\nimport cardNotFound from \"../../../assets/images/cardNotFound.jpg\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport { classes } from \"./ImgScreen.utils\"\r\n\r\nexport default function ImgScreen({\r\n  src // <string> path to img src\r\n}) {\r\n  // a confirmation <Toast /> triggers before opening an image. We need <Toast />\r\n  // reducer state and dispatcher coming from UIContext\r\n  const { toastState, dispatchToastAction } = useContext(UIContext)\r\n\r\n  const handleToggleToast = useCallback(() => {\r\n    // toggles <Toast /> to active and sets the proper type to render\r\n    // <AltArtImgDisplay />'s <SecondaryScreen />, or a warning to\r\n    // tell the user they cannot load resources because of no connection\r\n    dispatchToastAction(\r\n      toastActionCreators.setToastState(\r\n        null,\r\n        null,\r\n        uiConfigs.togglers.toast[\r\n          navigator.onLine ? \"cardImgScreen\" : \"noConnection\"\r\n        ]\r\n      )\r\n    )\r\n  }, [dispatchToastAction, navigator.onLine])\r\n\r\n  return (\r\n    <CardSearchScreenDivision classNames={classes.container}>\r\n      {/* render \"not found\" data if not online */}\r\n      <img\r\n        src={navigator.onLine ? src : cardNotFound}\r\n        alt={navigator.onLine ? \"Card image\" : \"Card image not found\"}\r\n        onClick={navigator.onLine ? handleToggleToast : null}\r\n        className={classes.image(toastState.isActive)}\r\n      />\r\n    </CardSearchScreenDivision>\r\n  )\r\n}\r\n\r\nImgScreen.propTypes = {\r\n  src: PropTypes.string\r\n}\r\n","import styles from \"./DescScreen.module.css\"\r\n\r\nexport const classes = {\r\n  collapsedStarIcons: {\r\n    container: [styles.ArrowIconContainer, styles.ContainerFilled],\r\n    arrow: [styles.ArrowIconArrow]\r\n  },\r\n  expandedStarIcons: (isLink) => ({\r\n    container: [\r\n      styles.ArrowIconContainer,\r\n      isLink ? \"\" : styles.ContainerFilled\r\n    ],\r\n    arrow: [styles.ArrowIconArrow]\r\n  }),\r\n  linkLevelOrRank: (level, showing) =>\r\n    [\r\n      styles.LinkInfoContainer,\r\n      level > 9 && showing === \"both\" ? styles.CompressLinkInfoContainer : \"\"\r\n    ].join(\" \")\r\n}\r\n","import React, { useContext, useCallback, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { UIContext } from \"../../../contexts/UIContext\"\r\nimport * as cardSearchActionCreators from \"../../../store/CardSearch/cardSearchActionCreators\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport ArrowIcon from \"../../UI/ArrowIcon/ArrowIcon\"\r\nimport { isMonsterCard } from \"../../../utils/yugiohSpecificFunctions\"\r\nimport sword from \"../../../assets/cardIcons/sword.svg\"\r\nimport shield from \"../../../assets/cardIcons/shield.svg\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport { classes } from \"./DescScreen.utils\"\r\nimport styles from \"./DescScreen.module.css\"\r\n\r\nfunction DescScreen({\r\n  data, // <object> searchReducer's \"currentCard\" object's \"data\" value\r\n  showing, // <string> \"right\" for card details, \"left\" for card prices, and \"both\" for both split in half\r\n  cardDescRef, // <React.createRef> a reference to the outermost elements besides the container\r\n  dispatchSearchAction // <function> searchReducer's action dispatcher\r\n}) {\r\n  // spread all keys coming from \"data\" object\r\n  const {\r\n    atk,\r\n    def,\r\n    banlist_info = [],\r\n    desc,\r\n    link_markers = [],\r\n    link_value,\r\n    level,\r\n    starArray,\r\n    images,\r\n    name,\r\n    race,\r\n    type,\r\n    attribute,\r\n    attributeIcon\r\n  } = data\r\n  // grab <SecondaryScreen /> toggler. We need it to trigger <AltArtImgDisplay />.\r\n  // Also, <Toast /> will fire if no internet connection. So grab its dispatcher\r\n  const { toggleSecondScreen, dispatchToastAction } = useContext(UIContext)\r\n\r\n  // if the card has a link value, show \"LINK\" plus its number value on a <span>\r\n  // Otherwise, if the card is a monster and xyz, show \"RANK\" and its rank number\r\n  // finally, if it is any other monster, show \"LEVEL\" and its level number\r\n  const linkLevelOrRankValue = link_value\r\n    ? \"LINK \" + link_value\r\n    : type && type[0] === \"XYZ Monster\"\r\n    ? \"RANK \" + level\r\n    : \"LEVEL \" + level\r\n\r\n  // when a card art is requested, set its id as a state, which will be used in\r\n  // AltArtImgDisplay component to fetch the art from the database and show it\r\n  // in a modal screen.\r\n  // If there is no internet connection, ignore everything. Instead, show a\r\n  // <Toast /> warning of not internet connection\r\n  const handleAltImgClick = useCallback(\r\n    (e) => {\r\n      if (navigator.onLine) {\r\n        dispatchSearchAction(\r\n          cardSearchActionCreators.setAltImgId(e.target.dataset.id)\r\n        )\r\n        toggleSecondScreen(uiConfigs.togglers.secondaryScreens.altCardArt)\r\n      } else {\r\n        dispatchToastAction(\r\n          toastActionCreators.setToastState(\r\n            null,\r\n            null,\r\n            uiConfigs.togglers.toast.noConnection\r\n          )\r\n        )\r\n      }\r\n    },\r\n    [\r\n      dispatchSearchAction,\r\n      toggleSecondScreen,\r\n      dispatchToastAction,\r\n      navigator.onLine\r\n    ]\r\n  )\r\n\r\n  // creates the array that in term will graphically display link markers,\r\n  // or XYZ stars or level stars svgs\r\n  const getLinkLevelOrRankArrayJSX = useCallback(() => {\r\n    let isLink = false\r\n    let linkLevelOrRankArray = []\r\n    // if link_markers is not undefined, we are dealing with a LINK monster,\r\n    // use link_markers as the array to map. On any other case, use starArray\r\n    // which will hold the correct star svg icon for XYZ or any other monster\r\n    if (link_markers.length) {\r\n      linkLevelOrRankArray = link_markers\r\n      isLink = true\r\n    } else {\r\n      linkLevelOrRankArray = starArray\r\n    }\r\n    // when showing card info and price screens, the space becomes cluttered,\r\n    // so, instead of reducing the size of the stars, just show <number> x <starIcon>.\r\n    // Otherwise, we have a screen with sufficient space, show all stars\r\n    return linkLevelOrRankArray.length > 9 && showing === \"both\" ? (\r\n      <>\r\n        <p>{linkLevelOrRankArray.length} x</p>\r\n        <ArrowIcon\r\n          arrowImage={linkLevelOrRankArray[0]}\r\n          pointing={null}\r\n          alt={\"Star\"}\r\n          classNames={classes.collapsedStarIcons}\r\n        />\r\n      </>\r\n    ) : (\r\n      linkLevelOrRankArray.map((item, i) => (\r\n        <ArrowIcon\r\n          key={i}\r\n          arrowImage={isLink ? null : item}\r\n          pointing={isLink ? item : null}\r\n          alt={isLink ? \"\" : \"Star\"}\r\n          classNames={classes.expandedStarIcons(isLink)}\r\n        />\r\n      ))\r\n    )\r\n  }, [link_markers, starArray])\r\n\r\n  return (\r\n    <div className={styles.Container}>\r\n      {/* span with a ref to scroll into view, card name, and type */}\r\n      <span ref={cardDescRef} />\r\n      <div> {name} </div>\r\n      <div className={styles.Type} style={{ color: `${type && type[1]}` }}>\r\n        {type && type[0]}\r\n      </div>\r\n      {/* race and attribute */}\r\n      <div className={styles.RaceAttrib}>\r\n        <div> {race} </div>\r\n        <img src={attributeIcon} alt={attribute} />\r\n      </div>\r\n      {/* if the card \"type\" is \"monster\", show its level/link markers/rank,\r\n      attack and defense (with their icons) */}\r\n      {type && isMonsterCard(type[0]) && (\r\n        <>\r\n          <div className={classes.linkLevelOrRank(level, showing)}>\r\n            <span>{linkLevelOrRankValue}</span>\r\n            {getLinkLevelOrRankArrayJSX()}\r\n          </div>\r\n          <div className={styles.AtkDef}>\r\n            <div>\r\n              <img src={sword} alt=\"Attack\" className={styles.SwordIcon} />\r\n              {atk}\r\n            </div>\r\n            {type[0] !== \"Link Monster\" && (\r\n              <div>\r\n                <img src={shield} alt=\"Defense\" className={styles.ShieldIcon} />\r\n                {def || 0}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n      {/* card's description or flavor text */}\r\n      <div className={styles.Description} aria-label=\"Card text\">\r\n        {desc && desc.map((sentence, i) => <div key={i}> {sentence} </div>)}\r\n      </div>\r\n      {/* cards banlist status for ocs and tcg */}\r\n      <div className={styles.Banlist} aria-label=\"Banlist status\">\r\n        {banlist_info.map((b, i) => (\r\n          <div key={i}>\r\n            {b[0]} <span> {b[1]} </span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {/* original arts and alternative ones */}\r\n      <ul className={styles.AltArtList}>\r\n        <span className={styles.AltArtTitle}> Card art </span>\r\n        {images.map((image, i) => (\r\n          <li\r\n            key={image.id}\r\n            data-id={image.id}\r\n            className={styles.AltArtImg}\r\n            onClick={handleAltImgClick}\r\n          >\r\n            {i === 0 ? `Original art` : `Alternative art ${i}`}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nDescScreen.propTypes = {\r\n  showing: PropTypes.string.isRequired,\r\n  cardDescRef: PropTypes.oneOfType([\r\n    PropTypes.func,\r\n    PropTypes.shape({ current: PropTypes.instanceOf(Element) })\r\n  ]),\r\n  dispatchSearchAction: PropTypes.func.isRequired,\r\n  data: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    attribute: PropTypes.string,\r\n    attributeIcon: PropTypes.string,\r\n    banlist_info: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\r\n    atk: PropTypes.number,\r\n    def: PropTypes.number,\r\n    desc: PropTypes.arrayOf(PropTypes.string),\r\n    images: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.number,\r\n        image_url: PropTypes.string,\r\n        image_url_small: PropTypes.string\r\n      })\r\n    ),\r\n    level: PropTypes.number,\r\n    link_markers: PropTypes.arrayOf(PropTypes.string),\r\n    link_value: PropTypes.number,\r\n    name: PropTypes.string,\r\n    race: PropTypes.string,\r\n    starArray: PropTypes.arrayOf(PropTypes.string),\r\n    type: PropTypes.arrayOf(PropTypes.string)\r\n  })\r\n}\r\n\r\nexport default memo(DescScreen)\r\n","import styles from \"./PriceScreen.module.css\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\n\r\nexport const classes = {\r\n  bestPrices: styles.BestPrices + \" \" + styles.BorderSecondary\r\n}\r\n\r\n/**\r\n * Converts the retailer's card price API response into a valid object to display in view,\r\n * in the form of an array whose items are [retailer name, card price], both strings.\r\n * @param {object} averagePricesObject An object containing each retailer and the best card price associated to it.\r\n */\r\nexport function formatCardPricesObjIntoArray(averagePricesObject, cardName) {\r\n  // convert the object to a valid array and map it as stated below before returning\r\n  // it as this function's resolution\r\n  return Object.entries(averagePricesObject).map((item) => {\r\n    // match the response. A valid retailer name is \"<retailerName>_price\"\r\n    let retailerName = item[0].match(/(.+)_price/i)[1]\r\n    // create a valid retailer url to fetch for the card by its name\r\n    const retailerURL =\r\n      uiConfigs.apiConfigs.retailerURLs[retailerName] +\r\n      encodeURIComponent(cardName)\r\n    // convert the response to uppercase\r\n    retailerName = retailerName[0].toUpperCase() + retailerName.slice(1)\r\n    // If the price is 0.00 (non-existant), replace it by \"-.--\"\r\n    const formattedCardPrice = item[1] !== \"0.00\" ? item[1] : \"-.--\"\r\n    // return the composed item of the formatted retailer name, price and fetch url\r\n    return [retailerName, formattedCardPrice, retailerURL]\r\n  })\r\n} /* Ghost+Ogre+%26+Snow+Rabbit */\r\n","import React, { memo, useContext, useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { UIContext } from \"../../../contexts/UIContext\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport { classes, formatCardPricesObjIntoArray } from \"./PriceScreen.utils\"\r\nimport styles from \"./PriceScreen.module.css\"\r\n\r\nfunction PriceScreen({\r\n  prices: { averages, sets }, // <object> \"averages\" and \"sets\" values in card object\r\n  name, // <string> the card object's \"name\" value\r\n  priceRef // <React.createRef> a reference to the first element inside outermost <div> to scroll into view\r\n}) {\r\n  // clicking on each retailer will trigger a <Toast /> before loading their sites,\r\n  // so we need toast reducer's action dispatcher from UIContext\r\n  const { dispatchToastAction } = useContext(UIContext)\r\n  // format card prices object and retailer name into a valid array to use as view\r\n  const lowestCardPrices = averages\r\n    ? formatCardPricesObjIntoArray(averages[0], name)\r\n    : null\r\n\r\n  const handleRetailerClick = useCallback(\r\n    (e) => {\r\n      // set site's name as toast text, site's url as href for <a> and the proper\r\n      // toggler to fire a setToastState reducer action. If there is no internet\r\n      // connection, show a warning in the <Toast /> instead\r\n      dispatchToastAction(\r\n        toastActionCreators.setToastState(\r\n          e.target.dataset.site,\r\n          e.target.dataset.url,\r\n          uiConfigs.togglers.toast[\r\n            navigator.onLine ? \"retailerSite\" : \"noConnection\"\r\n          ]\r\n        )\r\n      )\r\n    },\r\n    [dispatchToastAction, navigator.onLine]\r\n  )\r\n\r\n  return (\r\n    <div className={styles.Container}>\r\n      {/* target top-most div to scroll into view */}\r\n      <div className={styles.Sets} ref={priceRef}>\r\n        {/* name, avg price and code for each set the card was printed in */}\r\n        <div className={styles.BorderSecondary}>Sets and Prices</div>\r\n        {sets &&\r\n          sets.map((set, i) => (\r\n            <ul key={i} className={styles.BorderPrimary}>\r\n              <li> {set.set_name} </li>\r\n              <li>\r\n                {set.set_rarity} {set.set_rarity_code}\r\n              </li>\r\n              <li> $ {set.set_price} </li>\r\n              <li> {set.set_code} </li>\r\n            </ul>\r\n          ))}\r\n      </div>\r\n      {/* retailer names and lowest registered card prices on each of them */}\r\n      <ul className={classes.bestPrices}>\r\n        <li> Best prices </li>\r\n        {lowestCardPrices && (\r\n          <>\r\n            {lowestCardPrices.map((lcp) => (\r\n              <li key={lcp[0]}>\r\n                <span\r\n                  data-site={lcp[0]}\r\n                  data-url={lcp[2]}\r\n                  role=\"navigation\"\r\n                  onClick={handleRetailerClick}\r\n                >\r\n                  {lcp[0]}\r\n                </span>\r\n                <span> {lcp[1]} </span>\r\n              </li>\r\n            ))}\r\n          </>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nPriceScreen.propTypes = {\r\n  priceRef: PropTypes.oneOfType([\r\n    PropTypes.func,\r\n    PropTypes.shape({ current: PropTypes.instanceOf(Element) })\r\n  ]),\r\n  averages: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      amazon_price: PropTypes.string,\r\n      cardmarket_price: PropTypes.string,\r\n      coolstuffinc_price: PropTypes.string,\r\n      ebay_price: PropTypes.string,\r\n      tcgplayer_price: PropTypes.string\r\n    })\r\n  ),\r\n  name: PropTypes.string,\r\n  sets: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      set_code: PropTypes.string,\r\n      set_name: PropTypes.string,\r\n      set_price: PropTypes.string,\r\n      set_rarity: PropTypes.string,\r\n      set_rarity_code: PropTypes.string\r\n    })\r\n  )\r\n}\r\n\r\nexport default memo(PriceScreen)\r\n","import styles from \"./RotatableArrowIcon.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClassNames) =>\r\n    [styles.Container, propsClassNames?.join(\" \")].join(\" \"),\r\n  image: (direction, isArrowRotated, preventRotation, propsClassNames) =>\r\n    [\r\n      styles.ArrowImage,\r\n      isArrowRotated && !preventRotation // is rotation is not prevented:\r\n        ? styles[direction + \"Rotation\"] // arrow is rotated, add className + Rotation\r\n        : styles[direction], // arrow is not rotated or rotation is prevented, use className onlu\r\n      propsClassNames?.join(\" \")\r\n    ].join(\" \")\r\n}\r\n","import React, { useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport arrow from \"../../../assets/uiIcons/arrow2.svg\"\r\nimport useToggle from \"../../../hooks/useToggle\"\r\nimport { classes } from \"./RotatableArrowIcon.utils\"\r\n\r\nexport default function RotatableArrowIcon({\r\n  pointing = \"Left\", // <string> the string to dynamically generate classes to rotate the arrow\r\n  preventRotation = false, // <boolean> true locks arrow image in place instead of rotating it\r\n  ariaLabel = `Arrow ${pointing}`, // <string> ARIA label to assign to wrapper div\r\n  role, // <string> ARIA role, generally button\r\n  classNames = {}, // <object> classNames object. Check propTypes below for its constitution\r\n  onClick = () => {}\r\n}) {\r\n  // toggler to keep rotation status\r\n  const [isArrowRotated, rotateArrow] = useToggle(false)\r\n  // rotation string to match classNames (like \"Left\", \"UpRight\", \"DownLeft\")\r\n  const direction =\r\n    pointing.charAt(0).toUpperCase() + pointing.slice(1).toLowerCase()\r\n\r\n  const containerClick = useCallback(\r\n    (e) => {\r\n      // if rotation is not prevented, toggle its state, which injects the class that\r\n      // rotates the image depending on which \"pointing\" state is being applied.\r\n      // Afterwards, trigger onClick callback\r\n      e.persist()\r\n      !preventRotation && rotateArrow()\r\n      onClick(e)\r\n    },\r\n    [preventRotation, rotateArrow, onClick]\r\n  )\r\n\r\n  return (\r\n    <div\r\n      id={pointing}\r\n      aria-label={ariaLabel}\r\n      role={role}\r\n      onClick={containerClick}\r\n      className={classes.container(classNames.container)}\r\n    >\r\n      <img\r\n        id={pointing}\r\n        src={arrow}\r\n        alt={`Arrow ${pointing}`}\r\n        className={classes.image(\r\n          direction,\r\n          isArrowRotated,\r\n          preventRotation,\r\n          classNames.image\r\n        )}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nRotatableArrowIcon.propTypes = {\r\n  pointing: PropTypes.string,\r\n  preventRotation: PropTypes.bool,\r\n  ariaLabel: PropTypes.string,\r\n  role: PropTypes.string,\r\n  classNames: PropTypes.shape({\r\n    container: PropTypes.arrayOf(PropTypes.string),\r\n    image: PropTypes.arrayOf(PropTypes.string)\r\n  }),\r\n  onClick: PropTypes.func\r\n}\r\n","import styles from \"./DescPriceScreen.module.css\"\r\n\r\nexport const classes = {\r\n  screenDivision: (isMqXS, classNamesRefCurrent) => [\r\n    !isMqXS ? styles.HalfScreen : \"\",\r\n    classNamesRefCurrent\r\n  ],\r\n  arrow: (isMqXs, direction, isDescArrow) => ({\r\n    container: [\r\n      styles.ArrowIcon,\r\n      isMqXs\r\n        ? styles[\"ArrowPosition\" + direction]\r\n        : isDescArrow\r\n        ? \"\"\r\n        : styles.TopLeft\r\n    ],\r\n    image: [styles.ArrowImage]\r\n  })\r\n}\r\n\r\nexport const ariaLabels = {\r\n  arrow: (isMqXs, showingState, isDescArrow) =>\r\n    showingState === \"both\"\r\n      ? `Enlarge ${isDescArrow ? \"card details\" : \"sets and prices\"} screen`\r\n      : isMqXs\r\n      ? `Show card ${isDescArrow ? \"sets and prices\" : \"card details\"} screen`\r\n      : \"Show both card details and sets-and-prices screen\"\r\n}\r\n","import React, {\r\n  useState,\r\n  useRef,\r\n  useEffect,\r\n  useContext,\r\n  useCallback,\r\n  memo\r\n} from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { MediaQuery } from \"../../../contexts/MediaQueryContext\"\r\nimport * as cardSearchActionCreators from \"../../../store/CardSearch/cardSearchActionCreators\"\r\nimport CardSearchScreenDivision from \"../../../wrappers/CardSearchScreenDivision/CardSearchScreenDivision\"\r\nimport DescScreen from \"../DescScreen/DescScreen\"\r\nimport PriceScreen from \"../PriceScreen/PriceScreen\"\r\nimport RotatableArrowIcon from \"../../UI/RotatableArrowIcon/RotatableArrowIcon\"\r\nimport { classes, ariaLabels } from \"./DescPriceScreen.utils\"\r\nimport styles from \"./DescPriceScreen.module.css\"\r\n\r\nfunction DescPriceScreen({\r\n  currentCard: { prices, data }, // <object> \"prices\" and \"data\" values in currentCard object, in searchReducer\r\n  currentList, // <Array> filtered list of card objects, also in searchReducer\r\n  dispatchSearchAction // <function> searchReducer's action dispatcher\r\n}) {\r\n  const { mq } = useContext(MediaQuery)\r\n  // state and setter to track which screen is being shown at the time.\r\n  // \"right\" for card details, \"left\" for card prices, and \"both\" for both\r\n  // split in half\r\n  const [showing, setShowing] = useState(mq.xs ? \"right\" : \"both\")\r\n  // classNames for both <CardSearchScreenDivision />s. We keep them in refs\r\n  // as we need to resize screen first (re-render) and then add classes.\r\n  const descClass = useRef(mq.xs ? styles.Show : \"\")\r\n  const priceClass = useRef(mq.xs ? styles.Hide : \"\")\r\n  // ref to scroll components into view once re-rendered\r\n  const cardDescRef = useRef()\r\n  const priceRef = useRef()\r\n  // isMounting will prevent switching to <ListScreen /> or scrolling components\r\n  // into view automatically at mount phase\r\n  const isMounting = useRef(true)\r\n\r\n  const resizeScreen = useCallback(\r\n    ({ target }) => {\r\n      // target.id can be right/left/up/down, all screen-toggler arrow positions\r\n      // showing can be desc/price/both, indicating which screen is being displayed\r\n      if (showing === \"both\") {\r\n        // we are currently showing both info and prices screens, and will toggle\r\n        // it to show info (desc) only\r\n        if (target.id === \"right\" || target.id === \"up\") {\r\n          // show card info screen and hide prices screen\r\n          descClass.current = styles.Show\r\n          priceClass.current = styles.Hide\r\n          // set state to sit on card info (desc) screen\r\n          setShowing(\"desc\")\r\n          // we are toggling to show price description screen only\r\n        } else if (target.id === \"left\" || target.id === \"down\") {\r\n          // show card prices screen and hide info screen\r\n          descClass.current = styles.Hide\r\n          priceClass.current = styles.Show\r\n          // set state to sit on card prices screen\r\n          setShowing(\"price\")\r\n        }\r\n      } else if (mq.xs) {\r\n        // on xs devices, do not divide the screen. Show one at a time\r\n        if (target.id === \"right\" || target.id === \"up\") {\r\n          // show card prices screen and hide info screen\r\n          descClass.current = styles.Hide\r\n          priceClass.current = styles.Show\r\n          // set state to sit on card prices screen\r\n          setShowing(\"price\")\r\n        } else {\r\n          // show card info screen and hide prices screen\r\n          descClass.current = styles.Show\r\n          priceClass.current = styles.Hide\r\n          // set state to sit on card info (desc) screen\r\n          setShowing(\"desc\")\r\n        }\r\n        // we are not on an xs device, and we are coming from a full screen price\r\n        // or card info screen to show both at the same time.\r\n      } else {\r\n        // reset both classes. Defaults to show both.\r\n        descClass.current = \"\"\r\n        priceClass.current = \"\"\r\n        // set state to sit on both screens.\r\n        setShowing(\"both\")\r\n      }\r\n    },\r\n    [showing, mq.xs]\r\n  )\r\n\r\n  useEffect(() => {\r\n    // do nothing on mount\r\n    if (isMounting.current) isMounting.current = false\r\n    // if currentList changes, it means we searched for a card and multiple results\r\n    // came back from the API, so, toggle back to ListScreen component\r\n    else dispatchSearchAction(cardSearchActionCreators.displayListScreen())\r\n  }, [currentList, dispatchSearchAction])\r\n\r\n  useEffect(() => {\r\n    // a change on mq.xs here means the user resized their device (from landscape to\r\n    // portrait or vice-versa). So, trigger screen resize function.\r\n    if (mq.xs && showing === \"both\") {\r\n      resizeScreen({ target: { id: \"right\" } })\r\n    } else if (!mq.xs) {\r\n      resizeScreen({ target: { id: \"both\" } })\r\n    }\r\n  }, [mq.xs])\r\n\r\n  useEffect(() => {\r\n    // on mount, do nothing\r\n    if (isMounting.current) return\r\n    // mq.xs changing is the user manually switching from landscape to portrait\r\n    // and vice-versa, while data changing means we are sitting in this component\r\n    // and the user searched for a specific card, thus, not triggering a way\r\n    // back to ListScreen component.\r\n    let timeout = undefined\r\n    if (!mq.xs) {\r\n      // the device is larger than xs, scroll both screens back into view\r\n      cardDescRef.current.scrollIntoView()\r\n      timeout = setTimeout(() => priceRef.current.scrollIntoView(), 0)\r\n    } else if (showing === \"desc\" || showing === \"both\") {\r\n      // device is xs and we are currently sitting in info component or both\r\n      // screens. Info screen is brought up front by default, so scroll it up.\r\n      return cardDescRef.current.scrollIntoView({ behavior: \"smooth\" })\r\n    } else if (showing === \"price\") {\r\n      // device is xs and we are currently showing price. Scroll it up.\r\n      return priceRef.current.scrollIntoView({ behavior: \"smooth\" })\r\n    }\r\n    return () => {\r\n      // clear timer on unmount. Timer is needed to event-queue up scroll actions,\r\n      // since the animations overlay each other when done instantly.\r\n      if (timeout) clearTimeout(timeout)\r\n    }\r\n  }, [mq.xs, data])\r\n\r\n  return (\r\n    <div className={styles.Container}>\r\n      <CardSearchScreenDivision\r\n        classNames={classes.screenDivision(mq.xs, descClass.current)}\r\n      >\r\n        <DescScreen\r\n          data={data}\r\n          showing={showing}\r\n          cardDescRef={cardDescRef}\r\n          dispatchSearchAction={dispatchSearchAction}\r\n        />\r\n        <RotatableArrowIcon\r\n          pointing={mq.xs ? \"up\" : showing === \"both\" ? \"right\" : \"left\"}\r\n          preventRotation\r\n          onClick={resizeScreen}\r\n          ariaLabel={ariaLabels.arrow(mq.xs, showing, true)}\r\n          role=\"button\"\r\n          classNames={classes.arrow(mq.xs, \"Down\", true)}\r\n        />\r\n      </CardSearchScreenDivision>\r\n      <CardSearchScreenDivision\r\n        classNames={classes.screenDivision(mq.xs, priceClass.current)}\r\n      >\r\n        <PriceScreen prices={prices} name={data.name} priceRef={priceRef} />\r\n        <RotatableArrowIcon\r\n          pointing={mq.xs ? \"down\" : showing === \"both\" ? \"left\" : \"right\"}\r\n          preventRotation\r\n          onClick={resizeScreen}\r\n          ariaLabel={ariaLabels.arrow(mq.xs, showing, false)}\r\n          role=\"button\"\r\n          classNames={classes.arrow(mq.xs, \"Up\", false)}\r\n        />\r\n      </CardSearchScreenDivision>\r\n    </div>\r\n  )\r\n}\r\n\r\nDescPriceScreen.propTypes = {\r\n  prices: PropTypes.shape({\r\n    averages: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        amazon_price: PropTypes.string,\r\n        cardmarket_price: PropTypes.string,\r\n        coolstuffinc_price: PropTypes.string,\r\n        ebay_price: PropTypes.string,\r\n        tcgplayer_price: PropTypes.string\r\n      })\r\n    ),\r\n    sets: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        set_code: PropTypes.string,\r\n        set_name: PropTypes.string,\r\n        set_price: PropTypes.string,\r\n        set_rarity: PropTypes.string,\r\n        set_rarity_code: PropTypes.string\r\n      })\r\n    )\r\n  }),\r\n  data: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    attribute: PropTypes.string,\r\n    attributeIcon: PropTypes.string,\r\n    banlist_info: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\r\n    atk: PropTypes.number,\r\n    def: PropTypes.number,\r\n    desc: PropTypes.string,\r\n    images: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.number,\r\n        image_url: PropTypes.string,\r\n        image_url_small: PropTypes.string\r\n      })\r\n    ),\r\n    level: PropTypes.number,\r\n    link_markers: PropTypes.arrayOf(PropTypes.string),\r\n    link_value: PropTypes.number,\r\n    name: PropTypes.string,\r\n    race: PropTypes.string,\r\n    starArray: PropTypes.arrayOf(PropTypes.string),\r\n    type: PropTypes.arrayOf(PropTypes.string)\r\n  }),\r\n  currentList: PropTypes.array.isRequired,\r\n  dispatchSearchAction: PropTypes.func.isRequired\r\n}\r\n\r\nexport default memo(DescPriceScreen)\r\n","import styles from \"./ListScreen.module.css\"\r\n\r\nexport const classes = {\r\n  container: [styles.Container],\r\n  spinnerContainer: [styles.SpinnerContainer]\r\n}\r\n","import React, { useEffect, useRef, useCallback, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport * as cardSearchActionCreators from \"../../../store/CardSearch/cardSearchActionCreators\"\r\nimport CardSearchScreenDivision from \"../../../wrappers/CardSearchScreenDivision/CardSearchScreenDivision\"\r\nimport { getCardObject } from \"../../../utils/apiFunctions\"\r\nimport { getCardTypeStyle } from \"../../../utils/yugiohSpecificFunctions\"\r\nimport { classes } from \"./ListScreen.utils\"\r\nimport styles from \"./ListScreen.module.css\"\r\n\r\nfunction ListScreen({\r\n  isLoading, // <boolean> CardSearch's reducer fetch \"loading\" boolean state\r\n  currentCard, // <object> current loaded card object, coming from CardSearch reducer.\r\n  filterableList, // <Array> the list with all card objects in database, coming from CardSearch reducer.\r\n  dispatchSearchAction // <function> CardSearch reducer's action dispatcher\r\n}) {\r\n  // isMounting will prevent auto-switching to <ListScreen /> or <DescPriceScreen />\r\n  // view if a card object is loaded at mount phase with the useEffect below\r\n  const isMounting = useRef(true)\r\n\r\n  const fetchForCard = useCallback(\r\n    (e) => {\r\n      if (isMounting.current) return\r\n      // fire the reducer action to set the\r\n      // current card. useEffect below is listening to that to display\r\n      // DescPriceScreen component.\r\n      dispatchSearchAction(\r\n        cardSearchActionCreators.setCurrentCard(\r\n          getCardObject(filterableList[e.target.dataset.listindex])\r\n        )\r\n      )\r\n    },\r\n    [filterableList, dispatchSearchAction]\r\n  )\r\n\r\n  useEffect(() => {\r\n    // do nothing at mount, since we will not display <ListScreen /> nor <DescPriceScreen />\r\n    if (isMounting.current) isMounting.current = false\r\n    // when currentCard changes, it means we loaded a new card. Dispatch\r\n    // the reducer function which in term will load DescPriceScreen\r\n    else dispatchSearchAction(cardSearchActionCreators.displayCardScreen())\r\n  }, [currentCard, dispatchSearchAction])\r\n\r\n  return (\r\n    <CardSearchScreenDivision classNames={classes.container}>\r\n      {/* filterableList has card objects loaded in it? If so, render a list with\r\n      all of them for the user to click on. Otherwise, render some instructions */}\r\n      {filterableList.length ? (\r\n        filterableList.map((card, i) => (\r\n          <div\r\n            key={card.id}\r\n            data-id={card.name}\r\n            data-listindex={i}\r\n            disabled={isLoading}\r\n            role=\"button\"\r\n            onClick={isLoading ? null : fetchForCard}\r\n            className={styles.Card}\r\n            style={{ color: `${getCardTypeStyle(card.type)}` }}\r\n          >\r\n            {card.name}\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <div className={styles.ExtraInfo}>\r\n          <div>\r\n            Search for a card name or part of it using the search box below.\r\n          </div>\r\n          <div>\r\n            If you already searched, filter the list by typing on it. Or type a\r\n            new card name or part of its name and hit \"Search\" for new results.\r\n          </div>\r\n          <div>Check out \"Tips\" for additional information.</div>\r\n        </div>\r\n      )}\r\n    </CardSearchScreenDivision>\r\n  )\r\n}\r\n\r\nListScreen.propTypes = {\r\n  isLoading: PropTypes.bool.isRequired,\r\n  currentCard: PropTypes.shape({\r\n    img: PropTypes.string,\r\n    prices: PropTypes.object,\r\n    data: PropTypes.object\r\n  }),\r\n  filterableList: PropTypes.arrayOf(PropTypes.object),\r\n  dispatchSearchAction: PropTypes.func.isRequired\r\n}\r\n\r\nexport default memo(ListScreen)\r\n","import React from \"react\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport styles from \"./SearchScreen.module.css\"\r\n\r\nexport const classes = {\r\n  cardImgScreen: [styles.CardImageScreen],\r\n  arrowLeft: {\r\n    container: [styles.ArrowContainer, styles.ArrowContainerLeft],\r\n    arrow: [styles.ArrowArrow],\r\n    text: [styles.ExtraText, styles.ExtraTextList]\r\n  },\r\n  arrowRight: {\r\n    container: [styles.ArrowContainer, styles.ArrowContainerRight],\r\n    arrow: [styles.ArrowArrow],\r\n    text: [styles.ExtraText]\r\n  },\r\n  [uiConfigs.togglers.toast.cardImgScreen]: [styles.ToastLink],\r\n  [uiConfigs.togglers.toast.retailerSite]: [styles.ToastLinkInline],\r\n  [uiConfigs.togglers.toast.cardInfoWarning]: [styles.ToastLink]\r\n}\r\n\r\n/**\r\n * JSX to display on Toast components with plain children. They take their\r\n * togglers as the object key and return a function which takes the toast\r\n * state, the style for the toast link to click and its onClick callback\r\n * (the latter two only if a link exists in children)\r\n */\r\nexport const toastJSXs = {\r\n  [uiConfigs.togglers.toast.cardImgScreen]: (state, linkStyle, onClick) => (\r\n    <>\r\n      <span className={linkStyle} onClick={onClick}>\r\n        Click here for original art\r\n      </span>\r\n      Scroll down Card Description for alternate arts\r\n    </>\r\n  ),\r\n  [uiConfigs.togglers.toast.noConnection]: () => (\r\n    <>Cannot load resource. No internet connection.</>\r\n  ),\r\n  [uiConfigs.togglers.toast.retailerSite]: (state, linkStyle, onClick) => (\r\n    <>\r\n      Tap\r\n      <span className={linkStyle} onClick={onClick}>\r\n        {state.text}\r\n      </span>\r\n      to search for the card name there\r\n    </>\r\n  ),\r\n  [uiConfigs.togglers.toast.cardInfoWarning]: (state, linkStyle) => (\r\n    <>\r\n      <span className={linkStyle}>{state.url}</span>\r\n      {state.text}\r\n    </>\r\n  )\r\n}\r\n","import React, { useContext, useCallback, useEffect } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { CardSearchContext } from \"../../../contexts/CardSearchContext\"\r\nimport * as cardSearchActionCreators from \"../../../store/CardSearch/cardSearchActionCreators\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport useAudio from \"../../../hooks/useAudio\"\r\nimport Toast from \"../../UI/Toast/Toast\"\r\nimport ImgScreen from \"../ImgScreen/ImgScreen\"\r\nimport DescPriceScreen from \"../DescPriceScreen/DescPriceScreen\"\r\nimport ListScreen from \"../ListScreen/ListScreen\"\r\nimport ArrowIcon from \"../../UI/ArrowIcon/ArrowIcon\"\r\nimport toastmp3 from \"../../../assets/audios/toast.mp3\"\r\nimport swipemp3 from \"../../../assets/audios/swipe.mp3\"\r\nimport styles from \"./SearchScreen.module.css\"\r\nimport { classes, toastJSXs } from \"./SearchScreen.utils\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\n\r\nexport default function SearchScreen({\r\n  secondScreenState, // <boolean> second screen state toggled ON/OFF\r\n  toggleSecondScreen, // <function> second screen state toggler\r\n  toastState, // <object> toastState reducer state\r\n  dispatchToastAction, // <function> toast reducer action dispatcher\r\n  playSFXs // <boolean> universal sound effect's ON/OFF state\r\n}) {\r\n  // several states and actions from CardSearch reducer are consumed here\r\n  const { searchReducer, dispatchSearchAction } = useContext(CardSearchContext)\r\n  const {\r\n    isInListScreen,\r\n    isLoading,\r\n    currentCard,\r\n    currentList,\r\n    filterableList\r\n  } = searchReducer\r\n  // audio SFX and object to swipe between card and list components\r\n  const [swipeAudioSFX, swipeSFX] = useAudio(swipemp3, { toggleOn: playSFXs })\r\n  // audio SFX and object to toggle toast\r\n  const [toastAudioJSX, toastSFX] = useAudio(toastmp3, {\r\n    toggleOn: playSFXs,\r\n    playbackRate: 1.2\r\n  })\r\n\r\n  const handleArrowIconClick = useCallback((e) => {\r\n    // when clicking on card or list arrows, dispatch the actions to\r\n    // render the correct component\r\n    swipeSFX.restart()\r\n    if (e.target.dataset.id === \"left\") {\r\n      dispatchSearchAction(cardSearchActionCreators.displayListScreen())\r\n    } else {\r\n      dispatchSearchAction(cardSearchActionCreators.displayCardScreen())\r\n    }\r\n  })\r\n\r\n  const handleCloseToast = useCallback(() => {\r\n    // close action dispatch to assign to <Toast />'s \"X\" dismiss icon\r\n    dispatchToastAction(toastActionCreators.closeToast())\r\n  }, [dispatchToastAction])\r\n\r\n  const handleToastLinkClick = useCallback(() => {\r\n    // on card image <Toast />'s link click, dispatch the action to set the\r\n    // img url and toggle its secondary screen. Image will load there\r\n    if (toastState.type === uiConfigs.togglers.toast.cardImgScreen) {\r\n      const { images } = currentCard.data\r\n      images &&\r\n        images[0] &&\r\n        dispatchSearchAction(\r\n          cardSearchActionCreators.setAltImgId(images[0].id.toString())\r\n        )\r\n      if (!secondScreenState)\r\n        toggleSecondScreen(uiConfigs.togglers.secondaryScreens.altCardArt)\r\n      // on retailer site's <Toast /> link click, just open the reailer url\r\n      // in a new window\r\n    } else if (toastState.type === uiConfigs.togglers.toast.retailerSite) {\r\n      window.open(toastState.url, \"_blank\", \"noopener, noreferrer\")\r\n    }\r\n    // on both cases, close the toast\r\n    handleCloseToast()\r\n  }, [\r\n    toastState.type,\r\n    toastState.url,\r\n    handleCloseToast,\r\n    dispatchSearchAction,\r\n    toggleSecondScreen,\r\n    secondScreenState\r\n  ])\r\n\r\n  // to get the correct JSX to show on <Toast />, use the functions assigned to\r\n  // toastJSXs object in utilityObject.js\r\n  const toastJSX = toastJSXs[toastState.type]?.(\r\n    toastState,\r\n    classes[toastState.type],\r\n    handleToastLinkClick\r\n  )\r\n\r\n  useEffect(() => {\r\n    // when Toast triggers, play its SFX. Avoid this if we are coming from\r\n    // <DeckBuilder />, as toast would be already opened by then\r\n    toastState.isActive &&\r\n      toastState.type !== uiConfigs.togglers.toast.cardInfo &&\r\n      toastSFX.play()\r\n    // if this component mounts due to card info being requested from <DeckBuilder />\r\n    // just re-trigger toast to warn the user of possibly outdated prices\r\n    toastState.type === uiConfigs.togglers.toast.cardInfo &&\r\n      dispatchToastAction(\r\n        toastActionCreators.setToastState(\r\n          \"Prices updated the last time you opened the app.\",\r\n          \"Warning!\",\r\n          uiConfigs.togglers.toast.cardInfoWarning\r\n        )\r\n      )\r\n  }, [toastState.isActive, toastSFX])\r\n\r\n  return (\r\n    <>\r\n      {/* individual <Toast /> for this page */}\r\n      <Toast\r\n        show={toastState.isActive}\r\n        toggler={handleCloseToast}\r\n        inactiveTimeout={uiConfigs.timeouts.toast.inactiveCardImage}\r\n        refreshTimeoutOn={toastState.refreshTimeoutToggler}\r\n      >\r\n        <div className={styles.ToastText}>{toastJSX}</div>\r\n      </Toast>\r\n      {/* \"visible\" JSX from here on */}\r\n      <section className={styles.Container}>\r\n        {/* if we are in card detail and price screen, and a valid card object \r\n        is loaded in state, render components for the card image and details/prices */}\r\n        {!isInListScreen && currentCard && currentCard.data && (\r\n          <>\r\n            <ImgScreen\r\n              src={currentCard.img}\r\n              images={currentCard.data.images}\r\n              dispatchSearchAction={dispatchSearchAction}\r\n              playSFXs={playSFXs}\r\n            />\r\n            <DescPriceScreen\r\n              currentCard={currentCard}\r\n              currentList={currentList}\r\n              dispatchSearchAction={dispatchSearchAction}\r\n            />\r\n            <ArrowIcon\r\n              component=\"nav\"\r\n              pointing=\"left\"\r\n              isClickable\r\n              extraText=\"List\"\r\n              alt=\"Go to search results list\"\r\n              role=\"navigation\"\r\n              dataId=\"left\"\r\n              onClick={handleArrowIconClick}\r\n              classNames={classes.arrowLeft}\r\n            />\r\n          </>\r\n        )}\r\n        {/* if we are sitting in card list screen instead, render the component\r\n        that displays all card objects for the user to choose from */}\r\n        {isInListScreen && (\r\n          <>\r\n            <ListScreen\r\n              isLoading={isLoading}\r\n              currentCard={currentCard}\r\n              filterableList={filterableList}\r\n              dispatchSearchAction={dispatchSearchAction}\r\n            />\r\n            <ArrowIcon\r\n              component=\"nav\"\r\n              pointing=\"right\"\r\n              isClickable\r\n              extraText=\"Card\"\r\n              disabled={isLoading || !Object.keys(currentCard.data).length}\r\n              alt={`Go to searched card details${\r\n                isLoading || !Object.keys(currentCard.data).length\r\n                  ? \" (disabled)\"\r\n                  : \"\"\r\n              }`}\r\n              role=\"navigation\"\r\n              dataId=\"right\"\r\n              onClick={handleArrowIconClick}\r\n              classNames={classes.arrowRight}\r\n            />\r\n          </>\r\n        )}\r\n        {swipeAudioSFX}\r\n        {toastAudioJSX}\r\n      </section>\r\n    </>\r\n  )\r\n}\r\n\r\nSearchScreen.propTypes = {\r\n  secondScreenState: PropTypes.bool.isRequired,\r\n  toggleSecondScreen: PropTypes.func.isRequired,\r\n  toastState: PropTypes.object.isRequired,\r\n  dispatchToastAction: PropTypes.func.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired\r\n}\r\n","import styles from \"./InputWithLabel.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClassNames) =>\r\n    [styles.Container, propsClassNames?.join(\" \")].join(\" \"),\r\n  input: (propsClassNames) => [styles.Input, propsClassNames?.join(\" \")],\r\n  label: (isFocused, disabled, propsClassNames) =>\r\n    [\r\n      styles.Label,\r\n      isFocused ? styles.LabelUp : \"\", // add LabelUp class if focused\r\n      disabled ? styles.LabelDisabled : \"\", // and LabelDisabled if disabled\r\n      propsClassNames?.join(\" \")\r\n    ].join(\" \"),\r\n  helpText: (isFocused, propsClassNames) =>\r\n    [\r\n      styles.HelpText,\r\n      isFocused ? styles.HelpTextActive : \"\", // same as LabelUp above\r\n      propsClassNames?.join(\" \")\r\n    ].join(\" \")\r\n}\r\n\r\nexport function getText(textOnFocus, textOnBlur, isFocused) {\r\n  return isFocused // on element focus:\r\n    ? textOnFocus // if we assigned a particular text for focus\r\n      ? textOnFocus // use it.\r\n      : textOnBlur // Otherwise, use the default one.\r\n    : textOnBlur // If the element is not focused, use the default text\r\n}\r\n","import React, { useEffect, useRef, useCallback, memo, useState } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Input from \"../Input/Input\"\r\nimport { classes, getText } from \"./InputWithLabel.utils\"\r\n\r\nfunction InputWithLabel({\r\n  id,\r\n  value, // <string> <input>'s value\r\n  labelText, // <string> text to show on laben when not on focus\r\n  labelTextOnFocus = \"\", // <string> same, but when being focused\r\n  helpText, // <string> additional static text if needed (input's lower right corner)\r\n  helpTextOnFocus, // <string> what to show in the additional text on input focus\r\n  disabled, // <boolean> <label> and <input>'s disabled property\r\n  classNames = {}, // <object> classNames object. Check propTypes below for its constitution\r\n  ...otherProps // all other props passed to Input component\r\n}) {\r\n  // focused state boolean handler\r\n  const [isFocused, setIsFocused] = useState(false)\r\n  // to auto-trigger onBlur(), we need a reference to the input\r\n  const inputRef = useRef()\r\n\r\n  const onInputFocus = useCallback(() => {\r\n    // on focus, set focus state to true\r\n    !isFocused && setIsFocused(true)\r\n  }, [isFocused, setIsFocused])\r\n\r\n  const onInputBlur = useCallback(() => {\r\n    // on blur, if the input does not hold a value, set focus state to false\r\n    !value && setIsFocused(false)\r\n  }, [value, setIsFocused, isFocused])\r\n\r\n  useEffect(() => {\r\n    // on a given change, if input is already focused and we are blurring\r\n    // from it (a different active element), trigger onBlur()\r\n    if (document.activeElement !== inputRef.current && isFocused) onInputBlur()\r\n  })\r\n\r\n  return (\r\n    <div className={classes.container(classNames.container)}>\r\n      <label\r\n        htmlFor={id}\r\n        className={classes.label(isFocused, disabled, classNames.label)}\r\n      >\r\n        {/* on component focus, show onFocusText. Otherwise, default one */}\r\n        {getText(labelTextOnFocus, labelText, isFocused)}\r\n      </label>\r\n      <Input\r\n        id={id}\r\n        value={value}\r\n        disabled={disabled}\r\n        reference={inputRef}\r\n        onFocus={onInputFocus}\r\n        onBlur={onInputBlur}\r\n        classNames={classes.input(classNames.input)}\r\n        {...otherProps}\r\n      />\r\n      {helpText && (\r\n        <span className={classes.helpText(isFocused, classNames.helpText)}>\r\n          {/* same as <label> above */}\r\n          {getText(helpTextOnFocus, helpText, isFocused)}\r\n        </span>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nInputWithLabel.propTypes = {\r\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n  labelText: PropTypes.string.isRequired,\r\n  labelTextOnFocus: PropTypes.string,\r\n  helpText: PropTypes.string,\r\n  helpTextOnFocus: PropTypes.string,\r\n  classNames: PropTypes.shape({\r\n    container: PropTypes.arrayOf(PropTypes.string),\r\n    input: PropTypes.arrayOf(PropTypes.string),\r\n    label: PropTypes.arrayOf(PropTypes.string),\r\n    helpText: PropTypes.arrayOf(PropTypes.string)\r\n  })\r\n}\r\n\r\nexport default memo(InputWithLabel)\r\n","import styles from \"./Spinner.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClassNames) =>\r\n    [styles.Chase, propsClassNames?.join(\" \")].join(\" \"),\r\n  dots: (propsClassNames) =>\r\n    [styles.ChaseDot, propsClassNames?.join(\" \")].join(\" \")\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { classes } from \"./Spinner.utils\"\r\nimport styles from \"./Spinner.module.css\"\r\n\r\n/**\r\n * IMPORTANT!\r\n * I found the HTML and CSS of this particular Spinner some time ago when looking\r\n * at examples, and copied its base code before customizing it. If you know where\r\n * the source code is, please let me know so that I can link back to it. I did not\r\n * take down notes at the time and now I cannot seem to find it again. Thanks!\r\n */\r\nexport default function Spinner({ classNames }) {\r\n  // join default classNames and the ones coming from props into a string\r\n  // const chaseClasses = [...containerClasses, styles.Chase].join(\" \")\r\n  // const chaseDotClasses = [...dotsClasses, styles.ChaseDot].join(\" \")\r\n  const chaseClasses = classes.container(classNames.container)\r\n  const chaseDotClasses = classes.dots(classNames.dots)\r\n\r\n  return (\r\n    <div className={chaseClasses} aria-label=\"Loading\">\r\n      <div className={chaseDotClasses} />\r\n      <div className={chaseDotClasses} />\r\n      <div className={chaseDotClasses} />\r\n      <div className={chaseDotClasses} />\r\n      <div className={chaseDotClasses} />\r\n      <div className={chaseDotClasses} />\r\n    </div>\r\n  )\r\n}\r\n\r\nSpinner.propTypes = {\r\n  containerClasses: PropTypes.arrayOf(PropTypes.string),\r\n  dotsClasses: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n","import styles from \"./SearchMenu.module.css\"\r\n\r\nexport const classes = {\r\n  inputWithLabel: {\r\n    container: [styles.InputContainer]\r\n  },\r\n  spinner: {\r\n    container: [styles.SpinnerContainer]\r\n  }\r\n}\r\n\r\nconst globalbuttonStyles = {\r\n  color: \"#2f7ed8\",\r\n  letterSpacing: \"0.1rem\",\r\n  position: \"relative\",\r\n  fontStyle: \"italic\",\r\n  fontWeight: \"bold\",\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\",\r\n  transition: \"all 250ms ease\"\r\n}\r\n\r\nexport const inlineStyles = {\r\n  searchButton: globalbuttonStyles,\r\n  helpButton: {\r\n    ...globalbuttonStyles,\r\n    color: \"#6338ff\"\r\n  },\r\n  searchIcon: (isLoading, searchTerm) =>\r\n    isLoading || searchTerm.length < 2\r\n      ? { filter: \"grayscale(100%)\" }\r\n      : { filter: \"unset\" }\r\n}\r\n\r\nexport function getInputTexts(isInListScreen, currentList) {\r\n  return isInListScreen && currentList.length\r\n    ? [\r\n        'Type to filter or \"Search\" for new results',\r\n        'Type to filter or \"Search\" for new results',\r\n        \"Search / Filter mode\",\r\n        \"Search / Filter mode\"\r\n      ]\r\n    : [\r\n        \"Search for card's full or partial name\",\r\n        \"E.g. Blue-Eyes White Dragon or Blue-Eyes\",\r\n        \"Search mode\",\r\n        \"Search mode\"\r\n      ]\r\n}\r\n","import React, {\r\n  useState,\r\n  useContext,\r\n  useCallback,\r\n  useEffect,\r\n  memo\r\n} from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { CardSearchContext } from \"../../../contexts/CardSearchContext\"\r\nimport * as cardSearchActionCreators from \"../../../store/CardSearch/cardSearchActionCreators\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport InputWithLabel from \"../../UI/InputWithLabel/InputWithLabel\"\r\nimport Button from \"../../UI/Button/Button\"\r\nimport Spinner from \"../../UI/Spinner/Spinner\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport help from \"../../../assets/uiIcons/help.svg\"\r\nimport search from \"../../../assets/uiIcons/search.svg\"\r\nimport { classes, inlineStyles, getInputTexts } from \"./SearchMenu.utils\"\r\nimport styles from \"./SearchMenu.module.css\"\r\n\r\nfunction SearchMenu({\r\n  secondScreenState, // <boolean> UIContext's <SecondaryScreen /> state toggled ON/OFF\r\n  toggleSecondScreen, // <function> UIContext's <SecondaryScreen /> state toggler\r\n  screenIsFrozen, // <boolean> App.js' swipe frozen state\r\n  setScreenIsFrozen, // <function> App.js' swipe freezing toggler\r\n  dispatchToastAction // <function> UIContext's <Toast /> reducer action dispatcher\r\n}) {\r\n  // all search functionality is handled in this component, so bring them from context\r\n  const {\r\n    searchReducer,\r\n    apiFetchAndStoreRes,\r\n    dispatchSearchAction\r\n  } = useContext(CardSearchContext)\r\n  // decompose needed states from reducer\r\n  const { isLoading, currentList, isInListScreen } = searchReducer\r\n  // state and setter for <InputWithLabel />'s value\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  // texts to display on focus and blurred <InputWithLabel />'s label\r\n  const inputTexts = getInputTexts(isInListScreen, currentList)\r\n\r\n  const onInputChange = useCallback(\r\n    (e) =>\r\n      // input's value controller callback\r\n      setSearchTerm(e.target.value),\r\n    [setSearchTerm]\r\n  )\r\n\r\n  const toggleTipSecondaryScreen = useCallback(() => {\r\n    // \"Tips\" <Button /> callback. Close <Toast /> is any and trigger\r\n    // \"searchTips\" <SecondaryScreen />\r\n    dispatchToastAction(toastActionCreators.closeToast())\r\n    toggleSecondScreen(uiConfigs.togglers.secondaryScreens.searchTips)\r\n  }, [toggleSecondScreen])\r\n\r\n  useEffect(() => {\r\n    // on each keystroke in <InputWithLabel />'s input, set a timeout before\r\n    // applying filtering callback. This is because the list takes time to\r\n    // render on screen, and too many keystrokes at ones will queue up several\r\n    // callbacks, thus lagging view. So, unless timeout expires between typed\r\n    // keys, newly pressed ones will override previous callback requests via\r\n    // their cleanup here\r\n    let timeToTriggerFilter\r\n    if (isInListScreen && currentList.length) {\r\n      timeToTriggerFilter = setTimeout(() => {\r\n        dispatchSearchAction(cardSearchActionCreators.filterList(searchTerm))\r\n      }, uiConfigs.apiConfigs.filterTimeout)\r\n    }\r\n    return () => timeToTriggerFilter && clearTimeout(timeToTriggerFilter)\r\n  }, [searchTerm, isInListScreen, dispatchSearchAction, currentList.length])\r\n\r\n  function searchForCards(e) {\r\n    // form submission triggered callback. This is a SPA, so prevent <form>'s default\r\n    e.preventDefault()\r\n    // do nothing if input field is empty. Nothing to search\r\n    if (!searchTerm) return\r\n    // freeze swiping in the whole app while fetch state is loading results\r\n    setScreenIsFrozen(true)\r\n    // fire <CardSearchContext />'s fetch function\r\n    apiFetchAndStoreRes(\r\n      uiConfigs.apiConfigs.cardSearchURL.fuzzy,\r\n      encodeURIComponent(searchTerm),\r\n      (currentList) =>\r\n        dispatchSearchAction(\r\n          cardSearchActionCreators.setCurrentList(currentList)\r\n        ),\r\n      () => dispatchSearchAction(cardSearchActionCreators.setLoading()),\r\n      () => dispatchSearchAction(cardSearchActionCreators.resetFetchState()),\r\n      (error) => dispatchSearchAction(cardSearchActionCreators.setError(error)),\r\n      (currentCard) =>\r\n        dispatchSearchAction(\r\n          cardSearchActionCreators.setCurrentCard(currentCard)\r\n        )\r\n    )\r\n      .then(() => {\r\n        // on a successful fetch, clear <input> and unfreeze the app\r\n        setSearchTerm(\"\")\r\n        setScreenIsFrozen(false)\r\n      })\r\n      .catch((err) => {\r\n        // on failed fetch, log the error and unfreeze the app\r\n        console.log(err)\r\n        setScreenIsFrozen(false)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <form className={styles.Container} onSubmit={searchForCards}>\r\n      {/* \"Tips\" button */}\r\n      <Button\r\n        typeButton\r\n        type=\"secondary\"\r\n        style={inlineStyles.helpButton}\r\n        disabled={screenIsFrozen}\r\n        nonStyledDisabled={secondScreenState}\r\n        onClick={toggleTipSecondaryScreen}\r\n      >\r\n        <img\r\n          className={styles.HelpIcon}\r\n          src={help}\r\n          alt=\"Search help and tips\"\r\n        />\r\n        Tips\r\n      </Button>\r\n      {/* Input and label used to search for cards */}\r\n      <InputWithLabel\r\n        id=\"search\"\r\n        type=\"text\"\r\n        value={searchTerm}\r\n        labelText={inputTexts[0]}\r\n        helpText={inputTexts[2]}\r\n        disabled={isLoading}\r\n        autoComplete=\"off\"\r\n        role=\"search\"\r\n        onChange={onInputChange}\r\n        labelTextOnFocus={inputTexts[1]}\r\n        helpTextOnFocus={inputTexts[3]}\r\n        classNames={classes.inputWithLabel}\r\n      />\r\n      {/* \"Searcg\" button */}\r\n      <Button\r\n        typeSubmit\r\n        style={inlineStyles.searchButton}\r\n        disabled={isLoading || searchTerm.length < 2}\r\n        nonStyledDisabled={secondScreenState}\r\n      >\r\n        <img\r\n          className={styles.SearchIcon}\r\n          src={search}\r\n          alt=\"Search help and tips\"\r\n          style={inlineStyles.searchIcon(isLoading, searchTerm)}\r\n        />\r\n        {/* if loading state, show <Spinner />, otherwise \"Search\" */}\r\n        {isLoading ? <Spinner classNames={classes.spinner} /> : \"Search\"}\r\n      </Button>\r\n    </form>\r\n  )\r\n}\r\n\r\nSearchMenu.propTypes = {\r\n  secondScreenState: PropTypes.bool.isRequired,\r\n  toggleSecondScreen: PropTypes.func.isRequired,\r\n  screenIsFrozen: PropTypes.bool.isRequired,\r\n  setScreenIsFrozen: PropTypes.func.isRequired,\r\n  dispatchToastAction: PropTypes.func.isRequired\r\n}\r\n\r\nexport default memo(SearchMenu)\r\n","import styles from \"./SelectionMenuScreen.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClassNames) =>\r\n    [styles.Container, propsClassNames?.join(\" \")].join(\" \"),\r\n  menu: (propsClassNames) =>\r\n    [styles.Menu, propsClassNames?.join(\" \")].join(\" \"),\r\n  menuItem: (title, currentOption, propsClassNames) =>\r\n    [\r\n      styles.MenuItem,\r\n      title === currentOption ? styles.Active : \"\",\r\n      propsClassNames?.join(\" \")\r\n    ].join(\" \"),\r\n  content: (propsClassNames) =>\r\n    [styles.Content, propsClassNames?.join(\" \")].join(\" \"),\r\n  contentItem: (propsClassNames) =>\r\n    [styles.ContentItem, propsClassNames?.join(\" \")].join(\" \")\r\n}\r\n\r\nexport const inlineStyles = {\r\n  menuItem: (titlesArray) => ({ width: `calc(100% / ${titlesArray.length})` })\r\n}\r\n","import React, { useState, useEffect, useRef, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\"\r\nimport useAudio from \"../../../hooks/useAudio\"\r\nimport switchTitlesmp3 from \"../../../assets/audios/switchTitles.mp3\"\r\nimport { classes, inlineStyles } from \"./SelectionMenuScreen.utils\"\r\n\r\nfunction SelectionMenuScreen({\r\n  items = {}, // <object> (must) object to map titles and content. Shape {<string>: <string>}\r\n  playSFXs, // <object> (must) useAudio() sfx object to assign to titles\r\n  customTitles, // <object> (optional) shape {<string>: <li>} keys MUST MATCH keys in items, and MUST have data-id set to the key string!\r\n  ulContentAreLiTags, // <boolean> (optional) set it to true if items object's values are custom <li>s.\r\n  animation, // <string> (optional) the animation class name to add to <li>. Must match the ones in this component's CSS module.\r\n  onMenuItemClick, // <function> (optional) callback that triggers when clicking on titles\r\n  forceSelectDefault, // <any> (optional observer) if this value mutates, defaultTitle assigned below will be automatically selected.\r\n  defaultTitle, // <string> (optional) the name of the title (of one key in \"items\" object) to force select with boolean above\r\n  classNames = {} // <object> classNames object. Check propTypes below for its constitution\r\n}) {\r\n  // if we are passing \"customTitles\" object grab titles from its entries {key: <title>}.\r\n  // Otherwise, get all titles from \"items\" object keys\r\n  const titlesArray = customTitles\r\n    ? Object.entries(customTitles)\r\n    : Object.keys(items)\r\n\r\n  // state to handle the selected title. Set the first option as starting selection\r\n  const [currentOption, setCurrentOption] = useState(\r\n    customTitles ? titlesArray[0][0] : titlesArray[0]\r\n  )\r\n  // ref to scroll the content into view\r\n  const contentItemRef = useRef()\r\n  // useAudio() hook for \"switching titles\" sfx (JSX and SFX controles object)\r\n  const [switchTitlesAudioJSX, switchTitlesSFX] = useAudio(switchTitlesmp3, {\r\n    toggleOn: playSFXs,\r\n    playbackRate: 1.5\r\n  })\r\n\r\n  const handleMenuItemClick = (e) => {\r\n    // on a menu option click, play its SFX, set state to deactivate the\r\n    // previous selection and activate the target one. If there is a\r\n    // callback assigned to menu items, trigger it passing the event object\r\n    switchTitlesSFX.play()\r\n    setCurrentOption(e.target.dataset.id)\r\n    onMenuItemClick && onMenuItemClick(e)\r\n  }\r\n\r\n  useEffect(() => {\r\n    // forceSelectDefault is an optional observer state passed in props.\r\n    // If it exists, each time it mutates and the current active title is not\r\n    // the one set as default title, force select that default title\r\n    forceSelectDefault &&\r\n      currentOption !== defaultTitle &&\r\n      setCurrentOption(defaultTitle)\r\n  }, [forceSelectDefault])\r\n\r\n  useEffect(() => {\r\n    // scroll into view when switching options\r\n    contentItemRef.current.scrollIntoView({ behavior: \"smooth\" })\r\n  }, [currentOption])\r\n\r\n  return (\r\n    <div className={classes.container(classNames.container)}>\r\n      <ul className={classes.menu(classNames.menu)}>\r\n        {titlesArray.map((title, i) =>\r\n          // if no customTitles were passed, we are working with regular string titles.\r\n          // map them into valid <li> tags\r\n          !customTitles ? (\r\n            <li\r\n              key={i}\r\n              data-id={title}\r\n              onClick={\r\n                // when switching to a new active title that's not the current\r\n                // one, play the toggle SFX, set this new title as active and if\r\n                // there was a callback assigned, trigger it\r\n                title === currentOption ? null : handleMenuItemClick\r\n              }\r\n              // current active title gets styles.Active\r\n              className={classes.menuItem(\r\n                title,\r\n                currentOption,\r\n                classNames.menuItem\r\n              )}\r\n              // each title title share the same width\r\n              style={inlineStyles.menuItem(titlesArray)}\r\n            >\r\n              {title}\r\n            </li>\r\n          ) : (\r\n            // we are mapping custom titles, on an array where\r\n            // titles are [title string, custom li children]\r\n            <li\r\n              key={i}\r\n              data-id={title[0]}\r\n              onClick={title[0] === currentOption ? null : handleMenuItemClick}\r\n              className={classes.menuItem(\r\n                title[0],\r\n                currentOption,\r\n                classNames.menuItem\r\n              )}\r\n              style={inlineStyles.menuItem(titlesArray)}\r\n            >\r\n              {title[1]} {/* use default <li> content here */}\r\n            </li>\r\n          )\r\n        )}\r\n      </ul>\r\n      {\r\n        // Listen to boolean. if we are passing custom <li>s as content, then use those.\r\n        // Otherwise, create one <li> and insert what's coming from content there.\r\n        // This component will always inject styles for <li>s (custom or not)\r\n        ulContentAreLiTags ? (\r\n          <div\r\n            ref={contentItemRef}\r\n            className={classes.content(classNames.content)}\r\n          >\r\n            {\r\n              // are we passing an animation className string? If so, render a TransitionGroup\r\n              // component, and all <li> tags wrapped with CSSTransition using \"animation\" as\r\n              // classNames. It must match a class name inside this components CSS module file,\r\n              animation ? (\r\n                <TransitionGroup\r\n                  component=\"ul\"\r\n                  style={{ margin: 0, padding: 0 }}\r\n                >\r\n                  {items[currentOption].map((item) => (\r\n                    <CSSTransition\r\n                      key={item.key}\r\n                      component={null}\r\n                      timeout={250}\r\n                      classNames={animation}\r\n                      mountOnEnter\r\n                      unmountOnExit\r\n                    >\r\n                      {item}\r\n                    </CSSTransition>\r\n                  ))}\r\n                </TransitionGroup>\r\n              ) : (\r\n                // we are not passing an \"animation\" string, so just render the custom <li> tags\r\n                items[currentOption].map((item) => (\r\n                  <React.Fragment key={item.key}> {item} </React.Fragment>\r\n                ))\r\n              )\r\n            }\r\n          </div>\r\n        ) : (\r\n          // content is an array of plain text elements, render them as <li>, injecting\r\n          // generic styles. Wrap them directly in <ul> instead of a <div> like before\r\n          <ul\r\n            ref={contentItemRef}\r\n            className={classes.content(classNames.content)}\r\n          >\r\n            {items[currentOption].map((item, i) => (\r\n              <li\r\n                className={classes.contentItem(classNames.contentItem)}\r\n                key={i}\r\n              >\r\n                {item}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )\r\n      }\r\n      {switchTitlesAudioJSX}\r\n    </div>\r\n  )\r\n}\r\n\r\nSelectionMenuScreen.propTypes = {\r\n  items: PropTypes.object.isRequired,\r\n  playSFXs: PropTypes.bool,\r\n  customTitles: PropTypes.object,\r\n  ulContentAreLiTags: PropTypes.bool,\r\n  animation: PropTypes.string,\r\n  onMenuItemClick: PropTypes.func,\r\n  forceSelectDefault: PropTypes.any,\r\n  defaultTitle: PropTypes.string,\r\n  classNames: PropTypes.shape({\r\n    container: PropTypes.arrayOf(PropTypes.string),\r\n    menu: PropTypes.arrayOf(PropTypes.string),\r\n    menuItem: PropTypes.arrayOf(PropTypes.string),\r\n    content: PropTypes.arrayOf(PropTypes.string),\r\n    contentItem: PropTypes.arrayOf(PropTypes.string)\r\n  })\r\n}\r\n\r\nexport default memo(SelectionMenuScreen)\r\n","import styles from \"./AltArtImgDisplay.module.css\"\r\n\r\nexport const classes = {\r\n  spinner: {\r\n    container: [styles.SpinnerContainer]\r\n  }\r\n}\r\n","import React, { useCallback, useRef, useState, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport QuickPinchZoom, { make3dTransformValue } from \"react-quick-pinch-zoom\"\r\nimport Spinner from \"../../UI/Spinner/Spinner\"\r\nimport cardNotFound from \"../../../assets/images/cardNotFound.jpg\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport { classes } from \"./AltArtImgDisplay.utils\"\r\nimport styles from \"./AltArtImgDisplay.module.css\"\r\n\r\nfunction AltArtImgDisplay({\r\n  altImgId // <string> the id of the target image to retrieve from database\r\n}) {\r\n  // boolean and setter to control <Spinner /> loading/unloading\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  // a ref to the image, needed by QuickPinchZoom\r\n  const imgRef = useRef()\r\n  // taken from QuickPinchZoom documentation as is\r\n  const onUpdate = useCallback(({ x, y, scale }) => {\r\n    const { current: img } = imgRef\r\n    if (img) {\r\n      const value = make3dTransformValue({ x, y, scale })\r\n      img.style.setProperty(\"transform\", value)\r\n    }\r\n  }, [])\r\n  // callback on setIsLoading to avoid creating arrow functions in JSX\r\n  const setIsLoadingToFalse = useCallback(() => setIsLoading(false), [\r\n    setIsLoading\r\n  ])\r\n\r\n  return (\r\n    <div className={styles.Container}>\r\n      {isLoading && <Spinner classNames={classes.spinner} />}\r\n      <QuickPinchZoom\r\n        onUpdate={onUpdate}\r\n        zoomOutFactor={0}\r\n        minZoom={0.7}\r\n        maxZoom={3}\r\n        onDragStart={setIsLoadingToFalse}\r\n        onZoomStart={setIsLoadingToFalse}\r\n      >\r\n        <img\r\n          ref={imgRef}\r\n          src={\r\n            `${uiConfigs.apiConfigs.cardImgFetchUrl}${altImgId}.jpg` ||\r\n            cardNotFound\r\n          }\r\n          alt={`Alternative Art id ${altImgId}`}\r\n          className={styles.CardImage}\r\n        />\r\n      </QuickPinchZoom>\r\n    </div>\r\n  )\r\n}\r\n\r\nAltArtImgDisplay.propTypes = {\r\n  altImgId: PropTypes.string.isRequired\r\n}\r\n\r\nexport default memo(AltArtImgDisplay)\r\n","import React, { useEffect, useContext, useState } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { CardSearchContext } from \"../../../contexts/CardSearchContext\"\r\nimport * as cardSearchActionCreators from \"../../../store/CardSearch/cardSearchActionCreators\"\r\nimport SecondaryScreen from \"../../UI/SecondaryScreen/SecondaryScreen\"\r\nimport ErrorMessage from \"../../../wrappers/ErrorMessage/ErrorMessage\"\r\nimport SelectionMenuScreen from \"../../UI/SelectionMenuScreen/SelectionMenuScreen\"\r\nimport AltArtImgDisplay from \"../AltArtImgDisplay/AltArtImgDisplay\"\r\nimport {\r\n  errorMessages,\r\n  secondaryScreensData\r\n} from \"../../../utils/utilityObjects\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\n\r\nexport default function SecondaryScreens({\r\n  toggleSecondScreen, // <function> UIContext's secondary screen toggler\r\n  secondScreenState, // <boolean> UIContext's secondary screen state\r\n  secondScreenType, // <string> UIContext's secondary screen type\r\n  playSFXs, // <boolean> global ON/OFF sfx switch\r\n  modalSFX // <object> useAudio()'s controls for secondary screen toggling sfx\r\n}) {\r\n  // grab reducer state and action dispatcher from CardSearchContext\r\n  const { searchReducer, dispatchSearchAction } = useContext(CardSearchContext)\r\n  // flag to stop first useEffect from triggering endlessly if there is no internet\r\n  // connection\r\n  const [hasWarnedOfNoConnection, setHasWarnedOfNoConnection] = useState(false)\r\n  // shorthand to avoid code repetition\r\n  const togglers = uiConfigs.togglers.secondaryScreens\r\n  // save secondary screen types match as boolean. They will trigger the correct\r\n  // <SecondaryScreen /> depeding on the type\r\n  const isNoInternetConnectionScreen =\r\n    secondScreenType === togglers.noInternetConnection\r\n  const isSearchErrorScreen = secondScreenType === togglers.cardSearchError\r\n  const isSearchTipsScreen = secondScreenType === togglers.searchTips\r\n  const isAltCardArtScreen = secondScreenType === togglers.altCardArt\r\n\r\n  useEffect(() => {\r\n    // at mount, if the user is not connected to internet, they will not be able to\r\n    // search for cards. So, warn them instantly. Also, set the connection flag to\r\n    // true so that this useEffect does not trigger again on next renders\r\n    if (!navigator.onLine && !hasWarnedOfNoConnection) {\r\n      toggleSecondScreen(togglers.noInternetConnection)\r\n      setHasWarnedOfNoConnection(true)\r\n    }\r\n  }, [toggleSecondScreen, togglers.noInternetConnection])\r\n\r\n  useEffect(() => {\r\n    // on an unsuccessful search (flagged by hasError state in reducer), notify the\r\n    // user and clear reducer's search state (clear error state)\r\n    if (searchReducer.hasError) {\r\n      toggleSecondScreen(togglers.cardSearchError)\r\n      dispatchSearchAction(cardSearchActionCreators.resetFetchState())\r\n    }\r\n  }, [searchReducer.hasError, toggleSecondScreen, dispatchSearchAction])\r\n\r\n  return (\r\n    <>\r\n      {secondScreenState && (\r\n        <>\r\n          <SecondaryScreen\r\n            toggle={toggleSecondScreen}\r\n            small={isSearchErrorScreen || isNoInternetConnectionScreen}\r\n            scrollable={isSearchTipsScreen || isAltCardArtScreen}\r\n            animation=\"translateDown\"\r\n            sfxObj={modalSFX}\r\n          >\r\n            {\r\n              // mount phase \"no internet connection\" Secondary Screen\r\n              isNoInternetConnectionScreen && (\r\n                <ErrorMessage>\r\n                  {errorMessages.noInternetConnection}\r\n                </ErrorMessage>\r\n              )\r\n            }\r\n            {\r\n              // unsuccessful search Secondary Screen\r\n              isSearchErrorScreen && (\r\n                <ErrorMessage> {errorMessages.cardSearchError} </ErrorMessage>\r\n              )\r\n            }\r\n            {\r\n              // \"Tips\" search <Button /> Secondary Screen\r\n              isSearchTipsScreen && (\r\n                <SelectionMenuScreen\r\n                  items={secondaryScreensData.searchTips.items}\r\n                  playSFXs={playSFXs}\r\n                />\r\n              )\r\n            }\r\n            {\r\n              // card image Secondary Screen\r\n              isAltCardArtScreen && (\r\n                <AltArtImgDisplay altImgId={searchReducer.altImgId} />\r\n              )\r\n            }\r\n          </SecondaryScreen>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nSecondaryScreens.propTypes = {\r\n  secondScreenType: PropTypes.string.isRequired,\r\n  secondScreenState: PropTypes.bool.isRequired,\r\n  toggleSecondScreen: PropTypes.func.isRequired,\r\n  modalSFX: PropTypes.object.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport SearchScreen from \"../../components/CardSearch/SearchScreen/SearchScreen\"\r\nimport SearchMenu from \"../../components/CardSearch/SearchMenu/SearchMenu\"\r\nimport styles from \"./CardSearchPage.module.css\"\r\nimport SecondaryScreens from \"../../components/CardSearch/SecondaryScreens/SecondaryScreens\"\r\n\r\nexport default function CardSearchPage({\r\n  toggleSecondScreen, // <function> UIContext's secondary screen toggler\r\n  secondScreenState, // <boolean> UIContext's secondary screen state\r\n  secondScreenType, // <string> UIContext's secondary screen type\r\n  toastState, // <oblject> UIContext's <Toast /> reducer state\r\n  dispatchToastAction, // <function> UIContext's <Toast /> action dispatcher\r\n  screenIsFrozen, // <boolean> UIContext's boolean state to freeze swiping\r\n  setScreenIsFrozen, // <function> UIContext's swipe-freezing toggler\r\n  modalSFX, // <object> useAudio()'s controls for secondary screen toggling sfx\r\n  playSFXs // <boolean> global ON/OFF sfx switch\r\n}) {\r\n  return (\r\n    <>\r\n      <SecondaryScreens\r\n        toggleSecondScreen={toggleSecondScreen}\r\n        secondScreenState={secondScreenState}\r\n        secondScreenType={secondScreenType}\r\n        modalSFX={modalSFX}\r\n        playSFXs={playSFXs}\r\n      />\r\n      <main className={styles.Container}>\r\n        <SearchScreen\r\n          playSFXs={playSFXs}\r\n          toastState={toastState}\r\n          dispatchToastAction={dispatchToastAction}\r\n          toggleSecondScreen={toggleSecondScreen}\r\n          secondScreenState={secondScreenState}\r\n        />\r\n        <SearchMenu\r\n          secondScreenState={secondScreenState}\r\n          toggleSecondScreen={toggleSecondScreen}\r\n          setScreenIsFrozen={setScreenIsFrozen}\r\n          screenIsFrozen={screenIsFrozen}\r\n          dispatchToastAction={dispatchToastAction}\r\n        />\r\n      </main>\r\n    </>\r\n  )\r\n}\r\n\r\nCardSearchPage.propTypes = {\r\n  toggleSecondScreen: PropTypes.func.isRequired,\r\n  secondScreenState: PropTypes.bool.isRequired,\r\n  secondScreenType: PropTypes.string.isRequired,\r\n  toastState: PropTypes.object.isRequired,\r\n  dispatchToastAction: PropTypes.func.isRequired,\r\n  screenIsFrozen: PropTypes.bool.isRequired,\r\n  setScreenIsFrozen: PropTypes.func.isRequired,\r\n  modalSFX: PropTypes.object.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired\r\n}\r\n","import styles from \"./OptionsTitle.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClassNames) =>\r\n    [styles.Container, propsClassNames?.join(\" \")].join(\" \")\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { classes } from \"./OptionsTitle.utils\"\r\n\r\nexport default function OptionsTitle({ children, classNames }) {\r\n  return <div className={classes.container(classNames)}>{children}</div>\r\n}\r\n\r\nOptionsTitle.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { CSSTransition } from \"react-transition-group\"\r\nimport MiniCircle from \"../MiniCircle/MiniCircle\"\r\n\r\nexport default function MiniCircleWithTransition({\r\n  triggerOn, // <boolean> true will mount the component and toggle its CSS Transition\r\n  ...otherProps // <object> all other <MiniCircle /> props\r\n}) {\r\n  return (\r\n    <CSSTransition\r\n      in={triggerOn}\r\n      timeout={100}\r\n      component={null}\r\n      classNames=\"grow\"\r\n      mountOnEnter\r\n      unmountOnExit\r\n    >\r\n      <MiniCircle {...otherProps} />\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nMiniCircleWithTransition.propTypes = {\r\n  triggerOn: PropTypes.bool.isRequired\r\n}\r\n","import add from \"../../../assets/uiIcons/add.svg\"\r\nimport save from \"../../../assets/uiIcons/save.svg\"\r\nimport trash from \"../../../assets/uiIcons/trash.svg\"\r\nimport styles from \"./SaveDeleteOrAddDeck.module.css\"\r\n\r\nexport const classes = {\r\n  title: (propsClassNames) => [styles.Title, propsClassNames?.join(\" \")],\r\n  spinner: (propsClassNames) => ({\r\n    container: [styles.SpinnerContainer, propsClassNames?.join(\" \")]\r\n  }),\r\n  miniCircle: (propsClassNames) => [\r\n    styles.MiniCircle,\r\n    propsClassNames?.join(\" \")\r\n  ],\r\n  miniCircleImg: (isDeleteDeckComponent, isAddDeckComponent, propsClassNames) =>\r\n    [\r\n      styles.MiniCircleImg,\r\n      isDeleteDeckComponent\r\n        ? [styles.DeleteMiniCircle]\r\n        : isAddDeckComponent\r\n        ? [styles.AddMiniCircle]\r\n        : null,\r\n      propsClassNames?.join(\" \")\r\n    ].join(\" \"),\r\n  disabledText: (propsClassNames) =>\r\n    [styles.DisabledText, propsClassNames?.join(\" \")].join(\" \")\r\n}\r\n\r\nexport function getComponentProperties(isSave, isDelete, isAdd) {\r\n  if (isSave)\r\n    return {\r\n      title: \"Save current\",\r\n      src: save,\r\n      alt: \"save image\",\r\n      operation: \"saving\",\r\n      disabledText: \"Current working deck is saved\"\r\n    }\r\n  if (isDelete)\r\n    return {\r\n      title: \"Delete selected\",\r\n      src: trash,\r\n      alt: \"delete image\",\r\n      operation: \"deleting\",\r\n      disabledText: 'Select a deck on \"Deck select\" to delete'\r\n    }\r\n  if (isAdd)\r\n    return {\r\n      title: \"Add new\",\r\n      src: add,\r\n      alt: \"add image\",\r\n      operation: \"adding\",\r\n      disabledText: \"Maximum deck limit reached\"\r\n    }\r\n}\r\n","import React, { useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport OptionsTitle from \"../../../wrappers/OptionsTitle/OptionsTitle\"\r\nimport Spinner from \"../../UI/Spinner/Spinner\"\r\nimport MiniCircleWithTransition from \"../../UI/MiniCircleWithTransition/MiniCircleWithTransition\"\r\nimport { classes, getComponentProperties } from \"./SaveDeleteOrAddDeck.utils\"\r\n// import styles from \"./SaveDeleteOrAddDeck.module.css\"\r\n\r\nexport default function SaveDeleteOrAddDeck({\r\n  isSaveDeckComponent, // <boolean> on true, we are rendering a save deck component\r\n  isDeleteDeckComponent, // <boolean> on true, we are rendering a delete deck component\r\n  isAddDeckComponent, // <boolean> on true, we are rendering an add deck component\r\n  currentOperation, // <string> \"saving\", \"adding\" or \"deleting\"\r\n  clickedDeckId, // <number> the id of <DeckMenu />'s clicked <Button />\r\n  handleDeckChange, // <function> this component's <MiniCircle /> onClick callback\r\n  canSave, // <boolean> current selected deck's save state (true === modified but unsaved)\r\n  deckLimitwasReached, // <boolean> true means no more decks can added by Add Deck\r\n  classNames = {} // <object> classNames keys and values. Check them in propTypes below\r\n}) {\r\n  // cmpProps will store all particular props needed to render this component's JSX\r\n  // depending on the type of component being requested from parent\r\n  const cmpProps = getComponentProperties(\r\n    isSaveDeckComponent,\r\n    isDeleteDeckComponent,\r\n    isAddDeckComponent\r\n  )\r\n\r\n  const changeOperationState = useCallback(() => {\r\n    // trigger parent's deckChange callback with the respective operation string.\r\n    // This will summon useEffect() there, listening to operation changes\r\n    handleDeckChange(cmpProps.operation)\r\n  }, [handleDeckChange, cmpProps.operation])\r\n\r\n  return (\r\n    <>\r\n      <OptionsTitle classNames={classes.title(classNames.title)}>\r\n        {cmpProps.title}\r\n      </OptionsTitle>\r\n      {\r\n        // on \"save deck\" component and \"saving\" operation, we are saving a\r\n        // deck in local storage. Render a <Spinner /> as we wait\r\n        isSaveDeckComponent && currentOperation === \"saving\" ? (\r\n          <Spinner classNames={classes.spinner(classNames.spinner)} />\r\n        ) : (\r\n          // otherwise, always render a <MiniCircle /> to click on\r\n          <MiniCircleWithTransition\r\n            triggerOn={\r\n              isSaveDeckComponent\r\n                ? canSave // on \"save deck\" component, show if there are unsaved changes in current deck\r\n                : isDeleteDeckComponent\r\n                ? !!clickedDeckId // on \"delete deck\" component, show if clickedDeckId > 0, meaning there is more than 1 deck\r\n                : !deckLimitwasReached // on \"add deck\" component, show if deck quantity limit was not reached\r\n            }\r\n            animateOnClick\r\n            onClick={changeOperationState}\r\n            display={\r\n              <img\r\n                src={cmpProps.src}\r\n                alt={cmpProps.alt}\r\n                className={classes.miniCircleImg(\r\n                  isDeleteDeckComponent,\r\n                  isAddDeckComponent,\r\n                  classNames.miniCircleImg\r\n                )}\r\n              />\r\n            }\r\n            classNames={classes.miniCircle(classNames.miniCircle)}\r\n          />\r\n        )\r\n      }\r\n      {\r\n        // for \"save deck\" component, show disabled text if changes were already\r\n        // saved and current operation was resetted (is null)\r\n        isSaveDeckComponent && !canSave && !currentOperation && (\r\n          <span className={classes.disabledText(classNames.disabledText)}>\r\n            {cmpProps.disabledText}\r\n          </span>\r\n        )\r\n      }\r\n      {\r\n        // for \"delete deck\" component, show disabled text if we are not already\r\n        // attempting to delete a deck (currentOperation !== \"deleting\"), and\r\n        // clickedDeckId > 1 (Default deck is id 0, so it cannot be deleted)\r\n        isDeleteDeckComponent &&\r\n          currentOperation !== \"deleting\" &&\r\n          !!!clickedDeckId && (\r\n            <span className={classes.disabledText(classNames.disabledText)}>\r\n              {cmpProps.disabledText}\r\n            </span>\r\n          )\r\n      }\r\n      {\r\n        // for \"add deck\" component, show disabled text if we exceeded the maximum\r\n        // amount of decks we can create\r\n        isAddDeckComponent && deckLimitwasReached && (\r\n          <span className={classes.disabledText(classNames.disabledText)}>\r\n            {cmpProps.disabledText}\r\n          </span>\r\n        )\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nSaveDeleteOrAddDeck.propTypes = {\r\n  isSaveDeckComponent: PropTypes.bool,\r\n  isDeleteDeckComponent: PropTypes.bool,\r\n  isAddDeckComponent: PropTypes.bool,\r\n  currentOperation: PropTypes.string,\r\n  clickedDeckId: PropTypes.number,\r\n  handleDeckChange: PropTypes.func.isRequired,\r\n  canSave: PropTypes.bool,\r\n  deckLimitwasReached: PropTypes.bool,\r\n  classNames: PropTypes.shape({\r\n    title: PropTypes.arrayOf(PropTypes.string),\r\n    miniCircle: PropTypes.arrayOf(PropTypes.string),\r\n    miniCircleImg: PropTypes.arrayOf(PropTypes.string),\r\n    disabledText: PropTypes.arrayOf(PropTypes.string)\r\n  })\r\n}\r\n","export const classes = {\r\n  button: (propsClassNames) => [\r\n    \"width92\",\r\n    \"height20\",\r\n    \"bold\",\r\n    \"italic\",\r\n    propsClassNames?.join(\" \")\r\n  ]\r\n}\r\n","import React, { useState, useCallback, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Button from \"../../UI/Button/Button\"\r\nimport { classes } from \"./DeckButton.utils\"\r\n\r\nfunction DeckButton({\r\n  children,\r\n  deckId, // <number> the deck's id in DeckConstructor reducer object (\"deck_<id>\")\r\n  canSave, // <boolean> on true, the deck was modified. False means the deck was saved\r\n  isActiveDeck, // <boolean> True indicates the deck corresponding to the button is loaded\r\n  isDemoComponent, // <boolean> True cycles through clickstates triggering no onClick callbacks\r\n  onClick, // <function> <Button />'s onClick handler\r\n  ariaPressed, // <string> True on clickState !== 0\r\n  classNames // <Array> an array of className strings\r\n}) {\r\n  // text state and handler for text displayed on different clickStates\r\n  const [text, setText] = useState(children)\r\n  // click state and handler (0 = not clicked, 1 = clicked)\r\n  const [clickState, setClickState] = useState(0)\r\n\r\n  const handleBlur = useCallback(() => {\r\n    // if we blur out of the clicked (active) <Button />, set it as not clicked\r\n    // and return its children to default\r\n    setClickState(0)\r\n    setText(children)\r\n  }, [setText, setClickState, children])\r\n\r\n  function handleClick() {\r\n    // upon clicking, if target clickState === 0\r\n    if (!clickState) {\r\n      // given the case we clicked on an already loaded deck, set its text to\r\n      // indicate it. Otherwise, tell the user clicking again will load it\r\n      setText(\r\n        isActiveDeck ? \"Deck is currently active\" : \"Click again to load deck\"\r\n      )\r\n      // also, set the currently clicked button's state to 1 (clicked once)\r\n      setClickState(1)\r\n    }\r\n    // Demo component is in <DeckHelp />, which only serves as a visual indicator\r\n    // of how to load a deck, and its onClick callback is null\r\n    isDemoComponent && clickState > 0 && setText(\"Deck loaded!\")\r\n    // call upon onClick's callback\r\n    onClick(deckId, clickState, canSave, isActiveDeck)\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      type={clickState ? \"primary\" : \"secondary\"}\r\n      nonStylesDisabled={isActiveDeck} // we need a disabled button without being grayed out\r\n      sutileAnimation\r\n      onBlur={handleBlur}\r\n      onClick={handleClick}\r\n      ariaPressed={ariaPressed}\r\n      classNames={classes.button(classNames)}\r\n    >\r\n      {text}\r\n    </Button>\r\n  )\r\n}\r\n\r\nDeckButton.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  deckId: PropTypes.number.isRequired,\r\n  canSave: PropTypes.bool.isRequired,\r\n  isActiveDeck: PropTypes.bool.isRequired,\r\n  isDemoComponent: PropTypes.bool,\r\n  onClick: PropTypes.func.isRequired,\r\n  ariaPressed: PropTypes.bool.isRequired,\r\n  classNames: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n\r\nexport default memo(DeckButton)\r\n","import styles from \"./DeckMenu.module.css\"\r\n\r\nexport const classes = {\r\n  title: (propsClassNames) => [styles.Title, propsClassNames?.join(\" \")],\r\n  deckSelect: (propsClassNames) =>\r\n    [styles.Select, propsClassNames?.join(\" \")].join(\" \"),\r\n  button: (propsClassNames) => [propsClassNames?.join(\" \")]\r\n}\r\n","import React, { useState, useCallback, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport OptionsTitle from \"../../../wrappers/OptionsTitle/OptionsTitle\"\r\nimport DeckButton from \"../DeckButton/DeckButton\"\r\nimport { getSlicedString } from \"../../../utils/utilityFunctions\"\r\nimport { classes } from \"./DeckMenu.utils\"\r\n\r\nfunction DeckMenu({\r\n  deckState, // <object> DeckConstructor's reducer state\r\n  clickedDeckId, // <number> id of <DeckButton /> being clicked on\r\n  setClickedDeckId, // <function> clicked deck's id setter\r\n  dispatchToastAction, // <function> UIContext's Toast reducer action dispatcher\r\n  onSwitchDeck, // <function> switch deck's handler\r\n  classNames = {} // <object> classNames keys and values. Check them in propTypes below\r\n}) {\r\n  // boolean state and setter to trigger Toast to warn of unsaved changes\r\n  const [hasWarnedUnsavedChanges, setHasWarnedUnsavedChanges] = useState(false)\r\n\r\n  const handleDeckButtonClick = useCallback(\r\n    (deckId, clickState, canSave, isActiveDeck) => {\r\n      // clickState !== 0 means clicked <DeckButton /> was clicked on once before,\r\n      // so if that <DeckButton /> is not the one associated to the currently loaded\r\n      // deck (active), call the handler to switch to it (load it)\r\n      if (clickState) {\r\n        !isActiveDeck && onSwitchDeck(deckId)\r\n      } else {\r\n        // otherwise, set clickedDeckId state to the Deck Button being clicked on\r\n        setClickedDeckId(deckId)\r\n        // check whether the deck is !== active deck, changes were unsaved and we\r\n        // did not warn the user before.\r\n        if (\r\n          !clickState &&\r\n          canSave &&\r\n          !isActiveDeck &&\r\n          !hasWarnedUnsavedChanges\r\n        ) {\r\n          // On all cases as true, warn the user of unsaved changes with a Toast\r\n          dispatchToastAction(\r\n            toastActionCreators.setToastState(\r\n              \"Psst! You have unsaved changes in the current deck. Save or they will be lost!\",\r\n              null,\r\n              null\r\n            )\r\n          )\r\n          // and flag the component as having already warned the user (as not to bother)\r\n          setHasWarnedUnsavedChanges(true)\r\n        }\r\n      }\r\n    },\r\n    [\r\n      hasWarnedUnsavedChanges,\r\n      dispatchToastAction,\r\n      setHasWarnedUnsavedChanges,\r\n      onSwitchDeck\r\n    ]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <OptionsTitle classNames={classes.title(classNames.title)}>\r\n        Deck select\r\n      </OptionsTitle>\r\n      <div className={classes.deckSelect(classNames.deckSelect)}>\r\n        {Object.entries(deckState).map((keyVal) => {\r\n          // map all entries in DeckConstructor's reducer state and generate\r\n          // <DeckButton /> components only for those entries that match \"deck_<id>\"\r\n          return keyVal[0].slice(0, 5) === \"deck_\" ? (\r\n            <DeckButton\r\n              key={keyVal[0]} // <deck_<id> do not repeat themselves\r\n              deckId={+keyVal[0][5]} // fifth char is always the <id>\r\n              canSave={deckState.canSave}\r\n              isActiveDeck={\r\n                // if selected deck's id in state matches the id of the mapped key,\r\n                // it means we are standing on the currently loaded active object\r\n                Number.parseInt(keyVal[0][5]) === deckState.selectedDeckId\r\n              }\r\n              onClick={handleDeckButtonClick}\r\n              ariaPressed={Number.parseInt(keyVal[0][5]) === clickedDeckId}\r\n              classNames={classes.button(classNames.button)}\r\n            >\r\n              {\r\n                // viewport's limitations forces us to cut the string.\r\n                // Try it yourself by typing 24 \"@\" as a deck name.\r\n                getSlicedString(keyVal[1].name, 24, \"...\")\r\n              }\r\n            </DeckButton>\r\n          ) : null\r\n        })}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nDeckMenu.propTypes = {\r\n  deckState: PropTypes.object.isRequired,\r\n  clickedDeckId: PropTypes.number.isRequired,\r\n  setClickedDeckId: PropTypes.func.isRequired,\r\n  dispatchToastAction: PropTypes.func.isRequired,\r\n  onSwitchDeck: PropTypes.func.isRequired,\r\n  classNames: PropTypes.shape({\r\n    title: PropTypes.arrayOf(PropTypes.string),\r\n    select: PropTypes.arrayOf(PropTypes.string),\r\n    button: PropTypes.arrayOf(PropTypes.string)\r\n  })\r\n}\r\n\r\nexport default memo(DeckMenu)\r\n","import React, { useState, useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport MiniCircleWithTransition from \"../MiniCircleWithTransition/MiniCircleWithTransition\"\r\n// import styles from './MiniCircleWithState.module.css'\r\n\r\nexport default function MiniCircleWithState({\r\n  initialValue = 0, // <number> initial state value, used in <MiniCircle /> display prop\r\n  limit = 10, // <number> maximum value before rolling back to initial value\r\n  ...otherMiniCircleProps // <object> all other props to pass to <MiniCircleWithTransition />\r\n}) {\r\n  // state and setter to handle \"display\" prop\r\n  const [value, setValue] = useState(initialValue)\r\n\r\n  const modifyValue = useCallback(\r\n    // on <MiniCircleWithTransition /> click, increase value by one. If it\r\n    // exceeds the limit, roll back to initialValue\r\n    () =>\r\n      setValue((prevValue) =>\r\n        prevValue >= limit ? initialValue : prevValue + 1\r\n      ),\r\n    [initialValue, limit]\r\n  )\r\n  return (\r\n    <MiniCircleWithTransition\r\n      triggerOn\r\n      display={value}\r\n      onClick={modifyValue}\r\n      {...otherMiniCircleProps}\r\n    />\r\n  )\r\n}\r\n\r\nMiniCircleWithState.propTypes = {\r\n  initialValue: PropTypes.number.isRequired,\r\n  limit: PropTypes.number.isRequired\r\n}\r\n","import styles from \"./SVGImageWithNotifications.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClassNames, disabled, onClick) =>\r\n    [\r\n      styles.Container,\r\n      onClick ? styles.Clickable : \"\",\r\n      disabled ? styles.Disabled : \"\",\r\n      propsClassNames?.join(\" \")\r\n    ].join(\" \"),\r\n  image: (propsClassNames) =>\r\n    [styles.Image, propsClassNames?.join(\" \")].join(\" \"),\r\n  text: (propsClassNames) =>\r\n    [styles.Text, propsClassNames?.join(\" \")].join(\" \"),\r\n  miniCircle: (propsClassNames, miniCirclePosition) => [\r\n    styles.MiniCircle,\r\n    miniCirclePosition ? styles[miniCirclePosition] : \"\",\r\n    propsClassNames?.join(\" \")\r\n  ]\r\n}\r\n","import React, { memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport MiniCircleWithTransition from \"../MiniCircleWithTransition/MiniCircleWithTransition\"\r\nimport { classes } from \"./SVGImageWithNotifications.utils\"\r\n\r\nfunction SVGImageWithNotifications({\r\n  dataId, // <string> data-id\r\n  src, // <string> path to <img> source\r\n  alt, // <string> <img>'s alt\r\n  text, // <string> text to render in <span> for notification purposes\r\n  miniCircleTrigger, // <boolean> <MiniCircleWithTransition />'s \"triggerOn\" prop\r\n  miniCirclePosition, // <string> position to render <MiniCircle at. Must match its class in CSS file\r\n  miniCircleDisplay, // <string|number|React.node> <MiniCircleWithTransition />'s \"display\" prop\r\n  onClick, // <function> on click callback for outermost <div>\r\n  disabled, // <boolean> component's disabled state\r\n  role, // <string> element's role property\r\n  ariaLabel, // <string> aria-label\r\n  containerStyle, // <object> outermost <div>'s inline CSS style object\r\n  textStyle, // <object> notification <span>'s inline CSS style object\r\n  classNames = {}, // <object> classNames object. Check propTypes below for its constitution\r\n  ...miniCircleProps // <object> all other props to pass to <MiniCircleWithTransition />\r\n}) {\r\n  return (\r\n    <div\r\n      data-id={dataId}\r\n      disabled={disabled}\r\n      onClick={disabled ? null : onClick}\r\n      aria-label={ariaLabel}\r\n      role={role}\r\n      style={containerStyle}\r\n      className={classes.container(classNames.container, disabled, onClick)}\r\n    >\r\n      <img\r\n        data-id={dataId}\r\n        src={src}\r\n        alt={alt}\r\n        className={classes.image(classNames.image)}\r\n      />\r\n      <span style={textStyle} className={classes.text(classNames.text)}>\r\n        {text}\r\n      </span>\r\n      {miniCircleDisplay && (\r\n        <MiniCircleWithTransition\r\n          triggerOn={miniCircleTrigger}\r\n          display={miniCircleDisplay}\r\n          classNames={classes.miniCircle(\r\n            classNames.miniCircle,\r\n            miniCirclePosition\r\n          )}\r\n          {...miniCircleProps}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nSVGImageWithNotifications.propTypes = {\r\n  dataId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  src: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired,\r\n  text: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\r\n  triggerOn: PropTypes.bool,\r\n  miniCircleTrigger: PropTypes.bool,\r\n  miniCirclePosition: PropTypes.string,\r\n  miniCircleDisplay: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\r\n  onClick: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  role: PropTypes.string,\r\n  ariaLabel: PropTypes.string,\r\n  containerStyle: PropTypes.object,\r\n  textStyle: PropTypes.object,\r\n  classNames: PropTypes.shape({\r\n    container: PropTypes.arrayOf(PropTypes.string),\r\n    image: PropTypes.arrayOf(PropTypes.string),\r\n    text: PropTypes.arrayOf(PropTypes.string),\r\n    miniCircle: PropTypes.arrayOf(PropTypes.string)\r\n  })\r\n}\r\n\r\nexport default memo(SVGImageWithNotifications)\r\n","import styles from \"./HelpDemoDrawCards.module.css\"\r\n\r\nexport const classes = {\r\n  monster: {\r\n    image: [styles.MonsterImg],\r\n    text: [styles.Text],\r\n    miniCircle: [styles.MiniCircle]\r\n  },\r\n  spell: {\r\n    image: [styles.SpellImg],\r\n    text: [styles.Text],\r\n    miniCircle: [styles.MiniCircle]\r\n  },\r\n  trap: {\r\n    image: [styles.TrapImg],\r\n    text: [styles.Text],\r\n    miniCircle: [styles.MiniCircle]\r\n  },\r\n  total: [styles.TotalMiniCircle]\r\n}\r\n","import React, { useState, useCallback } from \"react\"\r\n// import PropTypes from \"prop-types\"\r\nimport AnimatedNumber from \"animated-number-react\"\r\nimport SVGImageWithNotifications from \"../../UI/SVGImageWithNotifications/SVGImageWithNotifications\"\r\nimport MiniCircle from \"../../UI/MiniCircle/MiniCircle\"\r\nimport cardImg from \"../../../assets/uiIcons/card.svg\"\r\nimport { classes } from \"./HelpDemoDrawCards.utils\"\r\nimport styles from \"./HelpDemoDrawCards.module.css\"\r\n\r\nexport default function HelpDemoDrawCards() {\r\n  // state and setter for each type of cards and their quantities\r\n  const [cardQty, setCardQty] = useState({ monster: 0, spell: 0, trap: 0 })\r\n  // store the sum of all card quantities in a separate variable\r\n  const cardTotal = Object.values(cardQty).reduce(\r\n    (acc, currQty) => acc + currQty,\r\n    0\r\n  )\r\n\r\n  const handleSVGClick = useCallback(\r\n    (e) => {\r\n      // SVG component's data-id stores the card type (\"monster\", \"spell\", \"trap\")\r\n      const stateKey = e.target.dataset.id\r\n      setCardQty((prevQty) => ({\r\n        // sum 1 to the previous card quantity on the respective key.\r\n        // if it exceeds 5, roll back to 0\r\n        ...prevQty,\r\n        [stateKey]: prevQty[stateKey] >= 5 ? 0 : prevQty[stateKey] + 1\r\n      }))\r\n    },\r\n    [setCardQty]\r\n  )\r\n\r\n  const handleTotalMiniCircleClick = useCallback(() => {\r\n    // on \"cardTotal\" MiniCircle Click, if the sum of all card quantities is\r\n    // not 0, set everything back to 0.\r\n    cardTotal && setCardQty({ monster: 0, spell: 0, trap: 0 })\r\n  }, [cardTotal, setCardQty])\r\n\r\n  // AnimatedNumber's required format callback\r\n  const formatValue = useCallback((value) => value.toFixed(2), [])\r\n\r\n  const getSVGImageWithNotificationsJSXForType = useCallback(\r\n    // JSX getter function for <SVGImageWithNotifications /> of each card type\r\n    (type) => (\r\n      <SVGImageWithNotifications\r\n        key={type}\r\n        dataId={type}\r\n        src={cardImg}\r\n        alt={`${type} quantity`}\r\n        text={\r\n          <>\r\n            <AnimatedNumber\r\n              value={\r\n                // show percentage of card type quantity over card total\r\n                cardQty[type] === 0 ? 0 : (cardQty[type] / cardTotal) * 100\r\n              }\r\n              formatValue={formatValue}\r\n              duration={200}\r\n            />\r\n            %\r\n          </>\r\n        }\r\n        miniCircleDisplay={cardQty[type].toString()}\r\n        miniCircleTrigger // same as triggerOn={true} for <MiniCircle />\r\n        miniCirclePosition=\"top-right\"\r\n        animateOnDisplayChange\r\n        onClick={handleSVGClick}\r\n        classNames={classes[type]}\r\n      />\r\n    ),\r\n    [cardQty, cardTotal]\r\n  )\r\n\r\n  return (\r\n    <div className={styles.Container}>\r\n      {/* SVGImageWithNotifications for each type of card */}\r\n      {getSVGImageWithNotificationsJSXForType(\"monster\")}\r\n      {getSVGImageWithNotificationsJSXForType(\"spell\")}\r\n      {getSVGImageWithNotificationsJSXForType(\"trap\")}\r\n      {/* a <MiniCircle /> for the total amount of cards */}\r\n      <MiniCircle\r\n        display={cardTotal}\r\n        animateOnClick\r\n        onClick={handleTotalMiniCircleClick}\r\n        classNames={classes.total}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport MiniCircleWithState from \"../../UI/MiniCircleWithState/MiniCircleWithState\"\r\nimport MiniCircle from \"../../UI/MiniCircle/MiniCircle\"\r\nimport DeckButton from \"../DeckButton/DeckButton\"\r\nimport HelpDemoDrawCards from \"../HelpDemoDrawCards/HelpDemoDrawCards\"\r\nimport { doNothing } from \"../../../utils/utilityFunctions\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport deck from \"../../../assets/uiIcons/deck.svg\"\r\nimport addIcon from \"../../../assets/uiIcons/add.svg\"\r\nimport trashIcon from \"../../../assets/uiIcons/trash.svg\"\r\nimport saveIcon from \"../../../assets/uiIcons/save.svg\"\r\nimport deleteIcon from \"../../../assets/uiIcons/cross.svg\"\r\nimport arrow from \"../../../assets/uiIcons/arrow2.svg\"\r\nimport styles from \"./HelpSection.module.css\"\r\n\r\nexport const classes = {\r\n  selectionMenu: {\r\n    menu: [styles.SelectionMenuTitles],\r\n    contentItem: [styles.SelectionMenuContentItem]\r\n  },\r\n  genericMiniCircle: [styles.GenericMiniCircle],\r\n  miniCircleWithImages: [styles.MiniCircleWithImages],\r\n  addDeckIcon: [styles.AddDeckIcon, styles.IconImage],\r\n  deleteDeckIcon: [styles.DeleteDeckIcon, styles.IconImage],\r\n  saveDeckIcon: [styles.SaveDeckIcon, styles.IconImage],\r\n  deleteCardIcon: [styles.DeleteCardIcon, styles.IconImage],\r\n  moveCardIcon: [styles.MoveCardIcon, styles.IconImage]\r\n}\r\n\r\nexport function getSelectionMenuEntries() {\r\n  return getHelpSelectionMenuItems(componentsToRender)\r\n}\r\n\r\n// an object with all components getHelpSelectionMenuItems() needs to render\r\nconst componentsToRender = {\r\n  getRegularMiniCircleJSX,\r\n  DeckImageJSX: (\r\n    <span className={styles.DeckIcon}>\r\n      <img src={deck} alt=\"deck icon\" />\r\n    </span>\r\n  ),\r\n  StatefulMiniCircleComponent: (\r\n    <MiniCircleWithState\r\n      initialValue={1}\r\n      limit={3}\r\n      animateOnClick\r\n      addNumberColorIndicator\r\n      classNames={classes.genericMiniCircle}\r\n    />\r\n  ),\r\n  AddDeckMiniCircleComponent: getClickableMiniCircleJSX({\r\n    src: addIcon,\r\n    classNames: \"addDeckIcon\",\r\n    alt: \"add\"\r\n  }),\r\n  DeleteDeckMiniCircleComponent: getClickableMiniCircleJSX({\r\n    src: trashIcon,\r\n    classNames: \"deleteDeckIcon\",\r\n    alt: \"delete deck\"\r\n  }),\r\n  SaveDeckMiniCircleComponent: getClickableMiniCircleJSX({\r\n    src: saveIcon,\r\n    classNames: \"saveDeckIcon\",\r\n    alt: \"save deck\"\r\n  }),\r\n  DeckSelectDemoComponent: (\r\n    <DeckButton\r\n      deckId={99999999} // we are never reaching this number as id, safe to use\r\n      canSave={false}\r\n      isActiveDeck={false}\r\n      isDemoComponent\r\n      onClick={() => {}}\r\n    >\r\n      Unloaded deck\r\n    </DeckButton>\r\n  ),\r\n  DeleteCardMiniCircleComponent: getClickableMiniCircleJSX({\r\n    src: deleteIcon,\r\n    classNames: \"deleteCardIcon\",\r\n    alt: \"remove card\"\r\n  }),\r\n  MoveCardMiniCircleComponent: getClickableMiniCircleJSX({\r\n    src: arrow,\r\n    classNames: \"moveCardIcon\",\r\n    alt: \"switch sections\"\r\n  }),\r\n  CardDrawDemoComponent: <HelpDemoDrawCards />,\r\n  PlusOneMiniCircleComponent: (\r\n    <MiniCircle\r\n      triggerOn\r\n      display=\"+1\"\r\n      animateOnClick\r\n      onClick={doNothing}\r\n      classNames={classes.genericMiniCircle}\r\n    />\r\n  )\r\n}\r\n\r\n// attempting to dry code a little bit\r\nfunction getClickableMiniCircleJSX(imgObj) {\r\n  return (\r\n    <MiniCircle\r\n      triggerOn\r\n      display={\r\n        <img\r\n          src={imgObj.src}\r\n          className={classes[imgObj.classNames].join(\" \")}\r\n          alt={imgObj.alt}\r\n        />\r\n      }\r\n      animateOnClick\r\n      onClick={doNothing}\r\n      classNames={classes.miniCircleWithImages}\r\n    />\r\n  )\r\n}\r\n\r\nfunction getRegularMiniCircleJSX(display) {\r\n  return <MiniCircle display={display} classNames={classes.genericMiniCircle} />\r\n}\r\n\r\n/**\r\n * Returns an object whose keys are the titles to be used in <SelectionMenuScreen />,\r\n * inside <HelpSection />, and their values the JSX to be displayed as content for\r\n * each of those titles.\r\n */\r\nfunction getHelpSelectionMenuItems({\r\n  getRegularMiniCircleJSX, // <function> JSX getter for <MiniCircle /> components\r\n  DeckImageJSX, // <React.node> JSX for deck's SVG <span>\r\n  StatefulMiniCircleComponent, // <React.node> <MiniCircleWithState /> for clickable MiniCircles\r\n  AddDeckMiniCircleComponent, // <React.node> JSX for Add deck's <MiniCircle />\r\n  DeleteDeckMiniCircleComponent, // <React.node> JSX for Delete deck's <MiniCircle />\r\n  SaveDeckMiniCircleComponent, // <React.node> JSX for save deck's <MiniCircle />\r\n  DeckSelectDemoComponent, // <React.node> JSX <DeckButton /> demo component\r\n  DeleteCardMiniCircleComponent, // <React.node> JSX for delete card's <MiniCircle />\r\n  MoveCardMiniCircleComponent, // <React.node> JSX for move card's <MiniCircle />\r\n  CardDrawDemoComponent, // <React.node> JSX <HelpDemoDrawCards />\r\n  PlusOneMiniCircleComponent // <React.node> JSX for \"+1\"'s <MiniCircle />\r\n}) {\r\n  return {\r\n    intro: [\r\n      <>\r\n        This app will always load a default empty deck if you have no decks\r\n        created. Each deck contains a <b>\"Main\"</b>, <b>\"Side\"</b>, and{\" \"}\r\n        <b>\"Extra\"</b> sections (where you add cards to create the deck), and a{\" \"}\r\n        <b>\"Test\"</b> one (to try drawing cards and check draw ratios).\r\n      </>,\r\n      <>\r\n        <u>Each deck has a name</u>, which appears at the bottom-left corner of\r\n        the screen (or center, if holding the device vertically).{\" \"}\r\n        <u>Decks can be renamed</u> (check \"Edit\" section for more\r\n        instructions). You can <b>add</b>, <b>delete</b>, <b>save</b> and{\" \"}\r\n        <b>load</b> decks by clicking on the \"Deck\" icon {DeckImageJSX} at the\r\n        left of the deck's name.\r\n      </>,\r\n      <>\r\n        You can <b>add cards to the deck</b> using the card list on the right\r\n        (or bottom, if holding the device vertically). Go to \"Filter\" section\r\n        for further details.\r\n      </>,\r\n      <>\r\n        <b>Card limits</b> are{\" \"}\r\n        {getRegularMiniCircleJSX(uiConfigs.deckBuilderConfigs.cardLimits.main)}{\" \"}\r\n        for <u>main</u> deck,{\" \"}\r\n        {getRegularMiniCircleJSX(uiConfigs.deckBuilderConfigs.cardLimits.side)}{\" \"}\r\n        for <u>side</u> deck and{\" \"}\r\n        {getRegularMiniCircleJSX(uiConfigs.deckBuilderConfigs.cardLimits.extra)}{\" \"}\r\n        for <u>extra</u> deck.\r\n      </>\r\n    ],\r\n    edit: [\r\n      <>\r\n        <article> Adding, deleting, saving and loading decks </article>\r\n      </>,\r\n      <>\r\n        First, tap the \"Deck\" icon {DeckImageJSX} at the left of the deck's name\r\n        to trigger a screen that controls all those options. A list with all\r\n        your saved decks will appear, as well as <u>add</u>, <u>delete</u> and{\" \"}\r\n        <u>save</u> deck sub-sections.\r\n      </>,\r\n      <>\r\n        You can <b>add a deck</b> by clicking on add icon{\" \"}\r\n        {AddDeckMiniCircleComponent} , provided you did not surpass the maximum\r\n        limit of{\" \"}\r\n        {getRegularMiniCircleJSX(uiConfigs.deckBuilderConfigs.maxDecksAmount)}{\" \"}\r\n        decks.\r\n      </>,\r\n      <>\r\n        <b>Delete a deck</b> by selecting a deck on the list and then hitting\r\n        the \"delete\" icon {DeleteDeckMiniCircleComponent} .\r\n      </>,\r\n      <>\r\n        If you made at least one change to a previously saved deck (renamed it,\r\n        added/removed cards), the \"save\" option will become available.{\" \"}\r\n        <b>Save the deck</b> by tapping the \"save\" icon{\" \"}\r\n        {SaveDeckMiniCircleComponent}. <u>Keep in mind</u> that if you\r\n        load/create a new deck without saving the current one,{\" \"}\r\n        <u>changes will be lost!</u>\r\n      </>,\r\n      <>\r\n        Lastly, <b>load a deck</b> by clicking twice on its name inside the deck\r\n        list.\r\n      </>,\r\n      <>\r\n        <div>{DeckSelectDemoComponent}</div>\r\n      </>,\r\n      <>\r\n        Same scenario as saving a deck, if you do not want changes on the\r\n        current deck to be lost, <u>make sure to save first</u>.\r\n      </>,\r\n      <>\r\n        <article> Renaming decks </article>\r\n      </>,\r\n      <>\r\n        You can double click on the deck's name next to \"Deck\" menu icon{\" \"}\r\n        {DeckImageJSX} to trigger <b>name edit mode</b>, which enables you to\r\n        rename the deck.\r\n      </>,\r\n      <>\r\n        Maximum <u>character limit is</u>{\" \"}\r\n        {getRegularMiniCircleJSX(\r\n          uiConfigs.deckBuilderConfigs.maxDeckNameCharLength\r\n        )}\r\n        , and you can use alphanumerical english characters as well as various\r\n        symbols.\r\n      </>,\r\n      <>\r\n        Again, <u>make sure to save the deck to persist its name changes.</u>\r\n      </>,\r\n      <>\r\n        <article>Modifying cards in deck</article>\r\n      </>,\r\n      <>\r\n        An added card in \"main\", \"side\" or \"extra\" sections can be clicked.\r\n        Doing so will display three options: <u>card quantity in section</u>,{\" \"}\r\n        <u>delete</u> and <u>switch section</u>.\r\n      </>,\r\n      <>\r\n        Tapping on the <b>quantity circle</b> {StatefulMiniCircleComponent} will\r\n        increase the card quantity in that section by 1. Notice that the{\" \"}\r\n        <u>will not increase beyond a maximum of 3</u>, and this counts the\r\n        copies of that same card across the whole deck. If the card quantity\r\n        exceeds 3, <u>it will loop back to 1</u>.\r\n      </>,\r\n      <>\r\n        <b>\"Delete\"</b> {DeleteCardMiniCircleComponent} option does exactly\r\n        that: it removes the selected card from the current section. It will not\r\n        affect copies of that same card in other sections (deleting \"Dark\r\n        Magician\" in \"main\" will not affect \"Dark Magician\" in \"side\").\r\n      </>,\r\n      <>\r\n        Finally, <b>\"switch sections\"</b> {MoveCardMiniCircleComponent} option\r\n        moves a copy of the card to its valid opposite section. E.g.:\r\n        \"switching\" Sangan from \"side\" deck will move it to \"main\" deck, and\r\n        vice-versa. If there were 2 copies of \"Sangan\" in \"side\", 1 will be\r\n        moved to \"main\".\r\n      </>\r\n    ],\r\n    test: [\r\n      <>\r\n        <article> Introduction to testing </article>\r\n      </>,\r\n      <>\r\n        <b>\"Test\"</b> section allows you to draw hypothetical cards/hands from\r\n        current \"main\" deck, as well as shuffling the deck to see all cards in\r\n        random order.\r\n      </>,\r\n      <>\r\n        Percentage ratios of the type of card you have the chance to draw next\r\n        -as well as draw ratios of each individual card- will be displayed and\r\n        will dynamically change as you draw cards.{\" \"}\r\n      </>,\r\n      <>\r\n        Draw ratios are calculated using each card type's quantity (or each card\r\n        name's quantity), over the total amount of cards. Try card type draw\r\n        chance by tapping the icons:\r\n      </>,\r\n      <>{CardDrawDemoComponent}</>,\r\n      <>\r\n        <article> Must-knows </article>\r\n      </>,\r\n      <>\r\n        For \"Test\" section to work,{\" \"}\r\n        <u>the active deck must have at least one card in the \"main\" section</u>\r\n        . Maximum card limit in \"Test\" always reflects \"Main\"'s.{\" \"}\r\n      </>,\r\n      <>\r\n        Keep in mind drawing cards or shuffling the deck in this section{\" \"}\r\n        <u>will NOT affect cards in \"main\" deck</u>.\r\n      </>,\r\n      <>\r\n        <article> How to test the deck </article>\r\n      </>,\r\n      <>\r\n        Tap <b>\"Draw 1\"</b> and <b>\"Draw 5\"</b> icons to simulate a single drawn\r\n        card or a standard hand.{\" \"}\r\n      </>,\r\n      <>\r\n        <b>Shuffle</b> icon takes all cards in \"main\" deck, randomizes them and\r\n        displays a hypothetical order of a shuffled deck.\r\n      </>,\r\n      <>\r\n        <b>Reset</b> clears all drawn cards or shuffled deck (resets the\r\n        section), which will allow you to draw newly random cards from the\r\n        \"main\" deck.{\" \"}\r\n      </>\r\n    ],\r\n    filter: [\r\n      <>\r\n        <article>Basics</article>\r\n      </>,\r\n      <>\r\n        First thing first, notice that{\" \"}\r\n        <b>this section will not work if you are not connected to internet</b>.\r\n      </>,\r\n      <>\r\n        <b>Card filter</b> section is in the right half of the screen (or\r\n        bottom, if device is held vertically).{\" \"}\r\n        <u>\r\n          You use filtering to search for any one card in the whole Yugioh card\r\n          database to add them to \"main\", \"side\" and \"extra\" sections of the\r\n          active deck\r\n        </u>\r\n        .\r\n      </>,\r\n      <>\r\n        When you loaded this app, all cards were requested from the database,\r\n        and hopefully stored as a list in this section.\r\n      </>,\r\n      <>\r\n        If you have no connection, you might still load, delete, save and add\r\n        new decks, but you will not be able to add new cards to it.\r\n      </>,\r\n      <>\r\n        <article>Adding cards to deck</article>\r\n      </>,\r\n      <>\r\n        Once the <b>\"success\"</b> message is shown on screen, type a sequence of\r\n        3 or more characters of any card's name in \"Filter list\" search box for\r\n        filtering to occur.\r\n      </>,\r\n      <>\r\n        If there was at least one match, any card with those sequential\r\n        characters on its name will appear in the list.{\" \"}\r\n        <u>Tap on the desired card and a circle with \"+1\" on it will appear</u>{\" \"}\r\n        {PlusOneMiniCircleComponent} .\r\n      </>,\r\n      <>\r\n        <u>\r\n          Hitting that circle will add the card on the current selected deck\r\n          section, or its default one\r\n        </u>{\" \"}\r\n        (\"main\" or \"side\"), depending on the card type if you are to add a card\r\n        on a section that does not match its correct one (e.g.: trying to add a\r\n        Synchro monster on \"main\" deck will default to adding it to \"extra\"\r\n        deck).\r\n      </>,\r\n      <>\r\n        Also,{\" \"}\r\n        <u>\r\n          the card will not be added if the maximum card limit of that card was\r\n          reached in the whole deck, or if it is an unplayable card\r\n        </u>{\" \"}\r\n        (like a token or skill card).\r\n      </>\r\n    ]\r\n  }\r\n}\r\n","import React, { useMemo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport SelectionMenuScreen from \"../../UI/SelectionMenuScreen/SelectionMenuScreen\"\r\nimport { classes, getSelectionMenuEntries } from \"./HelpSection.utils\"\r\n\r\nexport default function HelpSection({\r\n  playSFXs // <boolean> global ON/OFF state for sound effects, from UIContext\r\n}) {\r\n  // getHelpSelectionMenuItems() creates a valid object to render <SelectionMenuScreen />\r\n  // We memoize the function as it is costly. We pass lots of extra components which\r\n  // do not change in time, so it is safe to apply memoization\r\n  const helpSelectionMenuItems = useMemo(() => getSelectionMenuEntries(), [])\r\n\r\n  return (\r\n    <SelectionMenuScreen\r\n      items={helpSelectionMenuItems}\r\n      playSFXs={playSFXs}\r\n      classNames={classes.selectionMenu}\r\n    />\r\n  )\r\n}\r\n\r\nHelpSection.propTypes = {\r\n  playSFXs: PropTypes.bool.isRequired\r\n}\r\n","import React from \"react\"\r\nimport styles from \"./SecondaryScreens.module.css\"\r\n\r\nexport const classes = {\r\n  toast: { children: [styles.ToastChildren] },\r\n  screenDivision: [styles.ScreenDivison],\r\n  deckSelectComponent: {\r\n    title: [styles.DeckTitle],\r\n    deckSelect: [styles.DeckSelect]\r\n  },\r\n  saveDeckComponent: {\r\n    title: [styles.SaveTitle],\r\n    miniCircle: [styles.SaveMiniCircle],\r\n    disabledText: [styles.SaveDisabledText]\r\n  },\r\n  deleteDeckComponent: {\r\n    title: [styles.DeleteTitle],\r\n    miniCircle: [styles.DeleteMiniCircle],\r\n    disabledText: [styles.DeleteDisabledText]\r\n  },\r\n  addDeckComponent: {\r\n    title: [styles.AddTitle],\r\n    miniCircle: [styles.AddMiniCircle],\r\n    disabledText: [styles.AddDisabledText]\r\n  }\r\n}\r\n\r\nexport function handleActionBeforeDeleting(\r\n  getSlicedString,\r\n  setClickedDeckId,\r\n  setCloseToastFlag,\r\n  setToast,\r\n  unfreezeApp,\r\n  clickedDeckId,\r\n  deckState,\r\n  isDefaultDeck,\r\n  toastTogglers\r\n) {\r\n  setClickedDeckId(0)\r\n  if (deckState.deck_1 && !deckState.deck_2 && isDefaultDeck) {\r\n    setToast(\"Cannot delete starting deck\", null, toastTogglers.deleteDeck)\r\n  } else {\r\n    // trigger toast for confirmation. Set \"deck_<id>\" as url, which we will use\r\n    // as a gateway for deleteAndGetLSObject()'s target deck key in Local Storage\r\n    // and to update the reducer\r\n    setToast(\r\n      // the idea is to delete the deck with the user-clicked id. However, given\r\n      // the instance they do not click on anything after deleting a deck, and\r\n      // hit \"delete\" again, then always fallback to selectedDeckId, which is 1\r\n      // after resetting. Character limit is set due to viewport width contstraints\r\n      getSlicedString(\r\n        deckState[`deck_${clickedDeckId ?? deckState.selectedDeckId}`].name,\r\n        16,\r\n        \"...\"\r\n      ),\r\n      // same as above, but to pass the deck key to the reducer\r\n      `deck_${clickedDeckId ?? deckState.selectedDeckId}`,\r\n      // and the long delay toggler\r\n      toastTogglers.deleteDeck\r\n    )\r\n    setCloseToastFlag(true)\r\n  }\r\n  unfreezeApp()\r\n}\r\n\r\nexport function getAdditionalToastJSX(toastState, onClick) {\r\n  // null \"url\" here means we are displaying the \"cannot delete default deck\"\r\n  // message. It is set as such in handleDeleteDeck() above. If we have a url,\r\n  // it must contain the deck key as a string to delete from reducer and Local Storage\r\n  if (toastState.type === \"deleteDeck\" && toastState.url) {\r\n    return (\r\n      <div className={styles.ToastText}>\r\n        Sure to delete? &nbsp;&nbsp;\r\n        <span onClick={onClick} className={styles.ToastClickable}>\r\n          Yes, proceed.\r\n        </span>\r\n      </div>\r\n    )\r\n  } else if (toastState.type === \"addDeck\") {\r\n    return (\r\n      <div onClick={onClick} className={styles.ToastClickable}>\r\n        Proceed anyway.\r\n      </div>\r\n    )\r\n  } else if (toastState.type === \"cardInfo\" && toastState.url) {\r\n    return (\r\n      <div onClick={onClick} className={styles.ToastClickable}>\r\n        {toastState.url.name}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, {\r\n  useContext,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n  memo\r\n} from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { DeckBuilderContext } from \"../../../contexts/DeckBuilderContext\"\r\nimport { CardSearchContext } from \"../../../contexts/CardSearchContext\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport * as deckConstructorActionCreators from \"../../../store/DeckConstructor/deckConstructorActionCreators\"\r\nimport * as cardSearchActionCreators from \"../../../store/CardSearch/cardSearchActionCreators\"\r\nimport Toast from \"../../UI/Toast/Toast\"\r\nimport SecondaryScreen from \"../../UI/SecondaryScreen/SecondaryScreen\"\r\nimport SaveDeleteOrAddDeck from \"../SaveDeleteOrAddDeck/SaveDeleteOrAddDeck\"\r\nimport DeckMenu from \"../DeckMenu/DeckMenu\"\r\nimport HelpSection from \"../HelpSection/HelpSection\"\r\nimport { getLastDeckId } from \"../../../store/DeckConstructor/deckConstructorReducer\"\r\nimport {\r\n  sortLocalStorageAfterDeletingDeck,\r\n  getSlicedString\r\n} from \"../../../utils/utilityFunctions\"\r\nimport {\r\n  getStartingDeckSkeleton,\r\n  getDeckLimitToastMessage\r\n} from \"../../../utils/yugiohSpecificFunctions\"\r\nimport { getCardObject } from \"../../../utils/apiFunctions\"\r\nimport { YugiohValidator } from \"../../../utils/validators\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport {\r\n  classes,\r\n  handleActionBeforeDeleting,\r\n  getAdditionalToastJSX\r\n} from \"./SecondaryScreens.utils\"\r\nimport styles from \"./SecondaryScreens.module.css\"\r\n\r\nconst defaultDeck = getStartingDeckSkeleton()\r\n\r\nfunction SecondaryScreens({\r\n  toggleSecondScreen, // <function> UIContext's SecondaryScreen global toggler\r\n  secondScreenState, // <boolean> UIContext's SecondaryScreen global state\r\n  secondScreenType, // <string> UIContext's SecondaryScreen global type\r\n  setScreenIsFrozen, // <function> UIContext's swipe freezing toggler\r\n  toastState, // <boolean> UIContext's Toast component global state\r\n  dispatchToastAction, // <function> UIContext's Toast reducer action dispatcher\r\n  modalSFX, // <object> useAudioControl object for on/off modal sound effects\r\n  playSFXs, // <boolean> global on/off switch for audios\r\n  switchSFX, // <object> useAudioControl object for \"switch\" and \"success\" sound effects\r\n  clickOKSFX, // <object> useAudioControl object for \"confirm\" and \"OK\" sound effects\r\n  swipe // <function> App.js screen swiping function\r\n}) {\r\n  const {\r\n    deckState,\r\n    dispatchDeckAction,\r\n    deleteAndGetLSObject,\r\n    updateLSandGetLSasJSObj\r\n  } = useContext(DeckBuilderContext)\r\n  // card search reducer action dispatch will trigger on \"i\" (card info) option\r\n  const { dispatchSearchAction } = useContext(CardSearchContext)\r\n  // state manager for deck operations (\"saving\", \"deleting\", \"adding\")\r\n  const [currentOperation, setCurrentOperation] = useState(null)\r\n  // Deck Selector's clicked deck id tracker (!== from deckState.selectedDeckId)\r\n  const [clickedDeckId, setClickedDeckId] = useState(0)\r\n  // boolean to track if Toast should close on a given action\r\n  const [closeToastFlag, setCloseToastFlag] = useState(false)\r\n  // save al togglers into a variable to try drying code\r\n  const toastTogglers = uiConfigs.togglers.toast\r\n  // if deckState holds a key named \"deck_<maxPossibleDecks>\", it means deck limit\r\n  // was reached (no more decks can be created). We block \"Add deck\" component with this\r\n  const isDeckLimitReached = deckState.hasOwnProperty(\r\n    `deck_${uiConfigs.deckBuilderConfigs.maxDecksAmount}`\r\n  )\r\n\r\n  const unfreezeApp = useCallback(() => {\r\n    // unfreeze swiping and clear current operation\r\n    setScreenIsFrozen(false)\r\n    setCurrentOperation(null)\r\n  }, [setScreenIsFrozen, setCurrentOperation])\r\n\r\n  const setToast = useCallback(\r\n    // function to dry code (avoid this same line as it is used lots)\r\n    (text, url, type) => {\r\n      dispatchToastAction(toastActionCreators.setToastState(text, url, type))\r\n    },\r\n    [dispatchToastAction]\r\n  )\r\n\r\n  const handleCloseToast = useCallback(() => {\r\n    // close action dispatch to assign to Toast's \"X\" close icon\r\n    dispatchToastAction(toastActionCreators.closeToast())\r\n  }, [dispatchToastAction])\r\n\r\n  const handleSwitchDeck = useCallback(\r\n    (deckId) => {\r\n      // switch deck using reducer action, trigger confirmation sound effect and\r\n      // close both toast and secondary screen\r\n      dispatchDeckAction(deckConstructorActionCreators.switchDeck(deckId))\r\n      switchSFX.play()\r\n      toggleSecondScreen()\r\n      handleCloseToast()\r\n    },\r\n    [toggleSecondScreen, handleCloseToast]\r\n  )\r\n\r\n  const handleDeleteDeck = useCallback(() => {\r\n    // delete the deck from Local Storage\r\n    deleteAndGetLSObject({\r\n      key: uiConfigs.localStorageDecksObjectKeys.decks,\r\n      nestedKey: toastState.url, // url will store deck key to be deleted in Local Storage\r\n      removeKey: true, // the key should be completely destroyed\r\n      callbackBeforeUpdating: (modifiedLSObj) =>\r\n        sortLocalStorageAfterDeletingDeck(modifiedLSObj) // sort all \"deck_\" keys after deleting one\r\n    })\r\n    // delete the deck from reducer too, to sync view with Local Storage\r\n    dispatchDeckAction(deckConstructorActionCreators.deleteDeck(toastState.url))\r\n    // play a confirmation sound effect and close secondary screens\r\n    clickOKSFX.play()\r\n    toggleSecondScreen()\r\n    setCloseToastFlag(false)\r\n    // set url to null to clear deck Local Storage key in Toast reducer and use\r\n    // saveDeck toggler for shorter inactive timeout\r\n    setToast(\"Deck deleted!\", null, toastTogglers.saveDeck)\r\n  }, [deleteAndGetLSObject, sortLocalStorageAfterDeletingDeck, toastState.url])\r\n\r\n  const handleDeckChange = useCallback(\r\n    (operation) => {\r\n      // trigger the whole process only if currentOperation is null (meaning we are not\r\n      // dealing with any operation already). We freeze the app to give LS the chance\r\n      // to update and to prevent the user (or bot) from clicking rapidly.\r\n      if (!currentOperation) {\r\n        setScreenIsFrozen(true)\r\n        setCurrentOperation(operation)\r\n      }\r\n    },\r\n    [setScreenIsFrozen, setCurrentOperation, currentOperation]\r\n  )\r\n\r\n  const handleAddDeck = useCallback(() => {\r\n    let lastDeckId = 0\r\n    // trigger the reducer to add the new deck\r\n    dispatchDeckAction(deckConstructorActionCreators.addDeck())\r\n    // do the same with Local Storage. Notice we need the previous Local Storage\r\n    // object to calculate the new one before updating. It comes to us in the\r\n    // function assigned as arg, and we return the new value to update in it.\r\n    updateLSandGetLSasJSObj({\r\n      key: uiConfigs.localStorageDecksObjectKeys.decks,\r\n      genValueWithLS: (LSObj) => {\r\n        lastDeckId = getLastDeckId(LSObj.decks) // grab the last deck # in keys + 1\r\n        return {\r\n          // create a new key using that number, and set an empty deck as value\r\n          [`deck_${lastDeckId}`]: {\r\n            ...defaultDeck,\r\n            name: `Deck ${lastDeckId}`\r\n          }\r\n        }\r\n      }\r\n    })\r\n    // play a confirmation sound effect\r\n    clickOKSFX.play()\r\n    // screen is frozen for 250ms to give time to LocalStorage to update.\r\n    // Afterwards, the app unfreezes and notifies the user with a Toast\r\n    const localStorageHandicapTimer = setTimeout(() => {\r\n      setToast(\r\n        `Added and loaded \"Deck ${lastDeckId}\"!`,\r\n        null,\r\n        toastTogglers.saveDeck\r\n      )\r\n      unfreezeApp()\r\n      clearTimeout(localStorageHandicapTimer)\r\n    }, 250)\r\n  }, [deckState.canSave, clickOKSFX])\r\n\r\n  const handleCardSearch = useCallback(() => {\r\n    // clicking on \"i\" (info) MiniCircles anywhere in <DeckBuilder />'s page will\r\n    // trigger a Toast asking the user to confirm if they want to fetch info. This\r\n    // is the handler for that confirmation, so dispatch a CardSearch's reducer action\r\n    // to render the respective card on <CardSearch /> page, after constructing a\r\n    // proper Card object for its view.\r\n    dispatchSearchAction(\r\n      cardSearchActionCreators.setCurrentCard(getCardObject(toastState.url))\r\n    )\r\n    // once done, automatically swipe right, which will unmount <DeckBuilder /> and\r\n    // mount <CardSearch />\r\n    swipe(\"right\")\r\n    // close the confirmation toast afterwards\r\n    handleCloseToast()\r\n  }, [getCardObject, toastState.url, swipe])\r\n\r\n  useEffect(() => {\r\n    // flag is used here to preventively close Toast upon closing secondary screen\r\n    // if the confirmation message before deleting a deck is still showing\r\n    if (!secondScreenState && closeToastFlag) {\r\n      setCloseToastFlag(false) // reset the flag\r\n      handleCloseToast() // force close the Toast\r\n    }\r\n  }, [secondScreenState])\r\n\r\n  useEffect(() => {\r\n    let localStorageHandicapTimer\r\n    // if useEffect was triggered by handleDeckChange(), which freezes screen:\r\n    if (currentOperation) {\r\n      // check if we only have the default deck (base name and 0 cards) in the reducer\r\n      const isDefaultDeck = new YugiohValidator().isStartingDeck(\r\n        deckState.deck_1,\r\n        defaultDeck\r\n      )\r\n      // case 1: we are saving the deck\r\n      if (currentOperation === \"saving\") {\r\n        // on an attempt to save an empty deck: warn the user, unfreeze app and end operation\r\n        if (isDefaultDeck && !deckState.deck_2) {\r\n          setToast(\"Cannot save a default deck!\", null, toastTogglers.saveDeck)\r\n          unfreezeApp()\r\n          // on a valid deck to save (sections are not empty and/or name !== from default)\r\n        } else {\r\n          // update only the current deck in Local Storage\r\n          updateLSandGetLSasJSObj({\r\n            key: uiConfigs.localStorageDecksObjectKeys.decks,\r\n            nestedKey: `deck_${deckState.selectedDeckId}`,\r\n            value: deckState[`deck_${deckState.selectedDeckId}`]\r\n          })\r\n          // freeze screen for 250ms to give time to LocalStorage to update.\r\n          // Afterwards, unfreeze everything and notify the user with a Toast and a sfx\r\n          localStorageHandicapTimer = setTimeout(() => {\r\n            clickOKSFX.play()\r\n            setToast(\"Deck saved!\", null, toastTogglers.saveDeck)\r\n            unfreezeApp()\r\n          }, 250)\r\n        }\r\n        // register save tracking boolean in reducer to false\r\n        dispatchDeckAction(deckConstructorActionCreators.setCanSave(false))\r\n        // case 2: we are deleting a deck\r\n      } else if (currentOperation === \"deleting\") {\r\n        handleActionBeforeDeleting(\r\n          // tried to dry the code here. Function is down below\r\n          getSlicedString,\r\n          setClickedDeckId,\r\n          setCloseToastFlag,\r\n          setToast,\r\n          unfreezeApp,\r\n          clickedDeckId,\r\n          deckState,\r\n          isDefaultDeck,\r\n          toastTogglers\r\n        )\r\n        // case 3: we are adding a new deck\r\n      } else if (currentOperation === \"adding\") {\r\n        // if deck quantity is exceeded, warn the user and end the operation\r\n        if (deckState[`deck_${uiConfigs.deckBuilderConfigs.maxDecksAmount}`]) {\r\n          setToast(getDeckLimitToastMessage(), null, toastTogglers.deleteDeck)\r\n          unfreezeApp()\r\n          // otherwise, if current deck has unsaved changes, ask for confirmation\r\n          // before proceeding. All unsaved data will be lost if so.\r\n        } else if (deckState.canSave) {\r\n          setToast(\r\n            \"Unsaved changes in current deck!\",\r\n            null,\r\n            toastTogglers.addDeck\r\n          )\r\n          // give time for local storage to update before unfreezing\r\n          localStorageHandicapTimer = setTimeout(() => {\r\n            unfreezeApp()\r\n          }, 250)\r\n          // if deck limit was not reached and there are unsaved changes, simply\r\n          // trigger handleAddDeck() to create and load a new empty one\r\n        } else {\r\n          handleAddDeck()\r\n        }\r\n        // all cases close the secondary screen\r\n        toggleSecondScreen()\r\n      }\r\n    }\r\n    return () => {\r\n      // on cleanup, unfreeze the app and clear timeout -if any-\r\n      localStorageHandicapTimer && clearTimeout(localStorageHandicapTimer)\r\n      setScreenIsFrozen(false)\r\n    }\r\n  }, [currentOperation, clickedDeckId])\r\n\r\n  return (\r\n    <>\r\n      <Toast\r\n        show={toastState.isActive}\r\n        toggler={handleCloseToast}\r\n        inactiveTimeout={\r\n          uiConfigs.timeouts.toast[\r\n            `inactive${\r\n              toastState.type === \"saveDeck\" ? \"SaveDeck\" : \"DeleteDeck\"\r\n            }`\r\n          ]\r\n        }\r\n        refreshTimeoutOn={toastState.refreshTimeoutToggler}\r\n        classNames={classes.toast}\r\n      >\r\n        <div className={styles.ToastText}>{toastState.text}</div>\r\n        {\r\n          // \"deleteDeck\", \"addDeck\" and \"cardInfo\" Toast togglers all hold aditional\r\n          // JSX to display in Toast. They have their own styles (clickable), and logic\r\n          // is kept separated as a mere attempt at drying code\r\n          getAdditionalToastJSX(\r\n            toastState,\r\n            toastState.type === \"deleteDeck\"\r\n              ? handleDeleteDeck\r\n              : toastState.type === \"addDeck\"\r\n              ? handleAddDeck\r\n              : handleCardSearch\r\n          )\r\n        }\r\n      </Toast>\r\n      {secondScreenState && (\r\n        <SecondaryScreen\r\n          toggle={toggleSecondScreen}\r\n          flex\r\n          scrollable={\r\n            // only \"Help\" secondary screen is scrollable\r\n            secondScreenType ===\r\n            uiConfigs.togglers.secondaryScreens.deckCreatorHelp\r\n          }\r\n          animation=\"translateDown\"\r\n          sfxObj={modalSFX}\r\n        >\r\n          {\r\n            // selectOrEditDeck toggler renders Deck Selector and editing components\r\n            secondScreenType ===\r\n              uiConfigs.togglers.secondaryScreens.selectOrEditDeck && (\r\n              <div className={styles.GridDisplay}>\r\n                <DeckMenu\r\n                  deckState={deckState}\r\n                  clickedDeckId={clickedDeckId}\r\n                  setClickedDeckId={setClickedDeckId}\r\n                  dispatchToastAction={dispatchToastAction}\r\n                  onSwitchDeck={handleSwitchDeck}\r\n                  classNames={classes.deckSelectComponent}\r\n                />\r\n                <SaveDeleteOrAddDeck\r\n                  isSaveDeckComponent\r\n                  currentOperation={currentOperation}\r\n                  canSave={deckState.canSave}\r\n                  handleDeckChange={handleDeckChange}\r\n                  classNames={classes.saveDeckComponent}\r\n                />\r\n                <SaveDeleteOrAddDeck\r\n                  isDeleteDeckComponent\r\n                  currentOperation={currentOperation}\r\n                  clickedDeckId={clickedDeckId}\r\n                  handleDeckChange={handleDeckChange}\r\n                  classNames={classes.deleteDeckComponent}\r\n                />\r\n                <SaveDeleteOrAddDeck\r\n                  isAddDeckComponent\r\n                  currentOperation={currentOperation}\r\n                  clickedDeckId={clickedDeckId}\r\n                  handleDeckChange={handleDeckChange}\r\n                  deckLimitwasReached={isDeckLimitReached}\r\n                  classNames={classes.addDeckComponent}\r\n                />\r\n              </div>\r\n            )\r\n          }\r\n          {\r\n            // deckCreatorHelp toggler renders <HelpSection /> component\r\n            secondScreenType ===\r\n              uiConfigs.togglers.secondaryScreens.deckCreatorHelp && (\r\n              <HelpSection playSFXs={playSFXs} />\r\n            )\r\n          }\r\n        </SecondaryScreen>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nSecondaryScreens.propTypes = {\r\n  toggleSecondScreen: PropTypes.func.isRequired,\r\n  secondScreenState: PropTypes.bool.isRequired,\r\n  secondScreenType: PropTypes.string.isRequired,\r\n  toastState: PropTypes.shape({\r\n    text: PropTypes.string,\r\n    url: PropTypes.string,\r\n    type: PropTypes.string,\r\n    isActive: PropTypes.bool,\r\n    refreshTimeoutToggler: PropTypes.bool\r\n  }).isRequired,\r\n  dispatchToastAction: PropTypes.func.isRequired,\r\n  setScreenIsFrozen: PropTypes.func.isRequired,\r\n  modalSFX: PropTypes.object.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired,\r\n  switchSFX: PropTypes.object.isRequired,\r\n  clickOKSFX: PropTypes.object.isRequired,\r\n  swipe: PropTypes.func.isRequired\r\n}\r\n\r\nexport default memo(SecondaryScreens)\r\n","import styles from \"./HalfScreenDivision.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClassNames) =>\r\n    [styles.Container, propsClassNames?.join(\" \")].join(\" \")\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { classes } from \"./HalfScreenDivision.utils\"\r\n\r\nexport default function HalfScreenDivision({\r\n  ariaLabel, // <string> component's rendered html element's aria-label\r\n  width, // <number> component's width to apply as inline style\r\n  height, // <number> component's height to apply as inline style\r\n  component = \"div\", // <string> component html element to render\r\n  children,\r\n  classNames // <array> array of className strings\r\n}) {\r\n  // capitalize component to follow React's components' logic\r\n  const Component = component\r\n\r\n  return (\r\n    <Component\r\n      aria-label={ariaLabel}\r\n      className={classes.container(classNames)}\r\n      // default width to 50 and height to 100 if they were not provided as props\r\n      style={{ width: `${width ?? \"50\"}%`, height: `${height ?? \"100\"}%` }}\r\n    >\r\n      {children}\r\n    </Component>\r\n  )\r\n}\r\n\r\nHalfScreenDivision.propTypes = {\r\n  ariaLabel: PropTypes.string.isRequired,\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  component: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n  classNames: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n","import styles from \"./DeckBuilderTopScreen.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClassNames) =>\r\n    [styles.Container, propsClassNames?.join(\" \")].join(\" \")\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { classes } from \"./DeckBuilderTopScreen.utils\"\r\nimport styles from \"./DeckBuilderTopScreen.module.css\"\r\n\r\nexport default function DeckBuilderTopScreen({\r\n  ariaLabel,\r\n  children,\r\n  style,\r\n  classNames\r\n}) {\r\n  return (\r\n    <div\r\n      aria-label={ariaLabel}\r\n      style={style}\r\n      className={classes.container(classNames)}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nDeckBuilderTopScreen.propTypes = {\r\n  ariaLabel: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n  style: PropTypes.object,\r\n  classNames: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n","import styles from \"./DeckBuilderBottomScreen.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClassNames) =>\r\n    [styles.Container, propsClassNames?.join(\" \")].join(\" \")\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { classes } from \"./DeckBuilderBottomScreen.utils\"\r\n\r\nexport default function DeckBuilderBottomScreen({\r\n  ariaLabel,\r\n  children,\r\n  style,\r\n  classNames\r\n}) {\r\n  return (\r\n    <div\r\n      aria-label={ariaLabel}\r\n      className={classes.container(classNames)}\r\n      style={style}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nDeckBuilderBottomScreen.propTypes = {\r\n  ariaLabel: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n  style: PropTypes.object,\r\n  classNames: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport SVGImageWithNotifications from \"../../UI/SVGImageWithNotifications/SVGImageWithNotifications\"\r\nimport card from \"../../../assets/uiIcons/card.svg\"\r\nimport { getSVGImageTextAndExtraStyles } from \"../../../utils/utilityFunctions\"\r\nimport { getCardQuantityPerTypeAndCardQuantityTotal } from \"./SidebarMainSideExtra.utils\"\r\n// import styles from \"./SidebarMainSideExtra.module.css\"\r\n\r\nexport default function SidebarMainSideExtra({\r\n  deckState, // <object> deckBuilder's reducer state\r\n  isPortraitView, // <boolean> true if device is held in orientation portrait\r\n  classNames // <object> classNames keys and values. Check them in propTypes below\r\n}) {\r\n  // target the active -selected- section (\"main\", \"side\", \"extra\") of the active\r\n  // deck in state (deck_<id>)\r\n  const currentSection =\r\n    deckState[`deck_${deckState.selectedDeckId}`][deckState.selectedDeckSection]\r\n  // get an object with keys equal to the first word in the card type, and value\r\n  // equal to the total quantity of cards in the section with that type.\r\n  // Also, the total amount of cards in the section to calculate percentages.\r\n  // Check getCardQuantityPerTypeAndCardQuantityTotal() comments for further details.\r\n  const [\r\n    cardQuantitiesObj,\r\n    totalAmountOfCards\r\n  ] = getCardQuantityPerTypeAndCardQuantityTotal(currentSection)\r\n  // convert cardQuantitiesObj's keys and values into an array of entries\r\n  const cardQuantitiesArray = Object.entries(cardQuantitiesObj)\r\n\r\n  return (\r\n    <>\r\n      {\r\n        // map the constructed array to create <SVGImageWithNotifications /> for\r\n        // each card type with their quantities and percentages over the total\r\n        // amount of cards\r\n        cardQuantitiesArray.map((typeAndQtyEntry) => {\r\n          const [textArr, extraStyles] = getSVGImageTextAndExtraStyles(\r\n            cardQuantitiesArray,\r\n            typeAndQtyEntry,\r\n            totalAmountOfCards,\r\n            false,\r\n            isPortraitView\r\n          )\r\n          return (\r\n            <SVGImageWithNotifications\r\n              key={typeAndQtyEntry[0]}\r\n              src={card}\r\n              alt={`${typeAndQtyEntry[0]} card ratio`}\r\n              text={\r\n                <>\r\n                  {textArr[0]} <br /> ({textArr[1]}%)\r\n                </>\r\n              }\r\n              containerStyle={extraStyles?.containerStyle}\r\n              textStyle={extraStyles?.textStyle}\r\n              classNames={classNames[typeAndQtyEntry[0]]}\r\n            />\r\n          )\r\n        })\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nSidebarMainSideExtra.propTypes = {\r\n  deckState: PropTypes.shape({\r\n    selectedDeckSection: PropTypes.string,\r\n    selectedDeckId: PropTypes.number\r\n  }),\r\n  isPortraitView: PropTypes.bool.isRequired,\r\n  classNames: PropTypes.objectOf(\r\n    PropTypes.shape({\r\n      container: PropTypes.arrayOf(PropTypes.string),\r\n      image: PropTypes.arrayOf(PropTypes.string),\r\n      text: PropTypes.arrayOf(PropTypes.string)\r\n    })\r\n  )\r\n}\r\n","/**\r\n * Reduces all card objects in the passed section into an object where keys are\r\n * the first word on the card types for each global yugioh card type (Monster,\r\n * Spell, Trap, XYZ, Synchro, Fusion, Pendulum and Link). Returns an array where\r\n * the first element is that object with its keys' values are the quantity of\r\n * cards with those types, and the second element being the card total in that section.\r\n * @param {Array} sectionArray An array of card objects of the target section\r\n */\r\nexport function getCardQuantityPerTypeAndCardQuantityTotal(sectionArray) {\r\n  // variable to store the total amount of cards in the section\r\n  let cardTotalInSection = 0\r\n  // the key to assign to the object we construct below\r\n  let key = \"\"\r\n  // we get a section variable in the form of an array of card objects, which\r\n  // have the \"type\" and \"quantity\" keys. Types are a string where, in most\r\n  // cases, their first word is the one of out interest. \"Spell\" Card, \"Fusion\" Monster\r\n  // So, reduce the array:\r\n  const cardQuantitiesObj = sectionArray.reduce((acc, cardObj) => {\r\n    // add the current quantity to the card total\r\n    cardTotalInSection += cardObj.quantity\r\n    // split the string by words and switch using its first word\r\n    const splittedTypeString = cardObj.type.split(\" \")\r\n    // determine the correct key name\r\n    switch (splittedTypeString[0]) {\r\n      case \"Spell\":\r\n        key = \"spell\"\r\n        break\r\n      case \"Trap\":\r\n        key = \"trap\"\r\n        break\r\n      case \"XYZ\":\r\n        key = \"xyz\"\r\n        break\r\n      case \"Synchro\":\r\n        key = \"synchro\"\r\n        break\r\n      case \"Fusion\":\r\n        key = \"fusion\"\r\n        break\r\n      case \"Pendulum\":\r\n        // pedulum cards can belong to the main and extra deck, depending on their\r\n        // type. The only instance YGOPRODeck's database return that is a pendulum,\r\n        // belongs to the extra deck but the first word does NOT start with its main\r\n        // type are fusions, listed as \"Pendulum Effect Fusion Monster\". So, compare\r\n        // the third array element of the splitted type to assign the key properly\r\n        key =\r\n          splittedTypeString[2] && splittedTypeString[2] === \"Fusion\"\r\n            ? \"fusion\"\r\n            : \"monster\"\r\n        break\r\n      case \"Link\":\r\n        key = \"link\"\r\n        break\r\n      default:\r\n        // all fallback cases are assumed to be generic monster cards in the main deck\r\n        key = \"monster\"\r\n    }\r\n    // do we have a key with the same name in the object? Add the current card's\r\n    // quantity. Otherwise, assign it and initialize it with current card's quantity\r\n    return acc[key]\r\n      ? { ...acc, [key]: acc[key] + cardObj.quantity }\r\n      : { ...acc, [key]: cardObj.quantity }\r\n  }, {})\r\n  // finally, return the constructed object and the card total in the section\r\n  return [cardQuantitiesObj, cardTotalInSection]\r\n}\r\n","import React, {\r\n  useCallback,\r\n  useState,\r\n  useEffect,\r\n  useContext,\r\n  memo\r\n} from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { UIContext } from \"../../../contexts/UIContext\"\r\nimport * as deckConstructorActionCreators from \"../../../store/DeckConstructor/deckConstructorActionCreators\"\r\nimport SVGImageWithNotifications from \"../../UI/SVGImageWithNotifications/SVGImageWithNotifications\"\r\nimport { getSVGImageTextAndExtraStyles } from \"../../../utils/utilityFunctions\"\r\nimport { getSvg, getSvgImagesKeyValArr } from \"./SidebarTest.utils\"\r\n// import styles from \"./SidebarTest.module.css\"\r\n\r\nfunction SidebarTest({\r\n  deckState, // <object> deckBuilder's reducer state\r\n  dispatchDeckAction, // <function> deckBuilder's reducer action dispatcher\r\n  isPortraitView, // <boolean> true if device is in orientation portrait\r\n  drawSFX, // <object> useAudio() controls object for drawing cards sfx\r\n  shuffleSFX, // <object> useAudio() controls object for shuffling deck sfx\r\n  classNames // <object> classNames keys and values. Check them in propTypes below\r\n}) {\r\n  // state and setter to disable components (to let animation play with no interruptions)\r\n  const [isClickDisabled, setIsClickDisabled] = useState(false)\r\n  // we also need to freeze swipe to effectively disabled functionality\r\n  const { setScreenIsFrozen } = useContext(UIContext)\r\n\r\n  const triggerActionAndFreezeApp = useCallback(\r\n    (actionDispatch) => {\r\n      // if the component is not disabled, it is safe to dispatch the action and\r\n      // to animate component. Disable it and fire the action\r\n      if (!isClickDisabled) {\r\n        setScreenIsFrozen(true)\r\n        setIsClickDisabled(true)\r\n        actionDispatch()\r\n      }\r\n    },\r\n    [isClickDisabled, setScreenIsFrozen]\r\n  )\r\n\r\n  const handleDrawCard = useCallback(\r\n    (e) => {\r\n      // attempt to dispatch a drawTestCard reducer action and play a draw card sfx.\r\n      // data-id is either \"1\" or \"5\", to let the reducer know how many\r\n      // cards need to be drawn\r\n      triggerActionAndFreezeApp(() => {\r\n        dispatchDeckAction(\r\n          deckConstructorActionCreators.drawTestCard(e.target.dataset.id)\r\n        )\r\n        drawSFX.restart()\r\n      })\r\n    },\r\n    [dispatchDeckAction, triggerActionAndFreezeApp, drawSFX]\r\n  )\r\n  const handleShuffleOrReset = useCallback(\r\n    (isShuffling) => {\r\n      // attempt to dispatch n intitializeTestDeck reducer action and play a shuffle\r\n      // deck sfx. If we clicked on \"shuffle\" SVG component, isShuffling will be true.\r\n      // \"Reset\" SVG component will set isShuffling to false. The difference between\r\n      // both is how they handle fallbackTestDeck and deckState[deck_key].test arrays.\r\n      // \"Shuffle\" will clear fallbackTestDeck and fill deckState[deck_key].test, while\r\n      // \"Reset\" does the other way round. Check reducer for further details\r\n      triggerActionAndFreezeApp(() => {\r\n        dispatchDeckAction(\r\n          deckConstructorActionCreators.intitializeTestDeck(isShuffling)\r\n        )\r\n        shuffleSFX.restart()\r\n      })\r\n    },\r\n    [dispatchDeckAction, shuffleSFX, triggerActionAndFreezeApp]\r\n  )\r\n  // create an array with set to all <SVGImageWithNotifications /> options as\r\n  // first elements, and the values the component needs to render in an object\r\n  // as second elements\r\n  const svgImagesKeyValArr = getSvgImagesKeyValArr(\r\n    deckState,\r\n    handleDrawCard,\r\n    handleShuffleOrReset\r\n  )\r\n\r\n  useEffect(() => {\r\n    // when component freezes, fire a timeoo unfut treeze it. This timeout will\r\n    // ensure the animations play with no interruptions\r\n    const unfreezeApp = setTimeout(() => {\r\n      setIsClickDisabled(false)\r\n      setScreenIsFrozen(false)\r\n    }, 300)\r\n    return () => clearTimeout(unfreezeApp)\r\n  }, [isClickDisabled, setScreenIsFrozen])\r\n\r\n  return (\r\n    <>\r\n      {\r\n        // map the constructed array to create <SVGImageWithNotifications /> for\r\n        // each \"test\" option with their static or dynamic texts\r\n        svgImagesKeyValArr.map((keyValArr) => {\r\n          const [textArr, extraStyles] = getSVGImageTextAndExtraStyles(\r\n            svgImagesKeyValArr,\r\n            keyValArr,\r\n            deckState.fallbackTestDeck.length,\r\n            true,\r\n            isPortraitView\r\n          )\r\n          // get the respective background SVG image\r\n          const svgImg = getSvg(keyValArr[0])\r\n          // and their particular enabled/disabled state\r\n          const isDisabled = isClickDisabled || keyValArr[1].disabled\r\n          return (\r\n            <SVGImageWithNotifications\r\n              key={keyValArr[0]}\r\n              dataId={keyValArr[1].amount} // \"1\" or \"5\" to pass to handleDrawCard()\r\n              src={svgImg}\r\n              alt={keyValArr[0]}\r\n              text={\r\n                <>\r\n                  {textArr[0]} <br /> {textArr[1]}\r\n                </>\r\n              }\r\n              onClick={isDisabled ? null : keyValArr[1].onClick}\r\n              disabled={isDisabled}\r\n              containerStyle={extraStyles?.containerStyle}\r\n              textStyle={extraStyles?.textStyle}\r\n              classNames={classNames[keyValArr[0]]}\r\n            />\r\n          )\r\n        })\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nSidebarTest.propTypes = {\r\n  deckState: PropTypes.object.isRequired,\r\n  dispatchDeckAction: PropTypes.func.isRequired,\r\n  isPortraitView: PropTypes.bool.isRequired,\r\n  drawSFX: PropTypes.object.isRequired,\r\n  shuffleSFX: PropTypes.object.isRequired,\r\n  classNames: PropTypes.objectOf(\r\n    PropTypes.shape({\r\n      container: PropTypes.arrayOf(PropTypes.string),\r\n      image: PropTypes.arrayOf(PropTypes.string),\r\n      text: PropTypes.arrayOf(PropTypes.string)\r\n    })\r\n  )\r\n}\r\n\r\nexport default memo(SidebarTest)\r\n","import card from \"../../../assets/uiIcons/card.svg\"\r\nimport shuffle from \"../../../assets/uiIcons/shuffle.svg\"\r\nimport reload from \"../../../assets/uiIcons/reload.svg\"\r\n\r\nexport function getSvg(type) {\r\n  if (type === \"shuffle\") return shuffle\r\n  if (type === \"reset\") return reload\r\n  return card\r\n}\r\n\r\nexport function getSvgImagesKeyValArr(\r\n  deckState,\r\n  handleDrawCard,\r\n  handleShuffleOrReset\r\n) {\r\n  return Object.entries({\r\n    draw_1: {\r\n      amount: 1,\r\n      onClick: handleDrawCard,\r\n      disabled: !deckState.fallbackTestDeck.length\r\n    },\r\n    draw_5: {\r\n      amount:\r\n        deckState.fallbackTestDeck.length >= 5\r\n          ? 5\r\n          : deckState.fallbackTestDeck.length,\r\n      onClick: handleDrawCard,\r\n      disabled: !deckState.fallbackTestDeck.length\r\n    },\r\n    shuffle: {\r\n      amount: null,\r\n      onClick: () => handleShuffleOrReset(true),\r\n      disabled: !deckState[`deck_${deckState.selectedDeckId}`].main.length\r\n    },\r\n    reset: {\r\n      amount: null,\r\n      onClick: () => handleShuffleOrReset(false),\r\n      disabled: !deckState[`deck_${deckState.selectedDeckId}`].test.length\r\n    }\r\n  })\r\n}\r\n","import styles from \"./DeckCreatorSideBar.module.css\"\r\n\r\nexport const classes = {\r\n  mainSideExtra: {\r\n    monster: getClasses(\"Monster\"),\r\n    spell: getClasses(\"Spell\"),\r\n    trap: getClasses(\"Trap\"),\r\n    fusion: getClasses(\"Fusion\"),\r\n    synchro: getClasses(\"Synchro\"),\r\n    xyz: getClasses(\"XYZ\"),\r\n    pendulum: getClasses(\"Pendulum\"),\r\n    link: getClasses(\"Link\")\r\n  },\r\n  test: {\r\n    draw_1: getClasses(\"Draw-1\", true),\r\n    draw_5: getClasses(\"Draw-5\", true),\r\n    shuffle: getClasses(\"Shuffle\", true),\r\n    reset: getClasses(\"Reset\", true)\r\n  }\r\n}\r\n\r\nfunction getClasses(cardType, isTestComponent) {\r\n  return {\r\n    container: [styles.SVGImageContainer],\r\n    image: [styles[cardType], styles.SVGImageImage],\r\n    text: [styles.SVGImageText, isTestComponent ? styles.TestText : \"\"]\r\n  }\r\n}\r\n","import React, { useContext } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport useAudio from \"../../../hooks/useAudio\"\r\nimport { MediaQuery } from \"../../../contexts/MediaQueryContext\"\r\nimport SidebarMainSideExtra from \"../SidebarMainSideExtra/SidebarMainSideExtra\"\r\nimport SidebarTest from \"../SidebarTest/SidebarTest\"\r\nimport drawmp3 from \"../../../assets/audios/draw.mp3\"\r\nimport shufflemp3 from \"../../../assets/audios/shuffle.mp3\"\r\nimport { classes } from \"./DeckCreatorSideBar.utils\"\r\n\r\nexport default function DeckCreatorSideBar({\r\n  deckState, // <object> deckConstructor's reducer state\r\n  dispatchDeckAction, // <function> deckConstructor's reducer action dispatcher\r\n  playSFXs // <boolean> global ON/OFF switch for sound effects\r\n}) {\r\n  // <SidebarTest /> handles some of its elements' styles according to device orientation\r\n  const { mq } = useContext(MediaQuery)\r\n  // audio JSX and controls object for \"Draw 1\" and \"Draw 5\" test SVG components\r\n  const [drawAudioJSX, drawSFX] = useAudio(drawmp3, {\r\n    toggleOn: playSFXs,\r\n    playbackRate: 2\r\n  })\r\n  // audio JSX and controls object for \"Shuffle\" and \"Reset\" test SVG components\r\n  const [shuffleAudioJSX, shuffleSFX] = useAudio(shufflemp3, {\r\n    toggleOn: playSFXs,\r\n    playbackRate: 2.5\r\n  })\r\n\r\n  return (\r\n    <>\r\n      {\r\n        // if we are sitting in \"main\", \"side\" or \"extra\" sections, render\r\n        // <SidebarMainSideExtra />, otherwise <SidebarTest />\r\n        deckState.selectedDeckSection !== \"test\" ? (\r\n          <SidebarMainSideExtra\r\n            deckState={deckState}\r\n            isPortraitView={mq.portrait}\r\n            classNames={classes.mainSideExtra}\r\n          />\r\n        ) : (\r\n          <SidebarTest\r\n            deckState={deckState}\r\n            dispatchDeckAction={dispatchDeckAction}\r\n            isPortraitView={mq.portrait}\r\n            shuffleSFX={shuffleSFX}\r\n            drawSFX={drawSFX}\r\n            classNames={classes.test}\r\n          />\r\n        )\r\n      }\r\n      {drawAudioJSX}\r\n      {shuffleAudioJSX}\r\n    </>\r\n  )\r\n}\r\n\r\nDeckCreatorSideBar.propTypes = {\r\n  deckState: PropTypes.object.isRequired,\r\n  dispatchDeckAction: PropTypes.func.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired\r\n}\r\n","import styles from \"./DeckSelectionAndEditing.module.css\"\r\n\r\nexport const classes = {\r\n  svgImageWithNotification: {\r\n    container: [styles.Container],\r\n    miniCircle: [styles.MiniCircle]\r\n  }\r\n}\r\n","import React, { memo, useCallback, useContext } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { UIContext } from \"../../../contexts/UIContext\"\r\nimport SVGImageWithNotifications from \"../../UI/SVGImageWithNotifications/SVGImageWithNotifications\"\r\nimport deck from \"../../../assets/uiIcons/deck.svg\"\r\nimport save from \"../../../assets/uiIcons/save.svg\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport { classes } from \"./DeckSelectionAndEditing.utils\"\r\nimport styles from \"./DeckSelectionAndEditing.module.css\"\r\n\r\nfunction DeckSelectionAndEditing({\r\n  canSave // <boolean> deckConstructor reducer's \"canSave\" boolean\r\n}) {\r\n  // clicking on <SVGImageWithNotifications /> will trigger a secondary screen\r\n  const { toggleSecondScreen } = useContext(UIContext)\r\n  // on SVGImageWithNotifications's container click, toggle its secondary screen\r\n  const handleClick = useCallback(() => {\r\n    toggleSecondScreen(uiConfigs.togglers.secondaryScreens.selectOrEditDeck)\r\n  }, [toggleSecondScreen])\r\n\r\n  return (\r\n    <SVGImageWithNotifications\r\n      src={deck}\r\n      alt=\"Deck menu icon\"\r\n      onClick={handleClick}\r\n      miniCircleTrigger={canSave}\r\n      miniCirclePosition=\"bottom-left\"\r\n      miniCircleDisplay={\r\n        <img src={save} alt=\"save changes\" className={styles.MiniCircleImage} />\r\n      }\r\n      role=\"button\"\r\n      ariaLabel=\"Click to open a menu with all your created decks, or to create a new one\"\r\n      classNames={classes.svgImageWithNotification}\r\n    />\r\n  )\r\n}\r\n\r\nDeckSelectionAndEditing.propTypes = {\r\n  canSave: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default memo(DeckSelectionAndEditing)\r\n","import styles from \"./EditableSpan.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClassNames) =>\r\n    [styles.Container, propsClassNames?.join(\" \")].join(\" \"),\r\n  span: (propsClassNames) =>\r\n    [styles.Span, propsClassNames?.join(\" \")].join(\" \"),\r\n  inputWithSubmit: (propsContainerClassNames, propsInputClassNames) => ({\r\n    container: [styles.Form, propsContainerClassNames?.join(\" \")],\r\n    input: [styles.Input, propsInputClassNames?.join(\" \")]\r\n  }),\r\n  charLimit: (propsClassNames) =>\r\n    [styles.CharLimit, propsClassNames?.join(\" \")].join(\" \")\r\n}\r\n\r\nexport const inlineStyles = {\r\n  charLimit: (displayCharLength, maxCharLength) => ({\r\n    filter: `hue-rotate(${\r\n      -50 + (displayCharLength * 100) / (maxCharLength * 2)\r\n    }deg) \r\n    brightness(150%)\r\n    `\r\n  })\r\n}\r\n","import React, { memo, useEffect } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport useDoubleTap from \"../../../hooks/useDoubleTap\"\r\nimport useToggle from \"../../../hooks/useToggle\"\r\nimport InputWithSubmit from \"../../UI/InputWithSubmit/InputWithSubmit\"\r\nimport { classes, inlineStyles } from \"./EditableSpan.utils\"\r\n\r\nfunction EditableSpan({\r\n  display, // <React.node> || <string> Input's value\r\n  isEditingInput, // <boolean> editing state (true: show input, false: show span)\r\n  toggleEditingInput, // <function> isEditingInput's toggler\r\n  inputReferece, // <React.createRef> a reference to the input\r\n  onInputSubmit, // <function> onSubmit's callback\r\n  onInputChange, // <function> onChange's callback\r\n  onInputBlur, // <function> onBlur's callback\r\n  inputWithSubmitExtraProps, // <object> extra props to pass to <InputWithSubmit />\r\n  configs = {}, // <object> config object with props to apply to <span> (check them below)\r\n  classNames = {} // <object> classNames object. Check propTypes below for its constitution\r\n}) {\r\n  const {\r\n    delayBetweenTaps, // <number> maximum ms delay between two taps to be considered a double tap\r\n    showCharLimit, // <boolean> on true, remaining characters will be shown in an additional span\r\n    maxCharLength, // <number> maximum allowed character length for both <input> and <span>\r\n    spanDataId, // <span>'s data-id if any\r\n    spanAriaLabel // <span>'s aria-label if any\r\n  } = configs\r\n  // fallback editing state and toggler if none are passed as props\r\n  const [thisIsEditingInput, thisToggleEditingInput] = useToggle(false)\r\n  // callback for when a double tap is triggered\r\n  const call = useDoubleTap({ delayBetweenTaps })\r\n  // double tap handler. Toggles editing state\r\n  const handleDoubleTap = () =>\r\n    call(toggleEditingInput ?? thisToggleEditingInput)\r\n  // if outer editing state was passed, use it. Otherwise, use this component's\r\n  const editingState = isEditingInput ?? thisIsEditingInput\r\n  // once editing state is triggered, focus the input\r\n  useEffect(() => {\r\n    if (editingState && inputReferece) inputReferece.current.focus()\r\n  }, [editingState, inputReferece])\r\n  // if we are on editing state, show the input and a span with the\r\n  // remaining available characters. If we are not editing, then just\r\n  // show the span with the player name\r\n  return editingState ? (\r\n    <div className={classes.container(classNames.container)}>\r\n      <InputWithSubmit\r\n        value={display}\r\n        reference={inputReferece}\r\n        onChange={onInputChange}\r\n        onBlur={onInputBlur}\r\n        onSubmit={onInputSubmit}\r\n        classNames={classes.inputWithSubmit(classNames.form, classNames.input)}\r\n        {...inputWithSubmitExtraProps}\r\n      />\r\n      {showCharLimit && (\r\n        <span\r\n          className={classes.charLimit(classNames.charLimit)}\r\n          aria-label=\"Remaining characters\"\r\n          // adjust hue and brightness between primary and secondary as\r\n          // an extra effect on remaining characters\r\n          style={inlineStyles.charLimit(display.length, maxCharLength)}\r\n        >\r\n          {maxCharLength - display.length}\r\n        </span>\r\n      )}\r\n    </div>\r\n  ) : (\r\n    <span\r\n      onClick={handleDoubleTap}\r\n      className={classes.span(classNames.span)}\r\n      data-id={spanDataId}\r\n      aria-label={spanAriaLabel}\r\n    >\r\n      {display}\r\n    </span>\r\n  )\r\n}\r\n\r\nEditableSpan.propTypes = {\r\n  display: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n  isEditingInput: PropTypes.bool,\r\n  toggleEditingInput: PropTypes.func,\r\n  inputReferece: PropTypes.oneOfType([\r\n    PropTypes.func,\r\n    PropTypes.shape({ current: PropTypes.instanceOf(Element) })\r\n  ]),\r\n  onInputSubmit: PropTypes.func.isRequired,\r\n  onInputChange: PropTypes.func.isRequired,\r\n  onInputBlur: PropTypes.func,\r\n  inputWithSubmitExtraProps: PropTypes.object,\r\n  configs: PropTypes.shape({\r\n    showCharLimit: PropTypes.bool,\r\n    delayBetweenTaps: PropTypes.number,\r\n    maxCharLength: PropTypes.number,\r\n    spanAriaLabel: PropTypes.string,\r\n    spanDataId: PropTypes.string\r\n  }),\r\n  classNames: PropTypes.shape({\r\n    container: PropTypes.arrayOf(PropTypes.string),\r\n    span: PropTypes.arrayOf(PropTypes.string),\r\n    form: PropTypes.arrayOf(PropTypes.string),\r\n    input: PropTypes.arrayOf(PropTypes.string),\r\n    charLimit: PropTypes.arrayOf(PropTypes.string)\r\n  })\r\n}\r\n\r\nexport default memo(EditableSpan)\r\n","import uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport styles from \"./DeckSelectionAndHelpMenu.module.css\"\r\n\r\nexport const classes = {\r\n  helpSvgComponent: {\r\n    container: [styles.SVGDeckContainer, styles.SVGHelpContainer],\r\n    text: [styles.SVGHelpText]\r\n  },\r\n  editableSpan: {\r\n    container: [styles.InputWithSubmitContainer],\r\n    input: [styles.InputWithSubmitInput],\r\n    charLimit: [styles.InputWithSubmitCharLimit],\r\n    span: [styles.DeckTitleSpan]\r\n  }\r\n}\r\n\r\nexport const editableSpanConfigs = {\r\n  showCharLimit: true,\r\n  delayBetweenTaps: uiConfigs.timeouts.doubleTapDelay,\r\n  maxCharLength: uiConfigs.deckBuilderConfigs.maxDeckNameCharLength,\r\n  spanAriaLabel: \"Deck name. Double click to edit\"\r\n}\r\n\r\nexport const inputWithSubmitExtraProps = {\r\n  ariaLabel: \"Type deck name and submit it here\",\r\n  preventDefault: true,\r\n  autoComplete: \"off\"\r\n}\r\n","import React, { memo, useCallback, useRef, useEffect, useContext } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { UIContext } from \"../../../contexts/UIContext\"\r\nimport * as deckConstructorActionCreators from \"../../../store/DeckConstructor/deckConstructorActionCreators\"\r\nimport useDeckSelectionInputControls from \"../../../hooks/useDeckSelectionInputControls\"\r\nimport useToggle from \"../../../hooks/useToggle\"\r\nimport useAudio from \"../../../hooks/useAudio\"\r\nimport DeckSelectionAndEditing from \"../DeckSelectionAndEditing/DeckSelectionAndEditing\"\r\nimport EditableSpan from \"../../UI/EditableSpan/EditableSpan\"\r\nimport SVGImageWithNotifications from \"../../UI/SVGImageWithNotifications/SVGImageWithNotifications\"\r\nimport help from \"../../../assets/uiIcons/help.svg\"\r\nimport clickOKmp3 from \"../../../assets/audios/clickOK.mp3\"\r\nimport clickCancelmp3 from \"../../../assets/audios/clickCancel.mp3\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport {\r\n  classes,\r\n  editableSpanConfigs,\r\n  inputWithSubmitExtraProps\r\n} from \"./DeckSelectionAndHelpMenu.utils\"\r\nimport styles from \"./DeckSelectionAndHelpMenu.module.css\"\r\n\r\nfunction DeckSelectionAndHelpMenu({\r\n  canSave, // <boolean> if the deck was modified, this will be true. If it was saved, false.\r\n  deckId, // <number> the selected deck's integer value on deckState object\r\n  deckOneNameChange, // <string> \"deck_1\"'s name. On change, component will re-render\r\n  selectedDeckName, // <string> current selected deck's \"name\" key's value\r\n  playSFXs, // <boolean> UIContext's ON/OFF sound effect switch\r\n  dispatchDeckAction // <function> deckContructorReducer's action dispatcher\r\n}) {\r\n  // <HelpIcon /> triggers a Secondary Screen. Bring toggler from UIContext\r\n  const { toggleSecondScreen } = useContext(UIContext)\r\n  // toggler for EditableSpan's input\r\n  const [isEditingInput, toggleEditingInput] = useToggle(false)\r\n  // ref for EditableSpan's input\r\n  const inputRef = useRef()\r\n  // audio JSX and controls object for \"confirm\" and \"OK\" SFX\r\n  const [clickOKAudioJSX, clickOKSFX] = useAudio(clickOKmp3, {\r\n    toggleOn: playSFXs\r\n  })\r\n  // audio JSX and controls object for \"cancel\" SFX\r\n  const [clickCancelAudioJSX, clickCancelSFX] = useAudio(clickCancelmp3, {\r\n    toggleOn: playSFXs\r\n  })\r\n  // on form submit (or input blur), execute this callback to change deck's name\r\n  const handleEditSuccess = useCallback(\r\n    (newDeckName) =>\r\n      dispatchDeckAction(\r\n        deckConstructorActionCreators.setDeckName(newDeckName)\r\n      ),\r\n    [dispatchDeckAction]\r\n  )\r\n  // get the specific input controls to be used in this component\r\n  const {\r\n    value,\r\n    handleInputChange,\r\n    handleInputSubmit,\r\n    handleInputBlur,\r\n    forceSetValue\r\n  } = useDeckSelectionInputControls({\r\n    initialValue: selectedDeckName,\r\n    toggler: toggleEditingInput,\r\n    soundEffects: { clickOKSFX, clickCancelSFX },\r\n    onEditSuccess: handleEditSuccess\r\n  })\r\n  // input submit will blur the input, which needs the reference to know what to blur\r\n  const handleSubmit = useCallback(() => {\r\n    handleInputSubmit(inputRef)\r\n  }, [handleInputSubmit])\r\n  // clicking on help icon toggles secondary screen for that specific help section\r\n  const handleHelpIconClick = useCallback(() => {\r\n    toggleSecondScreen(uiConfigs.togglers.secondaryScreens.deckCreatorHelp)\r\n  }, [toggleSecondScreen])\r\n\r\n  useEffect(() => {\r\n    // only when switching between decks, we force a name update. Otherwise\r\n    // the deck's name will not reflect its new current state as the custom\r\n    // hook does not re-render automatically when its value is changed outside\r\n    // of its control. Also, deleting the only 1 deck in state will not trigger\r\n    // a deckId change to listen to, thus we add a specific deck name change\r\n    // listener for it only (deckOneNameChange).\r\n    forceSetValue(selectedDeckName)\r\n  }, [deckId, deckOneNameChange])\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.CurrentSelectedDeck}>\r\n        <DeckSelectionAndEditing canSave={canSave} />\r\n        <EditableSpan\r\n          display={value}\r\n          isEditingInput={isEditingInput}\r\n          toggleEditingInput={toggleEditingInput}\r\n          inputReferece={inputRef}\r\n          onInputChange={handleInputChange}\r\n          onInputSubmit={handleSubmit}\r\n          onInputBlur={handleInputBlur}\r\n          configs={editableSpanConfigs}\r\n          inputWithSubmitExtraProps={inputWithSubmitExtraProps}\r\n          classNames={classes.editableSpan}\r\n        />\r\n      </div>\r\n      <SVGImageWithNotifications\r\n        src={help}\r\n        alt=\"Click for help\"\r\n        text=\"Help\"\r\n        role=\"button\"\r\n        ariaLabel=\"Toggle help screen\"\r\n        onClick={handleHelpIconClick}\r\n        classNames={classes.helpSvgComponent}\r\n      />\r\n      {clickOKAudioJSX}\r\n      {clickCancelAudioJSX}\r\n    </>\r\n  )\r\n}\r\n\r\nDeckSelectionAndHelpMenu.propTypes = {\r\n  canSave: PropTypes.bool.isRequired,\r\n  deckId: PropTypes.number.isRequired,\r\n  deckOneNameChange: PropTypes.string.isRequired,\r\n  selectedDeckName: PropTypes.string.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired,\r\n  dispatchDeckAction: PropTypes.func.isRequired\r\n}\r\n\r\nexport default memo(DeckSelectionAndHelpMenu)\r\n","import { useCallback, useState } from \"react\"\r\nimport { InputValidator } from \"../utils/validators\"\r\nimport uiConfigs from \"../utils/ui.configs.json\"\r\n\r\nexport default function useDeckSelectionInputControls(configs = {}) {\r\n  const {\r\n    initialValue, // <string> starting <input> and <span>'s value\r\n    toggler, // <function> toggler that sets whether <input> or <span> is shown\r\n    soundEffects, // <object> containing 2 useAudio() controls objects (\"OK\" and \"cancel\")\r\n    onEditSuccess // <function> on valid input submit callback\r\n  } = configs\r\n  // \"value\" is the actual <input> (and <span>) value, controlled by state here.\r\n  // \"fallback\" holds a copy of the last valid <input> value. If at any time the\r\n  // typed value in <input> is invalid, it will \"fall back\" to this\r\n  const [value, setValue] = useState(initialValue ?? \"Deck name\")\r\n  const [fallback, setFallback] = useState(initialValue ?? \"Deck name\")\r\n\r\n  const handleInputChange = useCallback((e) => {\r\n    // on each keystroke, check if the typed value follows the rules for deck\r\n    // naming. If so, update value in state with it\r\n    new InputValidator(e.target.value).isValidDeckName(\r\n      uiConfigs.deckBuilderConfigs.maxDeckNameCharLength\r\n    ) && setValue(e.target.value)\r\n  }, [])\r\n\r\n  const handleInputSubmit = useCallback((inputReference) => {\r\n    // given the passed input reference (needed), blur it.\r\n    // That triggers handleInputBlur()\r\n    inputReference.current.blur()\r\n  }, [])\r\n\r\n  const handleInputBlur = useCallback(() => {\r\n    // first, we need the trimmed value in current input state. This prevents\r\n    // validation of an empty string, or strings with additional empty characters\r\n    const trimmedValue = value.trim()\r\n    // assign \"cancel\" sfx to audioTrack variable. Will switch to \"OK\" sfx on a\r\n    // valid input submission\r\n    let audioTrack = soundEffects.clickCancelSFX\r\n    // if the trimmed value is empty or it equals the previous input value,\r\n    // re-set input value to the previous one (fallback)\r\n    if (!trimmedValue || trimmedValue === fallback) {\r\n      setValue(() => fallback)\r\n      // otherwise, the input submission was valid. Set both value and fallback to\r\n      // the submitted value, switch audioTrack to \"OK\" sfx, and if a callback\r\n      // for a successful submission exists, trigger it\r\n    } else {\r\n      setValue(() => trimmedValue)\r\n      setFallback(() => trimmedValue)\r\n      audioTrack = soundEffects.clickOKSFX\r\n      onEditSuccess && onEditSuccess(trimmedValue)\r\n    }\r\n    // if there was a <span> to <input> toggler assigned, call for it\r\n    toggler && toggler()\r\n    // and fire the current sfx\r\n    audioTrack.restart()\r\n  }, [value, fallback, toggler, soundEffects, onEditSuccess])\r\n\r\n  const forceSetValue = useCallback(\r\n    // if by any means we need to bypass checks and force the input's value,\r\n    // we use this function. It automatically sets value and fallback to the\r\n    // parameter passed to it\r\n    (value) => {\r\n      setValue(value)\r\n      setFallback(value)\r\n    },\r\n    [setValue, setFallback]\r\n  )\r\n\r\n  return {\r\n    value,\r\n    handleInputChange,\r\n    handleInputSubmit,\r\n    handleInputBlur,\r\n    forceSetValue\r\n  }\r\n}\r\n","import styles from \"./CardListItem.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClasses) =>\r\n    [styles.Container, propsClasses?.join(\" \")].join(\" \"),\r\n  miniCircle: (propsClasses) => [styles.MiniCircle, propsClasses?.join(\" \")],\r\n  deleteMiniCircle: (propsClasses) => [\r\n    styles.DeleteMiniCircle,\r\n    propsClasses?.join(\" \")\r\n  ],\r\n  arrowMiniCircle: (propsClasses) => [\r\n    styles.ArrowMiniCircle,\r\n    propsClasses?.join(\" \")\r\n  ],\r\n  infoMiniCircle: (propsClasses) => [\r\n    styles.InfoMiniCircle,\r\n    propsClasses?.join(\" \")\r\n  ]\r\n}\r\n","import React, { memo, useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport useToggle from \"../../../hooks/useToggle\"\r\nimport MiniCircle from \"../../UI/MiniCircle/MiniCircle\"\r\nimport MiniCircleWithTransition from \"../../UI/MiniCircleWithTransition/MiniCircleWithTransition\"\r\nimport { getCardTypeStyle } from \"../../../utils/yugiohSpecificFunctions\"\r\nimport info from \"../../../assets/uiIcons/info.svg\"\r\nimport { classes } from \"./CardListItem.utils\"\r\nimport styles from \"./CardListItem.module.css\"\r\n\r\nfunction CardListItem({\r\n  isTestComponent, // <boolean> false renders all card options (modify, remove, switch sections, info)\r\n  cardObj, // <object> card object containing \"name\", \"type\" and \"quantity as keys\"\r\n  deleteIcon, // <string> path to \"cross\" delete icon's svg\r\n  arrowObject, // <object> \"switch section\"'s arrow icon object (icon, alt, style and dataDestination as keys)\r\n  onModifyCardQuantity, // <function> card quantity MiniCircle onClick's callback\r\n  onRemoveCardFromList, // <function> remove card MiniCircle onClick's callback\r\n  onMoveCardBetweenSections, // <function> \"switch sections\" MiniCircle onClick's callback\r\n  onShowCardDetails, // <function> \"i\" (info) MiniCircle onClick's callback\r\n  showCardDetails, // <boolean> on true, \"i\" MiniCircle will render\r\n  classNames = {} // <object> classNames keys and values. Check them in propTypes below\r\n}) {\r\n  // state and toggler to control MiniCircles' rendering\r\n  const [showMiniCircles, toggleMiniCircles] = useToggle(false)\r\n  // spread cardObj into their own variables\r\n  const { name, type, quantity } = cardObj\r\n\r\n  const handleQuantityMiniCircleClick = useCallback(() => {\r\n    // card object must bubble up, so pass it as args to function in props\r\n    onModifyCardQuantity(cardObj)\r\n  }, [onModifyCardQuantity])\r\n\r\n  const handleDeleteMiniCircleClick = useCallback(() => {\r\n    // same as handleDeleteMiniCircleClick, but for cardObj's \"name\"\r\n    onRemoveCardFromList(name)\r\n  }, [onRemoveCardFromList])\r\n\r\n  const handleMoveCardMiniCircleClick = useCallback(() => {\r\n    // same as above\r\n    onMoveCardBetweenSections(cardObj.name, arrowObject.dataDestination)\r\n  }, [onMoveCardBetweenSections])\r\n\r\n  const handleInfoMiniCircleClick = useCallback(() => {\r\n    // aaaaand, same\r\n    onShowCardDetails(cardObj)\r\n  }, [onShowCardDetails])\r\n\r\n  return (\r\n    <li\r\n      style={{ color: getCardTypeStyle(type, 1) }}\r\n      tabIndex={0}\r\n      data-name={name}\r\n      onBlur={toggleMiniCircles}\r\n      onFocus={toggleMiniCircles}\r\n      className={classes.container(classNames.container)}\r\n    >\r\n      {name}\r\n      {\r\n        // a <CardListItem /> component rendered in \"Test\" section will lack all\r\n        // modifying MiniCircles, as we are not intended to change components in\r\n        // any way there. We are to test them only\r\n        !isTestComponent && (\r\n          <>\r\n            {showCardDetails && (\r\n              <MiniCircleWithTransition\r\n                triggerOn={showMiniCircles}\r\n                display={\r\n                  <img src={info} alt=\"card info\" className={styles.InfoIcon} />\r\n                }\r\n                animateOnClick\r\n                role=\"button\"\r\n                onClick={handleInfoMiniCircleClick}\r\n                classNames={classes.infoMiniCircle(classNames.miniCircle)}\r\n              />\r\n            )}\r\n            <MiniCircleWithTransition\r\n              triggerOn={showMiniCircles && !!arrowObject}\r\n              display={\r\n                <img\r\n                  src={arrowObject.icon}\r\n                  alt={arrowObject.alt}\r\n                  style={arrowObject.style}\r\n                  className={styles.ArrowIcon}\r\n                />\r\n              }\r\n              animateOnClick\r\n              role=\"button\"\r\n              onClick={handleMoveCardMiniCircleClick}\r\n              classNames={classes.arrowMiniCircle(classNames.arrowMiniCircle)}\r\n            />\r\n            <MiniCircleWithTransition\r\n              triggerOn={showMiniCircles}\r\n              display={\r\n                <img\r\n                  src={deleteIcon}\r\n                  className={styles.DeleteIcon}\r\n                  alt=\"Remove\"\r\n                />\r\n              }\r\n              animateOnClick\r\n              role=\"button\"\r\n              onClick={handleDeleteMiniCircleClick}\r\n              classNames={classes.deleteMiniCircle(classNames.deleteMiniCircle)}\r\n            />\r\n            <MiniCircle\r\n              display={quantity}\r\n              addNumberColorIndicator\r\n              animateOnClick\r\n              role=\"button\"\r\n              ariaLabel=\"Card quantity\"\r\n              onClick={handleQuantityMiniCircleClick}\r\n              classNames={classes.miniCircle(classNames.miniCircle)}\r\n            />\r\n          </>\r\n        )\r\n      }\r\n    </li>\r\n  )\r\n}\r\n\r\nCardListItem.propTypes = {\r\n  isTestComponent: PropTypes.bool.isRequired,\r\n  cardObj: PropTypes.shape({\r\n    type: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    quantity: PropTypes.number.isRequired\r\n  }),\r\n  deleteIcon: PropTypes.string.isRequired,\r\n  arrowObject: PropTypes.shape({\r\n    icon: PropTypes.string,\r\n    alt: PropTypes.string,\r\n    style: PropTypes.object,\r\n    dataDestination: PropTypes.string\r\n  }),\r\n  onModifyCardQuantity: PropTypes.func.isRequired,\r\n  onRemoveCardFromList: PropTypes.func.isRequired,\r\n  onMoveCardBetweenSections: PropTypes.func.isRequired,\r\n  onShowCardDetails: PropTypes.func.isRequired,\r\n  showCardDetails: PropTypes.bool.isRequired,\r\n  classNames: PropTypes.shape({\r\n    container: PropTypes.arrayOf(PropTypes.string),\r\n    miniCircle: PropTypes.arrayOf(PropTypes.string),\r\n    deleteMiniCircle: PropTypes.arrayOf(PropTypes.string),\r\n    arrowMiniCircle: PropTypes.arrayOf(PropTypes.string),\r\n    infoMiniCircle: PropTypes.arrayOf(PropTypes.string)\r\n  })\r\n}\r\n\r\nexport default memo(CardListItem)\r\n","import React from \"react\"\r\nimport CardListItem from \"../CardListItem/CardListItem\"\r\nimport MiniCircle from \"../../UI/MiniCircle/MiniCircle\"\r\nimport {\r\n  getCardDefaultSection,\r\n  getCardReverseSection\r\n} from \"../../../utils/yugiohSpecificFunctions\"\r\nimport styles from \"./DeckCreatorScreen.module.css\"\r\n\r\nexport const classes = {\r\n  deckBuilderTopScreen: [styles.DeckBuilderTopScreen],\r\n  deckBuilderBottomScreen: [styles.DeckBuilderBottomScreen],\r\n  miniCircle: {\r\n    main: [styles.MiniCircle],\r\n    side: [styles.MiniCircleSide],\r\n    extra: [styles.MiniCircle] // intentional style repetiton. Check getCustomDeckSectionTitles()\r\n  },\r\n  selectionMenu: {\r\n    container: [styles.SelectionMenuContainer],\r\n    content: [styles.SelectionMenuContent]\r\n  },\r\n  deckCreatorSideBar: [styles.DeckCreatorSideBarContainer]\r\n}\r\n\r\n/**\r\n * Gets the return value of Object.entries() of the selected deck in the reducer\r\n * and returns an object in the shape of {section: [<CardListItem>, <CardListItem>...]}\r\n * @param {Array} deckSections Card sections entries, shape: [section: [cardObject, cardObject, ...]]\r\n * @param {string} deleteIcon Path string targetting the icon to use in delete MiniCircle\r\n * @param {string} arrowIcon The string pointing to the arrow icon svg image\r\n * @param {function} modifyQtyCallback Callback to assign to card quantity MiniCircle's onClick\r\n * @param {function} deleteItemCallback Callback to assign to delete card MiniCircle's onClick\r\n * @param {function} moveCardCallback Callback to assign to move (arrow) card MiniCircle's onClick\r\n * @param {function} showCardDetailsCallback Callback to assign to card info MiniCircle's onClick\r\n */\r\nexport function getCardListItemsJSXPerDeckSection(\r\n  deckSections,\r\n  deleteIcon,\r\n  arrowIcon,\r\n  modifyQtyCallback,\r\n  deleteItemCallback,\r\n  moveCardCallback,\r\n  showCardDetailsCallback,\r\n  cardCacheLength\r\n) {\r\n  return deckSections.reduce((acc, entry) => {\r\n    // save the process in a variable. We might need to reverse it before returning it\r\n    const cardListItemsJSXPerSection = {\r\n      ...acc,\r\n      // entry[0] is \"main\", \"side\", \"extra\" or \"test\". entry[1] the array with card objects\r\n      [entry[0]]: entry[1].map((cardObj) => {\r\n        // get the string of the section where the card normally belongs to\r\n        const defaultCardSection = getCardDefaultSection(cardObj.type)\r\n        // and the one where it should be moved to if switching sections\r\n        const reverseCardSection = getCardReverseSection(cardObj.type, entry[0])\r\n        // styles for the array to move to and from \"side\", \"extra\", \"main\"\r\n        const arrowStyle =\r\n          entry[0] === \"main\" ||\r\n          (defaultCardSection === \"extra\" && entry[0] !== \"extra\")\r\n            ? { transform: \"rotate(180deg)\" } // rotate if card belongs to extra deck\r\n            : null\r\n        // form the config object for the arrow svg component\r\n        const arrowObj = {\r\n          icon: arrowIcon,\r\n          style: arrowStyle,\r\n          alt: `Move to ${reverseCardSection}`,\r\n          dataDestination: reverseCardSection\r\n        }\r\n        // for each card object in the section being reduced, return its JSX\r\n        return (\r\n          <CardListItem\r\n            key={cardObj.reactKey ?? cardObj.name + reverseCardSection}\r\n            isTestComponent={entry[0] === \"test\"}\r\n            cardObj={cardObj}\r\n            deleteIcon={deleteIcon}\r\n            arrowObject={arrowObj}\r\n            onModifyCardQuantity={modifyQtyCallback}\r\n            onRemoveCardFromList={deleteItemCallback}\r\n            onMoveCardBetweenSections={moveCardCallback}\r\n            onShowCardDetails={showCardDetailsCallback}\r\n            showCardDetails={!!cardCacheLength}\r\n          />\r\n        )\r\n      })\r\n    }\r\n    // reverse the array corresponding to key 'test'. This gives the impression\r\n    // to add cards to the top of list instead of the bottom when drawing\r\n    if (entry[0] === \"test\") cardListItemsJSXPerSection[entry[0]].reverse()\r\n    // return reduce() result up to this point\r\n    return cardListItemsJSXPerSection\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Gets the return value of Object.entries() of the selected deck in the reducer\r\n * and returns an object in the shape of {section: <CustomTitleJSX />} to use\r\n * in SelectionMenuScreen component\r\n * @param {Array} deckSections Card sections' entries, shape: [section: [cardObject, cardObject, ...]]\r\n * @param {object} cardQuantityPerSection Card sections' card quantites, shape: {section: quantity}\r\n * @param {object} miniCircleClasses Card sections' title classes, shape {section: [className]}\r\n */\r\nexport function getCustomDeckSectionTitles(\r\n  deckSections,\r\n  cardQuantityPerSection,\r\n  miniCircleClasses\r\n) {\r\n  // construct an array of all keys in deckSections (titles)\r\n  const sectionTitles = deckSections.map((sectionArr) => sectionArr[0])\r\n  // construct the target object to return\r\n  return sectionTitles.reduce((acc, title) => {\r\n    return {\r\n      ...acc,\r\n      [title]: (\r\n        <>\r\n          {/* title to show is capitalized */}\r\n          {title[0].toUpperCase() + title.slice(1)}\r\n          {/* deckSections.length - 1 is \"Test\" section, which does not use a MiniCircle */}\r\n          {deckSections[deckSections.length - 1][0] !== title && (\r\n            <MiniCircle\r\n              display={cardQuantityPerSection[title]}\r\n              animateOnDisplayChange\r\n              classNames={miniCircleClasses[title]}\r\n            />\r\n          )}\r\n        </>\r\n      )\r\n    }\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Gets the return value of Object.entries() of the selected deck in the reducer\r\n * and returns an object in the shape of {section: cardQuantityInSection}\r\n * @param {Array} deckSections Card sections entries, shape: [section: [cardObject, cardObject, ...]]\r\n */\r\nexport function getCardQuantityPerDeckSection(deckSections) {\r\n  return deckSections.reduce((acc, entry) => {\r\n    return {\r\n      ...acc,\r\n      [entry[0]]: entry[1].reduce(\r\n        (currQty, cardObj) => currQty + cardObj.quantity,\r\n        0\r\n      )\r\n    }\r\n  }, {})\r\n}\r\n","import React, { useEffect, useContext, useCallback, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { MediaQuery } from \"../../../contexts/MediaQueryContext\"\r\nimport { DeckBuilderContext } from \"../../../contexts/DeckBuilderContext\"\r\nimport * as deckConstructorActionCreators from \"../../../store/DeckConstructor/deckConstructorActionCreators\"\r\nimport DeckBuilderTopScreen from \"../../../wrappers/DeckBuilderTopScreen/DeckBuilderTopScreen\"\r\nimport DeckBuilderBottomScreen from \"../../../wrappers/DeckBuilderBottomScreen/DeckBuilderBottomScreen\"\r\nimport HalfScreenDivision from \"../../../wrappers/HalfScreenDivision/HalfScreenDivision\"\r\nimport SelectionMenuScreen from \"../../UI/SelectionMenuScreen/SelectionMenuScreen\"\r\nimport DeckCreatorSideBar from \"../DeckCreatorSideBar/DeckCreatorSideBar\"\r\nimport DeckSelectionAndHelpMenu from \"../DeckSelectionAndHelpMenu/DeckSelectionAndHelpMenu\"\r\nimport {\r\n  classes,\r\n  getCardListItemsJSXPerDeckSection,\r\n  getCustomDeckSectionTitles,\r\n  getCardQuantityPerDeckSection\r\n} from \"./DeckCreatorScreen.utils\"\r\nimport arrowSVG from \"../../../assets/uiIcons/arrow2.svg\"\r\nimport crossSVG from \"../../../assets/uiIcons/cross.svg\"\r\n\r\nfunction DeckCreatorScreen({\r\n  playSFXs // <boolean> global ON/OFF state for SFXs, in UIContext\r\n}) {\r\n  // bring needed states and functions from DeckBuilderContext\r\n  const {\r\n    deckState,\r\n    cardCache,\r\n    dispatchDeckAction,\r\n    triggerCardDetailsToast\r\n  } = useContext(DeckBuilderContext)\r\n  // screen division components modify inline styles according to device orientation\r\n  const { mq } = useContext(MediaQuery)\r\n\r\n  const handleModifyCardQuantity = useCallback(\r\n    (cardObj) => {\r\n      dispatchDeckAction(deckConstructorActionCreators.addCard(cardObj))\r\n    },\r\n    [dispatchDeckAction]\r\n  )\r\n\r\n  const handleRemoveCardFromList = useCallback(\r\n    (cardName) => {\r\n      dispatchDeckAction(deckConstructorActionCreators.removeCard(cardName))\r\n    },\r\n    [dispatchDeckAction]\r\n  )\r\n\r\n  const handleChangeCurrentDeckSection = useCallback(\r\n    (e) => {\r\n      dispatchDeckAction(\r\n        // use customTitle's data-id as deck section name\r\n        deckConstructorActionCreators.changeSection(e.target.dataset.id)\r\n      )\r\n    },\r\n    [dispatchDeckAction]\r\n  )\r\n\r\n  const handleMoveCardBetweenSections = useCallback(\r\n    (cardName, deckSectionName) => {\r\n      dispatchDeckAction(\r\n        deckConstructorActionCreators.moveCardBetweenSections(\r\n          cardName,\r\n          deckSectionName\r\n        )\r\n      )\r\n    },\r\n    [dispatchDeckAction]\r\n  )\r\n\r\n  useEffect(() => {\r\n    // SelectionMenuScreen component will always fall back to first title on\r\n    // mount phase, being \"Main\", so sync state to point to that section.\r\n    // Also, when unmounting this component (root level after page), then\r\n    // re-sync it to \"Main\". This is such because if we unmount it from \"Test\",\r\n    // then when we re-mount it, \"Animated Number\" from CardListStatSVG will\r\n    // start counting up, and instantly unmount. SetState there will be active\r\n    // when that component unmounts. That is a memory leak.\r\n    dispatchDeckAction(deckConstructorActionCreators.changeSection(\"main\"))\r\n    return () => {\r\n      dispatchDeckAction(deckConstructorActionCreators.changeSection(\"main\"))\r\n    }\r\n  }, [dispatchDeckAction])\r\n\r\n  useEffect(() => {\r\n    // each time a card is added/removed/moved between sections, re-sort the\r\n    // array to keep its order\r\n    if (deckState.sectionWasModified) {\r\n      dispatchDeckAction(deckConstructorActionCreators.sortSection())\r\n    }\r\n  }, [deckState.sectionWasModified, dispatchDeckAction])\r\n\r\n  useEffect(() => {\r\n    // since main deck constantly changes, \"test\" section will display different cards\r\n    // each time. So, whenever we click on it, re-initialize it to reflect changes\r\n    if (deckState.selectedDeckSection === \"test\") {\r\n      dispatchDeckAction(deckConstructorActionCreators.intitializeTestDeck())\r\n    }\r\n  }, [\r\n    deckState.selectedDeckSection,\r\n    deckState.selectedDeckId,\r\n    dispatchDeckAction\r\n  ])\r\n\r\n  // last key in deckState's \"deck_\" objects is the deck's name, which is a string.\r\n  // Remove it. For everything down below to work, we only need the sections \"main\",\r\n  // \"side\", \"extra\" as arrays.\r\n  const deckSections = Object.entries(\r\n    deckState[`deck_${deckState.selectedDeckId}`]\r\n  ).slice(0, -1)\r\n  // get an object with each section as keys and their card quantities as values\r\n  // e.g.: {\"main\": 40, \"side\": 10, \"extra\": 5}\r\n  const cardQuantityPerSection = getCardQuantityPerDeckSection(deckSections)\r\n  // using all data passed as args, construct an object with each section as keys\r\n  // (same as above), but a list of <CardListItem /> components for each card\r\n  // each section holds\r\n  const cardListItemsKeyValArray = getCardListItemsJSXPerDeckSection(\r\n    deckSections,\r\n    crossSVG,\r\n    arrowSVG,\r\n    handleModifyCardQuantity,\r\n    handleRemoveCardFromList,\r\n    handleMoveCardBetweenSections,\r\n    triggerCardDetailsToast,\r\n    cardCache.length\r\n  )\r\n  // since we are not using plain text titles for <SelectionMenuScreen />, construct\r\n  // the components to use on their place\r\n  const customTitles = getCustomDeckSectionTitles(\r\n    deckSections,\r\n    cardQuantityPerSection,\r\n    classes.miniCircle\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <DeckBuilderTopScreen\r\n        ariaLabel=\"Deck creation screen. Select a section here and move cards from Card List section using the +1 option there\"\r\n        classNames={classes.deckBuilderTopScreen}\r\n      >\r\n        <HalfScreenDivision\r\n          ariaLabel=\"Deck/Side/Extra sections\"\r\n          width={mq.portrait ? 100 : 90}\r\n          height={mq.portrait ? 88 : 100}\r\n        >\r\n          <SelectionMenuScreen\r\n            ulContentAreLiTags\r\n            items={cardListItemsKeyValArray}\r\n            customTitles={customTitles}\r\n            playSFXs={playSFXs}\r\n            animation=\"li-items-slide\"\r\n            onMenuItemClick={handleChangeCurrentDeckSection}\r\n            forceSelectDefault={deckState.selectedDeckId} // each time we change deck, auto-select default title\r\n            defaultTitle=\"main\" // and let that default title be \"main\", first one\r\n            classNames={classes.selectionMenu}\r\n          />\r\n        </HalfScreenDivision>\r\n        <HalfScreenDivision\r\n          ariaLabel=\"Options\"\r\n          width={mq.portrait ? 98 : 10}\r\n          height={mq.portrait ? 12 : 100}\r\n          classNames={classes.deckCreatorSideBar}\r\n        >\r\n          <DeckCreatorSideBar\r\n            deckState={deckState}\r\n            dispatchDeckAction={dispatchDeckAction}\r\n            playSFXs={playSFXs}\r\n          />\r\n        </HalfScreenDivision>\r\n      </DeckBuilderTopScreen>\r\n      <DeckBuilderBottomScreen\r\n        ariaLabel=\"Deck selection and help screen.\"\r\n        classNames={classes.deckBuilderBottomScreen}\r\n      >\r\n        <DeckSelectionAndHelpMenu\r\n          canSave={deckState.canSave}\r\n          deckId={deckState.selectedDeckId}\r\n          deckOneNameChange={deckState.deck_1?.name} // re-render on first deck name change\r\n          selectedDeckName={deckState[`deck_${deckState.selectedDeckId}`].name}\r\n          playSFXs={playSFXs}\r\n          dispatchDeckAction={dispatchDeckAction}\r\n        />\r\n      </DeckBuilderBottomScreen>\r\n    </>\r\n  )\r\n}\r\n\r\nDeckCreatorScreen.propTypes = {\r\n  playSFXs: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default memo(DeckCreatorScreen)\r\n","import styles from \"./CardSelectionItem.module.css\"\r\n\r\nexport const classes = {\r\n  addMiniCircle: [styles.MiniCircle],\r\n  infoMiniCircle: [styles.MiniCircle, styles.InfoMiniCircle]\r\n}\r\n","import React, { useCallback, useRef } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport useToggle from \"../../../hooks/useToggle\"\r\nimport MiniCircleWithTransition from \"../../UI/MiniCircleWithTransition/MiniCircleWithTransition\"\r\nimport { getCardTypeStyle } from \"../../../utils/yugiohSpecificFunctions\"\r\nimport info from \"../../../assets/uiIcons/info.svg\"\r\nimport { classes } from \"./CardSelectionItem.utils\"\r\nimport styles from \"./CardSelectionItem.module.css\"\r\n\r\nexport default function CardSelectionItem({\r\n  card, // <object> Card object with its name, quantity and type\r\n  onAddCircleClick, // <function> \"+1\" MiniCircle onClick's callback\r\n  onInfoCircleClick // <function> \"i\" (info) MiniCircle onClick's callback\r\n}) {\r\n  // we only need to calculate \"color\" styles once. Store it in a referece so\r\n  // it prevails between components (it does not re-calculate on re-render)\r\n  const cardColor = useRef({ color: getCardTypeStyle(card.type, 1) })\r\n  // boolean and toggler to show/hide MiniCircles\r\n  const [showMiniCircles, toggleMiniCircles] = useToggle(false)\r\n\r\n  const handleAddCircleClick = useCallback(() => {\r\n    // card object must bubble up, so pass it as args to function in props\r\n    onAddCircleClick(card)\r\n  }, [onAddCircleClick, card])\r\n\r\n  const handleInfoCircleClick = useCallback(() => {\r\n    // same as handleAddCircleClick\r\n    onInfoCircleClick(card)\r\n  }, [onInfoCircleClick, card])\r\n\r\n  return (\r\n    <li\r\n      style={cardColor.current}\r\n      tabIndex={0}\r\n      onFocus={toggleMiniCircles}\r\n      onBlur={toggleMiniCircles}\r\n      className={styles.Container}\r\n    >\r\n      {card.name}\r\n      <MiniCircleWithTransition\r\n        triggerOn={showMiniCircles} // render component on showMiniCircles = true\r\n        display=\"+1\"\r\n        animateOnClick // \"grow\" animation in MiniCircle will play on click\r\n        role=\"button\"\r\n        ariaLabel=\"Add card\"\r\n        onClick={handleAddCircleClick}\r\n        classNames={classes.addMiniCircle}\r\n      />\r\n      <MiniCircleWithTransition\r\n        triggerOn={showMiniCircles}\r\n        display={<img src={info} alt=\"card info\" className={styles.InfoIcon} />}\r\n        animateOnClick\r\n        role=\"button\"\r\n        onClick={handleInfoCircleClick}\r\n        classNames={classes.infoMiniCircle}\r\n      />\r\n    </li>\r\n  )\r\n}\r\n\r\nCardSelectionItem.propTypes = {\r\n  card: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired\r\n  }),\r\n  onAddCircleClick: PropTypes.func.isRequired,\r\n  onInfoCircleClick: PropTypes.func.isRequired\r\n}\r\n","import React from \"react\"\r\nimport Spinner from \"../../UI/Spinner/Spinner\"\r\nimport Button from \"../../UI/Button/Button\"\r\nimport styles from \"./CardSelection.module.css\"\r\n\r\nexport const classes = {\r\n  refetchButton: [\"width85\", \"letterSpacing015\", \"bold\", \"italic\"],\r\n  miniCircle: [styles.ItemModifier],\r\n  miniCircleMinus: [styles.ItemModifier, styles.ItemModifierMinus],\r\n  spinner: {\r\n    container: [styles.SpinnerContainer]\r\n  }\r\n}\r\n\r\nexport const jsx = {\r\n  loadingJSX: (\r\n    <div className={styles.TextContainer}>\r\n      <span className={styles.LoadingTextTitle}>\r\n        Loading card list, it may take some time\r\n      </span>\r\n      <span className={styles.LoadingTextSubtitle}>\r\n        (there are 10.000+ cards!)\r\n      </span>\r\n      <Spinner classNames={classes.spinner} />\r\n    </div>\r\n  ),\r\n  errorJSX: (refetchCardList) => (\r\n    <div className={styles.TextContainer}>\r\n      <span className={styles.ErrorTitle}>Error while retrieving cards</span>\r\n      <span className={styles.ErrorSubtitle}>\r\n        Check that you are connected to internet and try refetching with the\r\n        button below.\r\n      </span>\r\n      <span className={styles.ErrorSubtitle}>\r\n        If the button is disabled, check \"Danger Zone\" in \"Configs\" page.\r\n      </span>\r\n      <Button\r\n        type=\"secondary\"\r\n        disabled={!navigator.onLine}\r\n        sutileAnimation\r\n        onClick={refetchCardList}\r\n        classNames={classes.refetchButton}\r\n      >\r\n        {navigator.onLine\r\n          ? \"Try refetching cards\"\r\n          : \"Cannot fetch cards. Not connected to internet\"}\r\n      </Button>\r\n    </div>\r\n  ),\r\n  cardsLoadedJSX: (\r\n    <div className={styles.TextContainer}>\r\n      <span className={styles.SuccessTitle}>Cards loaded!</span>\r\n      <span className={styles.SuccessSubtitle}>\r\n        Type 3 or more subsequent characters of the card's name in \"Filter list\"\r\n        to show results.\r\n      </span>\r\n      <span className={styles.SuccessSubtitle}>\r\n        Click on the card and then on \"+1\" to add it to the deck.\r\n      </span>\r\n      <span className={styles.SuccessSubtitle}>\r\n        Check \"Help\" for more information.\r\n      </span>\r\n    </div>\r\n  ),\r\n  noMatchJSX: (\r\n    <div className={styles.TextContainer}>\r\n      <span className={styles.SuccessTitle}>Loading/Failure</span>\r\n      <span className={styles.SuccessSubtitle}>\r\n        If this message does not go away in one second, then there are no\r\n        results for what you searched.\r\n      </span>\r\n      <span className={styles.SuccessSubtitle}>\r\n        Make sure to type the name or part of the name correctly, and remember\r\n        to use special symbols if needed (like &, -, /).\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n","import React, { memo, useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport CardSelectionItem from \"../CardSelectionItem/CardSelectionItem\"\r\nimport { classes, jsx } from \"./CardSelection.utils\"\r\nimport styles from \"./CardSelection.module.css\"\r\n\r\nfunction CardSelection({\r\n  value, // <string> filter input's value\r\n  cards, // <Array> \"cards\" array from <CardListScreen />\r\n  cache, // <Array> cache containing all database-pulled card objects\r\n  isLoading, // <boolean> cardListState fetch loading state\r\n  hasError, // <boolean> cardListState fetch error state\r\n  handleCardClick, // <function> < CardSelectionItem/>'s \"+1\" MiniCircle onClick callback\r\n  fetchCardList, // <function> useFetch()'s refetch function for cardListState\r\n  setCardCache, // <function> cardCache's setter in DeckBuilderContext\r\n  triggerCardDetailsToast // <function> Toast action dispatcher for cross-components calls\r\n}) {\r\n  const refetchCardList = useCallback(() => {\r\n    // re-fetch cards from YGOPRODeck's database. On success, set cardCache with the\r\n    // resulting array of card objects, which will in term re-render this component and\r\n    // keep them loaded for filtering to work. No need to handle .catch(), as if fetch\r\n    // fails, cardListState will auto set error key to true, re-triggering the error\r\n    // message here\r\n    fetchCardList().then((newCardList) => setCardCache(newCardList))\r\n  }, [fetchCardList, setCardCache])\r\n\r\n  return (\r\n    <>\r\n      {\r\n        // on loading, show loading JSX with a spinner\r\n        isLoading && jsx.loadingJSX\r\n      }\r\n      {\r\n        // on fetch error, display error message and a button to retry\r\n        hasError && jsx.errorJSX(fetchCardList)\r\n      }\r\n      {\r\n        // from here on, fetch was successful\r\n        !isLoading && !hasError ? (\r\n          // if an app error caused cache array to be empty (and thus, no card\r\n          // objects loaded to filter), show an error message and the option to\r\n          // re-fetch cards from database\r\n          !cache.length ? (\r\n            jsx.errorJSX(refetchCardList)\r\n          ) : // from here on, both cardList and cache are loaded\r\n          cards.length ? (\r\n            // cards array is always cleared if filter contains less than 3 characters,\r\n            // which means that if it is not empty, filtering was successful.\r\n            // In that case, show all <CardSelectionItem />s matching the filtered criteria.\r\n            <ul className={styles.Container}>\r\n              {cards.map((card) => (\r\n                <CardSelectionItem\r\n                  key={card.name}\r\n                  card={card}\r\n                  onAddCircleClick={handleCardClick}\r\n                  onInfoCircleClick={triggerCardDetailsToast}\r\n                />\r\n              ))}\r\n            </ul>\r\n          ) : // if we filtered more than 2 characters and card array's length is 0,\r\n          // that means no results were found for that filter. Show a message telling so.\r\n          value.length > 2 ? (\r\n            jsx.noMatchJSX\r\n          ) : (\r\n            // only fallback case means card array is loaded and there are less than 3\r\n            // characters in filter. Display a message notifying the user cards are loaded.\r\n            jsx.cardsLoadedJSX\r\n          )\r\n        ) : // we need null as !(!isLoading && !hasError) falls back here, which\r\n        // collides with isLoading's/hasError's JSX (they load at the same time).\r\n        // So null will render nothing, leaving only those JSXs left\r\n        null\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nCardSelection.propTypes = {\r\n  value: PropTypes.string,\r\n  cards: PropTypes.arrayOf(PropTypes.object),\r\n  cache: PropTypes.arrayOf(PropTypes.object),\r\n  isLoading: PropTypes.bool.isRequired,\r\n  hasError: PropTypes.bool.isRequired,\r\n  handleCardClick: PropTypes.func.isRequired,\r\n  fetchCardList: PropTypes.func.isRequired,\r\n  triggerCardDetailsToast: PropTypes.func.isRequired\r\n}\r\n\r\nexport default memo(CardSelection)\r\n","import styles from \"./CardFilter.module.css\"\r\n\r\nexport const classes = {\r\n  inputWithLabel: {\r\n    container: [styles.InputContainer],\r\n    label: [styles.InputLabel],\r\n    input: [styles.InputInput]\r\n  }\r\n}\r\n","import React, { useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport InputWithLabel from \"../../../components/UI/InputWithLabel/InputWithLabel\"\r\nimport { classes } from \"./CardFilter.utils\"\r\n\r\nexport default function CardFilter({ value, setValue, disabled }) {\r\n  // <InputWithLabel>'s onChange callback\r\n  const handleChange = useCallback((e) => setValue(e.target.value), [setValue])\r\n\r\n  return (\r\n    <InputWithLabel\r\n      id=\"cardFilter\"\r\n      type=\"text\"\r\n      value={value}\r\n      labelText=\"Filter list\"\r\n      disabled={disabled}\r\n      autoComplete=\"off\"\r\n      role=\"search\"\r\n      onChange={handleChange}\r\n      classNames={classes.inputWithLabel}\r\n    />\r\n  )\r\n}\r\n\r\nCardFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  setValue: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool\r\n}\r\n","import styles from \"./CardListScreen.module.css\"\r\n\r\nexport const classes = {\r\n  screenDivisionTop: [styles.ScreenDivisionTop],\r\n  screenDivisionBottom: [styles.ScreenDivisionBottom]\r\n}\r\n","import React, { useState, memo, useEffect, useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport usePreviousState from \"../../../hooks/usePreviousState\"\r\nimport * as deckConstructorActionCreators from \"../../../store/DeckConstructor/deckConstructorActionCreators\"\r\nimport DeckBuilderTopScreen from \"../../../wrappers/DeckBuilderTopScreen/DeckBuilderTopScreen\"\r\nimport DeckBuilderBottomScreen from \"../../../wrappers/DeckBuilderBottomScreen/DeckBuilderBottomScreen\"\r\nimport CardSelection from \"../CardSelection/CardSelection\"\r\nimport CardFilter from \"../CardFilter/CardFilter\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport { classes } from \"./CardListScreen.utils\"\r\n\r\nfunction CardListScreen({\r\n  cardListState, // <object> useFetch()'s returned object called upon YGOPRODeck's database\r\n  cardCache, // <DeckConstructor's card cache (=== resolved cards fetched data)\r\n  dispatchDeckAction, // <function> DeckConstructor's reducer action dispatcher\r\n  fetchCardList, // <function> useFetch()'s function to hit the database again\r\n  setCardCache, // <function> cardCache's setter\r\n  triggerCardDetailsToast // <function> Toast dispatcher across-pages\r\n}) {\r\n  // \"cards\" state array is the one to be rendered in <CardSelection />, and will\r\n  // constantly mutate its values by filtering card cache\r\n  const [cards, setCards] = useState([])\r\n  // \"value\" is assigned by filter card's input in <CardFilter />, and is used to\r\n  // filter cache and set state of \"cards\"\r\n  const [value, setValue] = useState(\"\")\r\n  // keep a copy of the previous typed value to check if we need to apply filtering\r\n  const previousValue = usePreviousState(value)\r\n\r\n  const handleCardClick = useCallback(\r\n    // handler to assign to \"+1\" MiniCircle in <CardSelection />. It adds a\r\n    // valid card object to the currently loaded deck\r\n    (cardObj) => {\r\n      dispatchDeckAction(deckConstructorActionCreators.addCard(cardObj, true))\r\n    },\r\n    [dispatchDeckAction]\r\n  )\r\n\r\n  useEffect(() => {\r\n    // each time value changes in <CardFilter />'s input, set a timeout of some\r\n    // ms as not to trigger this effect constantly. Filtering a list of 10.000+\r\n    // cards is expensive enough as to limit useEffect calls this way\r\n    const filterTimeout = setTimeout(() => {\r\n      // if we typed less than 3 characters in the filter, set cards state to\r\n      // and empty array, effectively rendering nothing (this way, the resulting\r\n      // filtered array will be short enough as not to overload the app with data)\r\n      if (value.length < 3) setCards([])\r\n      // on 3+ typed characters, apply filtering\r\n      else {\r\n        setCards(() => {\r\n          // if we typed one more character than the previous value and \"cards\",\r\n          // array still holds objects in it, filter it again without touching\r\n          // cardCache, as the result we are looking for is still inside \"cards\"\r\n          if (previousValue.length < value.length && cards.length !== 0) {\r\n            return cards.filter((card) =>\r\n              card.name.toLowerCase().includes(value.toLowerCase())\r\n            )\r\n          }\r\n          // otherwise, \"cards\" array is empty, it does not hold a card with a name\r\n          // equal to what we are trying to filter, or instead of typing a new\r\n          // character, we cleared one (backspace). All cases need a new filter on\r\n          // cardCache to re-set \"cards\" array.\r\n          return cardCache.filter((card) =>\r\n            card.name.toLowerCase().includes(value.toLowerCase())\r\n          )\r\n        })\r\n      }\r\n    }, uiConfigs.apiConfigs.filterTimeout)\r\n    // on cleanup, clear timeout\r\n    return () => clearTimeout(filterTimeout)\r\n  }, [value])\r\n\r\n  return (\r\n    <>\r\n      {/* Screen division where loaded cards or card fetch states are displayed */}\r\n      <DeckBuilderTopScreen\r\n        ariaLabel=\"List of all cards in the game. Click on the buttons on each to add or remove them\"\r\n        classNames={classes.screenDivisionTop}\r\n      >\r\n        <CardSelection\r\n          value={value}\r\n          cards={cards}\r\n          cache={cardCache}\r\n          isLoading={cardListState.isLoading}\r\n          hasError={cardListState.hasError}\r\n          handleCardClick={handleCardClick}\r\n          fetchCardList={fetchCardList}\r\n          setCardCache={setCardCache}\r\n          triggerCardDetailsToast={triggerCardDetailsToast}\r\n        />\r\n      </DeckBuilderTopScreen>\r\n      {/* Screen division where filtering input is displayed */}\r\n      <DeckBuilderBottomScreen\r\n        ariaLabel=\"Filter section. Type on the input below to filter the card list\"\r\n        classNames={classes.screenDivisionBottom}\r\n      >\r\n        <CardFilter\r\n          value={value}\r\n          setValue={setValue}\r\n          disabled={cardListState.isLoading || !cardCache.length}\r\n        />\r\n      </DeckBuilderBottomScreen>\r\n    </>\r\n  )\r\n}\r\n\r\nCardListScreen.propTypes = {\r\n  cardListState: PropTypes.shape({\r\n    data: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        name: PropTypes.string,\r\n        type: PropTypes.string\r\n      })\r\n    ),\r\n    isLoading: PropTypes.bool,\r\n    hasError: PropTypes.bool\r\n  }),\r\n  cardCache: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      type: PropTypes.string\r\n    })\r\n  ),\r\n  dispatchDeckAction: PropTypes.func.isRequired,\r\n  fetchCardList: PropTypes.func.isRequired,\r\n  triggerCardDetailsToast: PropTypes.func.isRequired\r\n}\r\n\r\nexport default memo(CardListScreen)\r\n","import { useRef, useEffect } from \"react\"\r\n\r\nexport default function usePreviousState(props) {\r\n  // create a ref for whatever is assigned as props\r\n  const ref = useRef()\r\n  // at any phease of the component this hook was called from, update the\r\n  // assigned props. Updating a reference does not trigger a re-render, so\r\n  // doing it this way is not only safe, but also on the component re-render\r\n  // ref.current will effectively hold the previous value.\r\n  useEffect(() => {\r\n    ref.current = props\r\n  })\r\n  return ref.current\r\n}\r\n","import React from \"react\"\r\nimport AnimatedNumber from \"animated-number-react\"\r\nimport SVGImageWithNotifications from \"../../UI/SVGImageWithNotifications/SVGImageWithNotifications\"\r\nimport card from \"../../../assets/uiIcons/card.svg\"\r\nimport styles from \"./CardListStatsSVGs.module.css\"\r\n\r\nconst classes = {\r\n  monster: getClasses(\"Monster\"),\r\n  spell: getClasses(\"Spell\"),\r\n  trap: getClasses(\"Trap\")\r\n}\r\n\r\nfunction getClasses(cardType) {\r\n  return {\r\n    container: [styles.SVGImageContainer, styles[`SVGImgContainer${cardType}`]],\r\n    image: [styles[cardType]],\r\n    text: [styles.SVGImageText]\r\n  }\r\n}\r\n\r\nexport function getSVGImageWithNotificationsJSX(\r\n  typeStatsObject,\r\n  cardType,\r\n  formatValueCallback\r\n) {\r\n  return (\r\n    <SVGImageWithNotifications\r\n      src={card}\r\n      alt={`${cardType} cards`}\r\n      text={\r\n        <>\r\n          {typeStatsObject.qty} <br />\r\n          <AnimatedNumber\r\n            value={typeStatsObject.chance}\r\n            formatValue={formatValueCallback}\r\n            duration={200}\r\n          />\r\n          %\r\n        </>\r\n      }\r\n      disabled={typeStatsObject.qty === 0}\r\n      classNames={classes[cardType]}\r\n    />\r\n  )\r\n}\r\n","import React, { useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { getSVGImageWithNotificationsJSX } from \"./CardListStatsSVGs.utils\"\r\nimport styles from \"./CardListStatsSVGs.module.css\"\r\n\r\nexport default function CardListStatsSVGs({\r\n  testDeckStats // <object> object generated by utilityFunction's getTestDeckStats()\r\n}) {\r\n  // each \"monster\", \"spell\" and \"trap\" are keys whole values contain \"qty\"\r\n  // (how many cards share the same name in the \"main\" section), and \"chance\"\r\n  // (<number> : likelihood of drawing it )\r\n  const { monster, spell, trap } = testDeckStats\r\n  // standard \"toFixed\" 2, needed in AnimatedNumber\r\n  const formatValue = useCallback((value) => value.toFixed(2), [])\r\n\r\n  return (\r\n    <div className={styles.Container}>\r\n      <div className={styles.Title}>Cards left and chance to draw</div>\r\n      {getSVGImageWithNotificationsJSX(monster, \"monster\", formatValue)}\r\n      {getSVGImageWithNotificationsJSX(spell, \"spell\", formatValue)}\r\n      {getSVGImageWithNotificationsJSX(trap, \"trap\", formatValue)}\r\n    </div>\r\n  )\r\n}\r\n\r\nCardListStatsSVGs.propTypes = {\r\n  testDeckStats: PropTypes.shape({\r\n    monster: PropTypes.shape({\r\n      qty: PropTypes.number,\r\n      chance: PropTypes.number\r\n    }),\r\n    spell: PropTypes.shape({\r\n      qty: PropTypes.number,\r\n      chance: PropTypes.number\r\n    }),\r\n    trap: PropTypes.shape({\r\n      qty: PropTypes.number,\r\n      chance: PropTypes.number\r\n    }),\r\n    total: PropTypes.number\r\n  })\r\n}\r\n","import styles from \"./CardListStatsItem.module.css\"\r\n\r\nexport const classes = {\r\n  miniCircle: [styles.MiniCircle]\r\n}\r\n","import React, { useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport AnimatedNumber from \"animated-number-react\"\r\nimport MiniCircleWithTransition from \"../../UI/MiniCircleWithTransition/MiniCircleWithTransition\"\r\nimport { getSlicedString } from \"../../../utils/utilityFunctions\"\r\nimport { classes } from \"./CardListStatsItem.utils\"\r\nimport styles from \"./CardListStatsItem.module.css\"\r\n\r\nexport default function CardListStatsItem({\r\n  cardObj, // <object> card object to be rendered in this component\r\n  drawChance, // <number> this card's quantity / card total, as float rounded to 2 decimals\r\n  cardStyle // <object> inline CSS style for wrapper <li> element\r\n}) {\r\n  // formatting callback needed for AnimatedNumber\r\n  const formatValue = useCallback((value) => `${value.toFixed(2)}%`, [])\r\n  return (\r\n    <li className={styles.Container} style={cardStyle}>\r\n      {\r\n        // viewport space limits the amount of characters a card name can hold.\r\n        // For convenience, cut them at 35 and add a trailing \"...\" at the end\r\n        getSlicedString(cardObj.name, 35, \"...\")\r\n      }\r\n      <AnimatedNumber\r\n        value={drawChance}\r\n        formatValue={formatValue}\r\n        duration={200}\r\n        className={styles.DrawPercentage}\r\n      />\r\n      <MiniCircleWithTransition\r\n        triggerOn // always show it\r\n        display={cardObj.quantity}\r\n        animateOnDisplayChange // animate it when card quantity changes\r\n        addNumberColorIndicator // match its color to its current quantity\r\n        classNames={classes.miniCircle}\r\n      />\r\n    </li>\r\n  )\r\n}\r\n\r\nCardListStatsItem.propTypes = {\r\n  cardObj: PropTypes.shape({\r\n    name: PropTypes.string,\r\n    type: PropTypes.string,\r\n    quantity: PropTypes.number\r\n  }).isRequired,\r\n  drawChance: PropTypes.number.isRequired,\r\n  cardStyle: PropTypes.shape({\r\n    color: PropTypes.string\r\n  }).isRequired\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\"\r\nimport CardListStatsItem from \"../CardListStatsItem/CardListStatsItem\"\r\nimport { getCardTypeStyle } from \"../../../utils/yugiohSpecificFunctions\"\r\nimport styles from \"./CardListStatsCards.module.css\"\r\n\r\nexport default function CardListStatsCards({\r\n  remainingCards, // <Array> remaining card objects in DeckBuilder reducer's \"fallbackTestDeck\"\r\n  cardTotal // <number> quantity of cards left in DeckBuilder reducer's \"fallbackTestDeck\"\r\n}) {\r\n  return (\r\n    // manage <li> transitioning (classNames in .module.css file)\r\n    <TransitionGroup component=\"ul\" className={styles.Container}>\r\n      {remainingCards.map((cardObj) => {\r\n        // depending on the card's type, get its associated color\r\n        const cardStyle = { color: getCardTypeStyle(cardObj.type) }\r\n        // calculate its draw chance based on its quantity and total remaining\r\n        // cards in \"test\" deck. Set it to 0 if cardTotal is 0, as if we do not\r\n        // do this, a division by 0 will crash the program\r\n        const drawChance =\r\n          cardTotal === 0 ? 0 : (cardObj.quantity / cardTotal) * 100\r\n        // render <CardListStatsItem />\r\n        return (\r\n          <CSSTransition\r\n            component={null}\r\n            key={cardObj.name}\r\n            timeout={250}\r\n            classNames=\"card-list-item-slide\"\r\n            mountOnEnter\r\n            unmountOnExit\r\n          >\r\n            <CardListStatsItem\r\n              cardObj={cardObj}\r\n              drawChance={drawChance}\r\n              cardStyle={cardStyle}\r\n            />\r\n          </CSSTransition>\r\n        )\r\n      })}\r\n    </TransitionGroup>\r\n  )\r\n}\r\n\r\nCardListStatsCards.propTypes = {\r\n  remainingCards: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      type: PropTypes.string,\r\n      quantity: PropTypes.number\r\n    })\r\n  ).isRequired,\r\n  cardTotal: PropTypes.number.isRequired\r\n}\r\n","import styles from \"./CardListStatsScreen.module.css\"\r\n\r\nexport const classes = {\r\n  screenDivisionTop: [styles.ScreenDivisionTop]\r\n}\r\n\r\n/**\r\n * Returns an object with all valid values to form CardListStatsScreen component.\r\n * That returned object includes:\r\n * > Each card type as an individual object with their quantities\r\n *   according to fallbackTestDeck and the chance to draw a card of that type.\r\n * > The total amount of cards remaining in dallbackTestDeck\r\n * > An array with all remaining card objects in fallbackTestDeck, without repeating\r\n *   names and with their remaining qantities\r\n * @param {Array} spreadedCardObjectsArray an array with card objects where each object can have the same card name, but quantities of 1\r\n */\r\nexport function getTestDeckStats(spreadedCardObjectsArray) {\r\n  const statsObject = spreadedCardObjectsArray.reduce(\r\n    (acc, cardObj) => {\r\n      // only \"monster\", \"spell\" and \"trap\" are valid keys to calculate %\r\n      let typeString = cardObj.type.split(\" \")[0].toLowerCase()\r\n      if (typeString !== \"spell\" && typeString !== \"trap\") {\r\n        typeString = \"monster\"\r\n      }\r\n      // save each card name as key entry for \"remainingCards\"\r\n      const currCardVal = acc.remainingCards[cardObj.name]\r\n      return {\r\n        ...acc,\r\n        // sum up the quantities for each \"monster\", \"spell\" and \"trap\" cards\r\n        [typeString]: {\r\n          qty: acc[typeString].qty + cardObj.quantity\r\n        },\r\n        // sum up the total of cards\r\n        total: acc.total + cardObj.quantity,\r\n        // re-merge all cards objects into one for each card name, with their\r\n        // corresponding quantities. The aim here is to reconstruct \"fallbackTestDeck\"\r\n        // to ressemble \"deckstate.deck_<id>.main\", without making use of it\r\n        remainingCards: currCardVal\r\n          ? {\r\n              ...acc.remainingCards,\r\n              [cardObj.name]: {\r\n                ...currCardVal,\r\n                quantity: currCardVal.quantity + 1\r\n              }\r\n            }\r\n          : { ...acc.remainingCards, [cardObj.name]: cardObj }\r\n      }\r\n    },\r\n    {\r\n      monster: { qty: 0 },\r\n      spell: { qty: 0 },\r\n      trap: { qty: 0 },\r\n      total: 0,\r\n      remainingCards: {}\r\n    }\r\n  )\r\n  // for each \"monster\", \"spell\" and \"trap\" key in object, create their \"chance\"\r\n  // key and assign their average versus the total amount of cards. We need to\r\n  // do this here and not in reduce above since we need the total amount of cards\r\n  // to be calculated first\r\n  new Array(\"monster\", \"spell\", \"trap\").forEach(\r\n    (type) =>\r\n      (statsObject[type].chance = statsObject.total\r\n        ? (statsObject[type].qty / statsObject.total) * 100\r\n        : 0)\r\n  )\r\n  // since \"remainingCards\" is an object with card names as keys and the whole card object\r\n  // as their values, converge them all in a single sorted array with the function below\r\n  statsObject.remainingCards = sortRemainingCards(statsObject.remainingCards)\r\n  // return the whole object as is\r\n  return statsObject\r\n}\r\n\r\n/**\r\n * Gets the array formed with getTestDeckStats() \"remainingCards\" nested object which\r\n * holds all cards with no name repetition and proper quantities, uses a Map to sort\r\n * them out by type and name, constructs a flat array with the arranged values and returns it.\r\n * @param {object} remainingCards The object resulting from statsObject.remainingCards,\r\n * which contains an array of all disordered cards\r\n */\r\nfunction sortRemainingCards(remainingCards) {\r\n  // create the map and fill it with each category, with an empty array on each\r\n  const typeMap = new Map()\r\n  const typeStrings = [\"Monster\", \"Spell\", \"Trap\"]\r\n  typeStrings.forEach((type) => typeMap.set(type, []))\r\n  // push each card object to its type array inside the map\r\n  Object.values(remainingCards).forEach((cardObj) => {\r\n    let type = cardObj.type.split(\" \")[0]\r\n    if (type !== \"Spell\" && type !== \"Trap\") type = \"Monster\"\r\n    typeMap.get(type).push(cardObj)\r\n  })\r\n  // sort each type array in the map by their name in descending order\r\n  typeStrings.forEach((type) =>\r\n    typeMap.get(type).sort((a, b) => (a.name > b.name ? 1 : -1))\r\n  )\r\n  // flat all map arrays into a single one and return it\r\n  return Array.from(typeMap.values()).flat()\r\n}\r\n","import React, { memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport DeckBuilderTopScreen from \"../../../wrappers/DeckBuilderTopScreen/DeckBuilderTopScreen\"\r\nimport DeckBuilderBottomScreen from \"../../../wrappers/DeckBuilderBottomScreen/DeckBuilderBottomScreen\"\r\nimport CardListStatsSVGs from \"../CardListStatsSVGs/CardListStatsSVGs\"\r\nimport CardListStatsCards from \"../CardListStatsCards/CardListStatsCards\"\r\nimport { classes, getTestDeckStats } from \"./CardListStatsScreen.utils\"\r\n\r\nfunction CardListStatsScreen({\r\n  deckState // <object> DeckConstructor's reducer \"deckState\" object\r\n}) {\r\n  // fallbackTestDeck in deckState's reducer object is always updated to what \"main\"\r\n  // section of the current deck holds.\r\n  // If this component renders, it means we are in \"Test\" section, so construct a valid\r\n  // object containing the remaining cards in the \"main\" section (not yet drawn), the\r\n  // \"total\" amount of cards in \"main\" section, and \"monster\", \"spell\" and \"trap\" objects,\r\n  // each of them with their remaining card quantity and chance to be drawn\r\n  const testDeckStats = getTestDeckStats(deckState.fallbackTestDeck)\r\n\r\n  return (\r\n    <>\r\n      <DeckBuilderTopScreen\r\n        ariaLabel=\"Deck stats for Testing purposes\"\r\n        classNames={classes.screenDivisionTop}\r\n      >\r\n        {/* SVGs for \"monster\", \"spell\" and \"trap\" cards and their draw % ratios */}\r\n        <CardListStatsSVGs testDeckStats={testDeckStats} />\r\n        {/* list of card items with their remaining quantities and draw % ratios */}\r\n        <CardListStatsCards\r\n          remainingCards={testDeckStats.remainingCards}\r\n          cardTotal={testDeckStats.total}\r\n        />\r\n      </DeckBuilderTopScreen>\r\n      {/* fillter section to match styles in <DeckCreatorScreen />'s view */}\r\n      <DeckBuilderBottomScreen\r\n        ariaLabel=\"Filler section\"\r\n        classNames={classes.screenDivisionBottom}\r\n        children=\"\" // no children. Filler section\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nCardListStatsScreen.propTypes = {\r\n  deckState: PropTypes.object.isRequired\r\n}\r\n\r\nexport default memo(CardListStatsScreen)\r\n","import React, { useContext } from \"react\"\r\nimport { DeckBuilderContext } from \"../../../contexts/DeckBuilderContext\"\r\nimport CardListScreen from \"../CardListScreen/CardListScreen\"\r\nimport CardListStatsScreen from \"../CardListStatsScreen/CardListStatsScreen\"\r\n\r\nexport default function CardListOrStatsScreen() {\r\n  // grab everything needed of DeckBuilderContext to pass to components below\r\n  const {\r\n    cardListState,\r\n    cardCache,\r\n    deckState,\r\n    dispatchDeckAction,\r\n    setCardCache,\r\n    fetchCardList,\r\n    triggerCardDetailsToast\r\n  } = useContext(DeckBuilderContext)\r\n  // if we are sitting in \"Test\" section of <SelectionMenuScreen />, render\r\n  // <CardListStatsScreen /> (which shows each card in \"main\" section and their\r\n  // chance to be drawn), otherwise bring <CardListScreen /> (the list of fetched\r\n  // cards to construct the deck)\r\n  return deckState.selectedDeckSection === \"test\" ? (\r\n    <CardListStatsScreen deckState={deckState} />\r\n  ) : (\r\n    <CardListScreen\r\n      cardListState={cardListState}\r\n      cardCache={cardCache}\r\n      dispatchDeckAction={dispatchDeckAction}\r\n      fetchCardList={fetchCardList}\r\n      setCardCache={setCardCache}\r\n      triggerCardDetailsToast={triggerCardDetailsToast}\r\n    />\r\n  )\r\n}\r\n","import React, { useContext, useEffect } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport useAudio from \"../../hooks/useAudio\"\r\nimport { MediaQuery } from \"../../contexts/MediaQueryContext\"\r\nimport SecondaryScreens from \"../../components/DeckBuilder/SecondaryScreens/SecondaryScreens\"\r\nimport HalfScreenDivision from \"../../wrappers/HalfScreenDivision/HalfScreenDivision\"\r\nimport DeckCreatorScreen from \"../../components/DeckBuilder/DeckCreatorScreen/DeckCreatorScreen\"\r\nimport CardListOrStatsScreen from \"../../components/DeckBuilder/CardListOrStatsScreen/CardListOrStatsScreen\"\r\nimport switchmp3 from \"../../assets/audios/switch.mp3\"\r\nimport clickOKmp3 from \"../../assets/audios/clickOK.mp3\"\r\nimport toastmp3 from \"../../assets/audios/toast.mp3\"\r\nimport uiConfigs from \"../../utils/ui.configs.json\"\r\nimport styles from \"./DeckBuilderPage.module.css\"\r\n\r\nexport default function DeckBuilderPage({\r\n  playSFXs, // <boolean> global ON/OFF sfx switch\r\n  swipe, // <function> App.js swipe handler\r\n  toastState, // <oblject> UIContext's <Toast /> reducer state\r\n  ...otherProps // all other UIContext props (check propTypes below for them)\r\n}) {\r\n  // Screen division components will adjust styles depending on device's orientation\r\n  const { mq } = useContext(MediaQuery)\r\n  // audio JSX and controls object for <SecondaryScreens />'s \"success\" sfx\r\n  const [switchAudioJSX, switchSFX] = useAudio(switchmp3, {\r\n    toggleOn: playSFXs\r\n  })\r\n  // audio JSX and controls object for <SecondaryScreens />'s \"confirm\" sfx\r\n  const [clickOKAudioJSX, clickOKSFX] = useAudio(clickOKmp3, {\r\n    toggleOn: playSFXs\r\n  })\r\n  // audio JSX and controls object for toast trigger sfx\r\n  const [toastAudioJSX, toastSFX] = useAudio(toastmp3, {\r\n    toggleOn: playSFXs,\r\n    playbackRate: 1.2\r\n  })\r\n\r\n  useEffect(() => {\r\n    // play <Toast /> SFX each time toast opens, except when adding or\r\n    // saving a deck, as both have a \"success\" sfx assigned on their place\r\n    toastState.isActive &&\r\n      toastState.type !== uiConfigs.togglers.toast.addDeck &&\r\n      toastState.type !== uiConfigs.togglers.toast.saveDeck &&\r\n      toastSFX.play()\r\n  }, [toastState.isActive])\r\n\r\n  return (\r\n    <>\r\n      <SecondaryScreens\r\n        playSFXs={playSFXs}\r\n        swipe={swipe}\r\n        switchSFX={switchSFX}\r\n        clickOKSFX={clickOKSFX}\r\n        toastState={toastState}\r\n        {...otherProps}\r\n      />\r\n      <main className={styles.Container}>\r\n        <HalfScreenDivision\r\n          ariaLabel=\"Deck construction area\"\r\n          width={mq.portrait ? 98 : 61}\r\n          height={mq.portrait ? 63 : 100}\r\n          component=\"section\"\r\n        >\r\n          <DeckCreatorScreen playSFXs={playSFXs} />\r\n        </HalfScreenDivision>\r\n        <HalfScreenDivision\r\n          ariaLabel=\"Card list area\"\r\n          width={mq.portrait ? 98 : 37}\r\n          height={mq.portrait ? 37 : 100}\r\n          component=\"section\"\r\n        >\r\n          <CardListOrStatsScreen />\r\n        </HalfScreenDivision>\r\n      </main>\r\n      {switchAudioJSX}\r\n      {clickOKAudioJSX}\r\n      {toastAudioJSX}\r\n    </>\r\n  )\r\n}\r\n\r\nDeckBuilderPage.propTypes = {\r\n  secondScreenState: PropTypes.bool.isRequired,\r\n  secondScreenType: PropTypes.string.isRequired,\r\n  toggleSecondScreen: PropTypes.func.isRequired,\r\n  toastState: PropTypes.object.isRequired,\r\n  dispatchToastAction: PropTypes.func.isRequired,\r\n  screenIsFrozen: PropTypes.bool.isRequired,\r\n  setScreenIsFrozen: PropTypes.func.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired,\r\n  modalSFX: PropTypes.object.isRequired,\r\n  swipe: PropTypes.func.isRequired\r\n}\r\n","import styles from \"./ExpandableIcon.module.css\"\r\n\r\nexport const classes = {\r\n  container: (\r\n    showDetails,\r\n    propsContainerClasses,\r\n    propsExpandContainerClasses\r\n  ) =>\r\n    [\r\n      styles.Container,\r\n      showDetails ? styles.ExpandContainer : \"\",\r\n      propsContainerClasses?.join(\" \"),\r\n      showDetails ? propsExpandContainerClasses?.join(\" \") : \"\"\r\n    ].join(\" \"),\r\n  content: (showDetails, propsClassNames) =>\r\n    [\r\n      styles.Content,\r\n      showDetails ? styles.ExpandContent : \"\",\r\n      propsClassNames?.join(\" \")\r\n    ].join(\" \"),\r\n  icon: (showDetails, propsClassNames) =>\r\n    [\r\n      styles.Icon,\r\n      showDetails ? styles.ExpandIcon : \"\",\r\n      propsClassNames?.join(\" \")\r\n    ].join(\" \")\r\n}\r\n","import React, { useCallback, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport useToggle from \"../../../hooks/useToggle\"\r\nimport { classes } from \"./ExpandableIcon.utils\"\r\n\r\nfunction ExpandableIcon({\r\n  children,\r\n  siteObject, // <object> utilityObject.js's \"acknowledgmentsSites\" and \"socialMediaSites\"\r\n  site, // <string> siteObject's key\r\n  tabIndex, // <number> necessary to handle tabbing and triggering blur\r\n  expIconSFX, // <object> useAudio() SFX object to add to icon click\r\n  classNames = {} // <object> classNames object. Check propTypes below for its constitution\r\n}) {\r\n  // state and toggler to handle icon displaying its contents\r\n  const [showDetails, toggleShowDetails] = useToggle(false)\r\n\r\n  const handleIconClick = useCallback(\r\n    (e) => {\r\n      // do not propagate the click, play the SFX if we are opening the\r\n      // contents, and toggle the state to opened/closed\r\n      e.stopPropagation()\r\n      if (expIconSFX && !showDetails) expIconSFX.restart()\r\n      toggleShowDetails()\r\n    },\r\n    [toggleShowDetails, showDetails]\r\n  )\r\n\r\n  return (\r\n    <div\r\n      className={classes.container(\r\n        showDetails,\r\n        classNames.container,\r\n        classNames.expandContainer\r\n      )}\r\n      tabIndex={tabIndex}\r\n      onClick={showDetails ? null : toggleShowDetails}\r\n      onBlur={showDetails ? toggleShowDetails : null}\r\n    >\r\n      <img\r\n        src={siteObject[site].src} // coming from utilityObjects sites configs\r\n        alt={siteObject[site].alt} // same\r\n        onClick={handleIconClick}\r\n        className={classes.icon(showDetails, classNames.icon)}\r\n        role=\"button\"\r\n        aria-expanded={showDetails}\r\n      />\r\n      <div className={classes.content(showDetails, classNames.content)}>\r\n        {showDetails && children}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nExpandableIcon.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  siteObject: PropTypes.shape({\r\n    src: PropTypes.string,\r\n    alt: PropTypes.string,\r\n    divContent: PropTypes.node\r\n  }).isRequired,\r\n  site: PropTypes.string.isRequired,\r\n  tabIndex: PropTypes.number,\r\n  expIconSFX: PropTypes.object,\r\n  classNames: PropTypes.shape({\r\n    container: PropTypes.arrayOf(PropTypes.string),\r\n    content: PropTypes.arrayOf(PropTypes.string),\r\n    icon: PropTypes.arrayOf(PropTypes.string),\r\n    expandContainer: PropTypes.arrayOf(PropTypes.string)\r\n  })\r\n}\r\n\r\nexport default memo(ExpandableIcon)\r\n","import styles from \"./SecondaryScreens.module.css\"\r\n\r\nexport const classes = {\r\n  expandableIcon: (site, large) => ({\r\n    container: [\r\n      styles.IconContainer,\r\n      styles[`Icon${site[0].toUpperCase() + site.slice(1)}`]\r\n    ],\r\n    content: [large ? styles.IconContentLarge : \"\"],\r\n    icon: [\r\n      styles.IconImage,\r\n      large\r\n        ? [\r\n            styles.FixIconImage,\r\n            styles[`Icon${site[0].toUpperCase() + site.slice(1)}Fixed`]\r\n          ].join(\" \")\r\n        : \"\"\r\n    ],\r\n    expandContainer: [\r\n      styles.ExpandIconContainer,\r\n      large ? styles.LargeContainer : \"\"\r\n    ]\r\n  })\r\n}\r\n","import React, { useCallback } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport useAudio from \"../../../hooks/useAudio\"\r\nimport Toast from \"../../UI/Toast/Toast\"\r\nimport SecondaryScreen from \"../../UI/SecondaryScreen/SecondaryScreen\"\r\nimport SelectionMenuScreen from \"../../UI/SelectionMenuScreen/SelectionMenuScreen\"\r\nimport ExpandableIcon from \"../../UI/ExpandableIcon/ExpandableIcon\"\r\nimport {\r\n  socialMediaSites,\r\n  cardAndPricesDatabaseSites,\r\n  acknowledgmentsSites,\r\n  secondaryScreensData\r\n} from \"../../../utils/utilityObjects\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport togglermp3 from \"../../../assets/audios/toggler.mp3\"\r\nimport { classes } from \"./SecondaryScreens.utils\"\r\nimport styles from \"./SecondaryScreens.module.css\"\r\n\r\nexport default function SecondaryScreens({\r\n  creditsScreens,\r\n  secondScreenState,\r\n  secondScreenType,\r\n  toggleSecondScreen,\r\n  toastState,\r\n  dispatchToastAction,\r\n  playSFXs,\r\n  modalSFX\r\n}) {\r\n  // grab all keys to use as titles for each <SelectionMenuScreen />\r\n  const socialMediaIcons = Object.keys(socialMediaSites)\r\n  const acknowledgmentsIcons = Object.keys(acknowledgmentsSites)\r\n  const cardAndPricesSites = Object.values(cardAndPricesDatabaseSites)\r\n  // save togglers into their own variables to dry code\r\n  const contactToggler = secondaryScreensData.credits.contact.toggler\r\n  const databaseToggler = secondaryScreensData.credits.database.toggler\r\n  const acknowledgementsToggler =\r\n    secondaryScreensData.credits.acknowledgments.toggler\r\n  // JSX and audio controls for expandable icon clicking sfx\r\n  const [expIconAudioJSX, expIconSFX] = useAudio(togglermp3, {\r\n    toggleOn: playSFXs,\r\n    playbackRate: 0.6\r\n  })\r\n\r\n  const handleToastClick = useCallback(\r\n    (e) => {\r\n      // <Toast /> state setter in reducer to pass as parameter to divContent()\r\n      // on each social media object's functions in utilityObjects.js\r\n      dispatchToastAction(\r\n        toastActionCreators.setToastState(\r\n          e.target.dataset.text,\r\n          e.target.dataset.url,\r\n          uiConfigs.togglers.toast.creditSites\r\n        )\r\n      )\r\n    },\r\n    [dispatchToastAction]\r\n  )\r\n\r\n  const handleToggleToast = useCallback(() => {\r\n    // close <Toast /> action dispatch to assign to toast Dismiss \"X\"\r\n    dispatchToastAction(toastActionCreators.closeToast())\r\n  }, [dispatchToastAction])\r\n\r\n  const getExpandableIconsArray = useCallback(\r\n    (siteNamesArray, siteNamesObject, large = false) => {\r\n      // map each site name string into their own <ExpandableIcon />\r\n      return siteNamesArray.map((site, i) => (\r\n        <ExpandableIcon\r\n          key={site}\r\n          siteObject={siteNamesObject}\r\n          site={site}\r\n          tabIndex={i + 1}\r\n          expIconSFX={expIconSFX}\r\n          classNames={classes.expandableIcon(site, large)}\r\n        >\r\n          {\r\n            // \"siteNamesObject\" is an object in utilityObjects.js, and \"site\"s\r\n            // are its keys. Each of those keys have \"divContent\" as a function\r\n            // that returns JSX to render as children of <ExpandableIcon />\r\n            siteNamesObject[site].divContent(handleToastClick)\r\n          }\r\n        </ExpandableIcon>\r\n      ))\r\n    },\r\n    [expIconSFX.isOn, handleToastClick]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Toast\r\n        show={\r\n          toastState.isActive &&\r\n          toastState.type === uiConfigs.togglers.toast.creditSites\r\n        }\r\n        toggler={handleToggleToast}\r\n        inactiveTimeout={uiConfigs.timeouts.toast.inactiveCreditsOptions}\r\n        refreshTimeoutOn={toastState.refreshTimeoutToggler}\r\n      >\r\n        {/* children of <Toast /> are links to the assign toastState.url of\r\n        whatever JSX rendered it */}\r\n        <a\r\n          href={toastState.url}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className={styles.ToastBody}\r\n        >\r\n          Click to open\r\n          <span className={styles.ToastHref}>{toastState.text}</span>\r\n          in a new tab.\r\n        </a>\r\n      </Toast>\r\n      {\r\n        // each credit screen will have its own <SecondaryScreen /> triggered\r\n        // by its own toggler\r\n        creditsScreens.map(\r\n          (ss, i) =>\r\n            secondScreenType === ss[1].toggler &&\r\n            secondScreenState && (\r\n              <SecondaryScreen\r\n                key={i}\r\n                toggle={toggleSecondScreen}\r\n                scrollable\r\n                animation=\"fade\"\r\n                sfxObj={modalSFX}\r\n                onClose={handleToggleToast}\r\n              >\r\n                {/* that <SecondaryScreen /> consist of a <SelectionMenuScreen /> */}\r\n                <SelectionMenuScreen\r\n                  items={ss[1].items}\r\n                  playSFXs={playSFXs}\r\n                  classNames={{\r\n                    content:\r\n                      ss[1].toggler === contactToggler ||\r\n                      ss[1].toggler === acknowledgementsToggler\r\n                        ? [styles.ContactContent]\r\n                        : []\r\n                  }}\r\n                />\r\n                {/* and <ExpandableIcons /> or trailing <div>s depending on the\r\n              toggler active at the time */}\r\n                {ss[1].toggler === contactToggler &&\r\n                  getExpandableIconsArray(socialMediaIcons, socialMediaSites)}\r\n                {ss[1].toggler === databaseToggler && (\r\n                  <div className={styles.CardAndPricesSites}>\r\n                    {cardAndPricesSites.map((site, i) => (\r\n                      <span\r\n                        key={i}\r\n                        data-url={site.href}\r\n                        data-text={site.name}\r\n                        onClick={handleToastClick}\r\n                        className={styles.CardSite}\r\n                      >\r\n                        {site.name}\r\n                      </span>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n                {ss[1].toggler === acknowledgementsToggler &&\r\n                  getExpandableIconsArray(\r\n                    acknowledgmentsIcons,\r\n                    acknowledgmentsSites,\r\n                    true\r\n                  )}\r\n              </SecondaryScreen>\r\n            )\r\n        )\r\n      }\r\n      {expIconAudioJSX}\r\n    </>\r\n  )\r\n}\r\n\r\nSecondaryScreens.propTypes = {\r\n  creditsScreens: PropTypes.arrayOf(PropTypes.array.isRequired).isRequired,\r\n  secondScreenState: PropTypes.bool.isRequired,\r\n  secondScreenType: PropTypes.string.isRequired,\r\n  toggleSecondScreen: PropTypes.func.isRequired,\r\n  toastState: PropTypes.object.isRequired,\r\n  dispatchToastAction: PropTypes.func.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired,\r\n  modalSFX: PropTypes.object.isRequired\r\n}\r\n","import React, { memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styles from \"./Card.module.css\"\r\n\r\nfunction Card({\r\n  children,\r\n  type = \"primary\", // <string> \"primary\", \"secondary\" or \"danger\"\r\n  role, // <string> ARIA role\r\n  onClick = () => {}, // <function> on click callback\r\n  style, // <object> CSS inline styles\r\n  classNames = []\r\n}) {\r\n  // classNames arrays\r\n  const classes = [styles.Container]\r\n  // push classes coming from props to their respective arrays\r\n  classNames.forEach((c) => classes.push(c))\r\n\r\n  // before pushing \"type\" to classes array, check if it already exists\r\n  // in it. If it does not, then push it. This is a failsafe if a className\r\n  // with the same name as \"type\" is passed as prop via \"classNames\"\r\n  const duplicateClassIndex = classes.indexOf(type)\r\n  if (duplicateClassIndex === -1) {\r\n    classes.push(styles[type[0].toUpperCase() + type.slice(1)])\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={style}\r\n      className={classes.join(\" \")}\r\n      onClick={onClick}\r\n      role={role}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nCard.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  type: PropTypes.string,\r\n  role: PropTypes.string,\r\n  style: PropTypes.object,\r\n  onClick: PropTypes.func,\r\n  classNames: PropTypes.array\r\n}\r\n\r\nexport default memo(Card)\r\n","import { useState, useCallback } from \"react\"\r\nimport Validator, { InputValidator } from \"../utils/validators\"\r\n\r\nexport default function usePlayerConfigInputHandler(\r\n  playerConfigLSTargetObj,\r\n  initialConfigsFallbackObj,\r\n  callbackToUpdateLocalStorage,\r\n  soundEffects = {}\r\n) {\r\n  // is there a key for the targetted player config inside LS object? If so,\r\n  // use it. Otherwise, grab it from uiConfigs defaults (fallbackObj)\r\n  const playerConfigObject =\r\n    !!playerConfigLSTargetObj && !!Object.keys(playerConfigLSTargetObj).length\r\n      ? playerConfigLSTargetObj\r\n      : initialConfigsFallbackObj\r\n  // LS parses string values, we need integers. Parse them.\r\n  const playerConfigEntries = Object.entries(playerConfigObject).reduce(\r\n    (acc, current) => {\r\n      return { ...acc, [current[0]]: Number.parseInt(current[1]) }\r\n    },\r\n    {}\r\n  )\r\n  // create state for both player config values and fallback values, which will\r\n  // reset the inputs to their previous state if an invalid value is passed.\r\n  // Invalid values are 0 or an empty string.\r\n  const [configState, setConfigState] = useState(playerConfigEntries)\r\n  const [fallbackValues, setFallBackValues] = useState(playerConfigEntries)\r\n\r\n  const updateLSWithPlayerConfigs = useCallback(\r\n    (\r\n      { target: { name, value } },\r\n      localStorageKeyToUpdate,\r\n      nestedKeyIfAny = null,\r\n      rules = {}\r\n    ) => {\r\n      // on an empty string or a 0 as input value, use the fallback value\r\n      const convertedValue =\r\n        !value || Number.parseInt(value) === 0\r\n          ? fallbackValues[name]\r\n          : Number.parseInt(value)\r\n      // are there any additional rules that inputs should follow?\r\n      if (Object.keys(rules).length) {\r\n        // do we have to reverse values? (e.g.: on dice min and max, if the input\r\n        // supplied for the minimum value surpasses the currently set maximum)\r\n        if (rules.reverseInputs) {\r\n          // apply the rule that reverses them\r\n          const updatedInputStates = new InputValidator(\r\n            rules.inputRefOne,\r\n            rules.inputRefTwo\r\n          ).reverseInputs(name, convertedValue, configState)\r\n          // values for both inputs changed, so update their states and fallback values\r\n          setConfigState({\r\n            ...configState,\r\n            ...updatedInputStates\r\n          })\r\n          setFallBackValues({\r\n            ...fallbackValues,\r\n            ...updatedInputStates\r\n          })\r\n          // now, we will update LocalStorage only if these updated input states and\r\n          // previous fallback values are different from each other. Otherwise, there\r\n          // is no need to do so. Keep in mind new fallback values being updated\r\n          // above are in batch, not yet updated. So we are effectively working with\r\n          // the previous ones here\r\n          if (\r\n            !new Validator(\r\n              updatedInputStates,\r\n              fallbackValues\r\n            ).objectsAreShallowlyEqual()\r\n          ) {\r\n            soundEffects.ok.play()\r\n            callbackToUpdateLocalStorage({\r\n              key: localStorageKeyToUpdate,\r\n              nestedKey: nestedKeyIfAny,\r\n              value: { ...configState, ...updatedInputStates },\r\n              overrideValue: true\r\n            })\r\n          } else {\r\n            soundEffects.cancel.play()\r\n          }\r\n        }\r\n        // we finished updating state and LS for input fields with rules\r\n        return\r\n      }\r\n      // there are no additionaly rules to follow and values are correctly converted\r\n      // for the current input, so update its state and sync its fallback value\r\n      setConfigState({\r\n        ...configState,\r\n        [name]: convertedValue\r\n      })\r\n      setFallBackValues({ ...fallbackValues, [name]: convertedValue })\r\n      // it might happen that the updated value matches the current fallback (e.g.:\r\n      // the user typed a value equal to the previous one). No need to update LS.\r\n      // Note: at this exact time, neither setConfigState nor setFallBackValues\r\n      // resolved as they are queued, so fallbackValues are still the same to compare.\r\n      // However, if triggered, callbackToUpdateLocalStorage will be enqueued after them,\r\n      // resolving in a successful order thus updating LS correctly.\r\n      if (convertedValue !== fallbackValues[name]) {\r\n        soundEffects.ok.play()\r\n        callbackToUpdateLocalStorage({\r\n          key: localStorageKeyToUpdate,\r\n          nestedKey: nestedKeyIfAny,\r\n          value: configState,\r\n          overrideValue: true\r\n        })\r\n      } else {\r\n        soundEffects.cancel.play()\r\n      }\r\n    },\r\n    [configState, fallbackValues, callbackToUpdateLocalStorage, soundEffects]\r\n  )\r\n\r\n  const handleInputChange = useCallback(\r\n    ({ target: { name, value } }, highestAllowedInputLength) => {\r\n      const inputValidator = new InputValidator(value)\r\n      // only integers allowed, and no more than highestAllowedInputLength digits\r\n      if (\r\n        inputValidator.lengthIsHigherThan(highestAllowedInputLength) ||\r\n        !inputValidator.stringOnlyHasIntegers()\r\n      ) {\r\n        return\r\n      }\r\n\r\n      // localStorage works with integers, input returns string. Parse it.\r\n      const convertedValue = Number.parseInt(value)\r\n\r\n      // if we try to convert and empty string, we get NaN, but we still need to\r\n      // show an empty string for the user while typing, that's why we keep it to\r\n      // convert it at validation. Otherwise, we convert it here.\r\n      setConfigState({\r\n        ...configState,\r\n        [name]: isNaN(convertedValue) ? \"\" : convertedValue\r\n      })\r\n    },\r\n    [configState]\r\n  )\r\n\r\n  // with a form submission, we handle not only manual user blurs, but\r\n  // also when they hit \"ENTER\" or \"RETURN\" while on an input.\r\n  const handleSubmit = useCallback((e, inputReference) => {\r\n    e.preventDefault()\r\n    inputReference.current.blur()\r\n  }, [])\r\n\r\n  return {\r\n    configState,\r\n    handleInputChange,\r\n    handleSubmit,\r\n    updateLSWithPlayerConfigs\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styles from \"./UICardContainer.module.css\"\r\n\r\nexport default function UICardContainer({ children }) {\r\n  return <div className={styles.Container}>{children}</div>\r\n}\r\n\r\nUICardContainer.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styles from \"./OptionTitle.module.css\"\r\n\r\nexport default function OptionTitle({ children }) {\r\n  return <div className={styles.Container}> {children} </div>\r\n}\r\n\r\nOptionTitle.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n}\r\n","import styles from \"./OptionBody.module.css\"\r\n\r\nexport const classes = {\r\n  container: (propsClassNames) =>\r\n    [styles.Container, propsClassNames?.join(\" \")].join(\" \")\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { classes } from \"./OptionBody.utils\"\r\n\r\nexport default function OptionBody({ children, classNames = [] }) {\r\n  return <div className={classes.container(classNames)}>{children}</div>\r\n}\r\n\r\nOptionBody.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  classNames: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n","import styles from \"./LifePoints.module.css\"\r\n\r\nexport const classes = {\r\n  lifePointsInput: {\r\n    container: [styles.LifePointsContainer],\r\n    input: [styles.LifePointsInput]\r\n  }\r\n}\r\n","import React, { useRef, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport usePlayerConfigInputHandler from \"../../../hooks/usePlayerConfigInputHandler\"\r\nimport UICardContainer from \"../../../wrappers/UICardContainer/UICardContainer\"\r\nimport OptionTitle from \"../../../wrappers/OptionTitle/OptionTitle\"\r\nimport OptionBody from \"../../../wrappers/OptionBody/OptionBody\"\r\nimport InputWithSubmit from \"../../UI/InputWithSubmit/InputWithSubmit\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport { classes } from \"./LifePoints.utils\"\r\nimport styles from \"./LifePoints.module.css\"\r\n\r\nfunction LifePoints({\r\n  updateLSandGetLSasJSObj, // <fucntion> LocalStorageContext's function to update LS\r\n  getLSasJSObject, // <function> LocalStorageContext's function to retrieve LS\r\n  soundEffects // <object> sound effect object with audio objects, one for \"OK\", one for \"cancel\"\r\n}) {\r\n  // grab player configurations from \"Configs\" local storage key\r\n  const { playerConfigs } = getLSasJSObject()\r\n  // initialize the hook that controls player names' or dice limits' <InputWithSubmit />\r\n  const {\r\n    configState,\r\n    handleInputChange,\r\n    handleSubmit,\r\n    updateLSWithPlayerConfigs\r\n  } = usePlayerConfigInputHandler(\r\n    playerConfigs.initialLifePoints,\r\n    uiConfigs.initialLP,\r\n    updateLSandGetLSasJSObj,\r\n    soundEffects\r\n  )\r\n  // input references to force blurring when users hit \"ENTER\" or \"RETURN\"\r\n  const p1InputRef = useRef()\r\n  const p2InputRef = useRef()\r\n  // we cannot useCallback here, we need the function to be reconstructed\r\n  // for the custom hook to recieve new values each time\r\n  function updateLS(e) {\r\n    updateLSWithPlayerConfigs(\r\n      e,\r\n      uiConfigs.localStorageConfigsObjectKeys.playerConfigs,\r\n      \"initialLifePoints\"\r\n    )\r\n  }\r\n  // same here. Max limit is normally 5 digits for simplicity sake\r\n  function handleChangeInput(e) {\r\n    handleInputChange(e, uiConfigs.optionsConfigs.lifePointsCharLimit)\r\n  }\r\n\r\n  return (\r\n    <UICardContainer>\r\n      <OptionTitle> Initial Life Points </OptionTitle>\r\n      <OptionBody>\r\n        <span className={styles.PlayerTag}> Player 1 </span>\r\n        <InputWithSubmit\r\n          type=\"tel\"\r\n          name=\"p1\"\r\n          ariaLabel={\"Player one starting lifepoints input\"}\r\n          value={configState.p1}\r\n          reference={p1InputRef}\r\n          autoComplete=\"off\"\r\n          preventDefault\r\n          onChange={handleChangeInput}\r\n          onBlur={updateLS}\r\n          onSubmit={(e) => handleSubmit(e, p1InputRef)}\r\n          classNames={classes.lifePointsInput}\r\n        />\r\n        <span className={styles.PlayerTag}> Player 2 </span>\r\n        <InputWithSubmit\r\n          type=\"tel\"\r\n          name=\"p2\"\r\n          ariaLabel={\"Player two starting lifepoints input\"}\r\n          value={configState.p2}\r\n          reference={p2InputRef}\r\n          autoComplete=\"off\"\r\n          preventDefault\r\n          onChange={handleChangeInput}\r\n          onBlur={updateLS}\r\n          onSubmit={(e) => handleSubmit(e, p2InputRef)}\r\n          classNames={classes.lifePointsInput}\r\n        />\r\n      </OptionBody>\r\n    </UICardContainer>\r\n  )\r\n}\r\n\r\nLifePoints.propTypes = {\r\n  updateLSandGetLSasJSObj: PropTypes.func.isRequired,\r\n  getLSasJSObject: PropTypes.func.isRequired,\r\n  soundEffects: PropTypes.shape({\r\n    ok: PropTypes.object.isRequired,\r\n    cancel: PropTypes.object.isRequired\r\n  }).isRequired\r\n}\r\n\r\nexport default memo(LifePoints)\r\n","import React from \"react\"\r\nimport styles from \"./OptionSwitchesCategory.module.css\"\r\n\r\nexport default function OptionSwitchesCategory({ children, width }) {\r\n  return (\r\n    <div className={styles.Container} style={{ width: `${width || 100}%` }}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport SVGImage from \"../../UI/SVGImage/SVGImage\"\r\nimport heart from \"../../../assets/uiIcons/heart.svg\"\r\nimport clock from \"../../../assets/uiIcons/clock.svg\"\r\nimport die from \"../../../assets/uiIcons/die.svg\"\r\nimport coin from \"../../../assets/uiIcons/coin.svg\"\r\nimport styles from \"./LogSwitches.module.css\"\r\n\r\nconst classes = {\r\n  lifepoints: (logState) => [\r\n    styles.LifePointsSVG,\r\n    logState ? styles.Active : \"\"\r\n  ],\r\n  dice: (logState) => [styles.DiceSVG, logState ? styles.Active : \"\"],\r\n  coins: (logState) => [styles.CoinSVG, logState ? styles.CoinActive : \"\"],\r\n  timer: (logState) => [styles.TimerSVG, logState ? styles.Active : \"\"]\r\n}\r\n\r\nexport function getSVGImgJSX(\r\n  type,\r\n  logState,\r\n  onClickCallback,\r\n  logActionDispatcher,\r\n  setLPSwitch\r\n) {\r\n  return (\r\n    <SVGImage\r\n      src={getSVGImgSrc(type)}\r\n      alt={`${type} log ${logState ? \"ON\" : \"OFF\"}`}\r\n      type={`${logState ? \"primary\" : \"disabled\"}`}\r\n      role=\"button\"\r\n      ariaPressed={logState}\r\n      classNames={classes[type](logState)}\r\n      onClick={() =>\r\n        onClickCallback(type.toUpperCase(), logActionDispatcher, setLPSwitch)\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nfunction getSVGImgSrc(type) {\r\n  switch (type) {\r\n    case \"lifepoints\":\r\n      return heart\r\n    case \"dice\":\r\n      return die\r\n    case \"coins\":\r\n      return coin\r\n    case \"timer\":\r\n      return clock\r\n    default:\r\n      return null\r\n  }\r\n}\r\n","import React, { useContext, useEffect, useCallback, useRef, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\"\r\nimport { LPContext } from \"../../../contexts/LPContext\"\r\nimport { CoinDieTokenContext } from \"../../../contexts/CoinDieTokenContext\"\r\nimport { TimerContext } from \"../../../contexts/TimerContext\"\r\nimport * as logActionCreators from \"../../../store/Log/logActionCreators\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport Toast from \"../../UI/Toast/Toast\"\r\nimport OptionSwitchesCategory from \"../../../wrappers/OptionSwitchesCategory/OptionSwitchesCategory\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport { getSVGImgJSX } from \"./LogSwitches.utils\"\r\nimport styles from \"./LogSwitches.module.css\"\r\n\r\nfunction LogSwitches({\r\n  width, // <number> width to assign OptionSwitchesCategory\r\n  switchSFX, // <object> useAudioControls() object for switch toggle\r\n  toastState, // <object> toast state in UIContext\r\n  dispatchToastAction // <function> toast action dispatcher function\r\n}) {\r\n  // since we are controlling log switching state for lifepoints, dice, coin\r\n  // and timer in this component, we need states and functions from their contexts\r\n  const { lpLog, setSwitch, dispatchLogAction } = useContext(LPContext)\r\n  const { diceLogReducer, coinLogReducer } = useContext(CoinDieTokenContext)\r\n  const { log, logDispatch } = useContext(TimerContext)\r\n  const [diceLog, dispatchDiceLogAction] = diceLogReducer\r\n  const [coinLog, dispatchCoinLogAction] = coinLogReducer\r\n  // isMounting will prevent sfx from playing at mount phase\r\n  const isMounting = useRef(true)\r\n\r\n  const handleDispatchToggleLogAction = useCallback(\r\n    (logString, logActionDispatcher, setLPSwitch) => {\r\n      // toggle the target log reducer state, and activate <Toast /> adding or\r\n      // removing the log type string to its reducer state. If we are logging\r\n      // \"lifepoints\", \"setLPSwitch\" will be defined as \"setSwitch\" callback\r\n      // from LPReducer, whici toggles the Calculator's UI <Switch /> on/off\r\n      logActionDispatcher(logActionCreators.toggle())\r\n      dispatchToastAction(\r\n        toastActionCreators.setLogType(logString.toUpperCase())\r\n      )\r\n      setLPSwitch && setLPSwitch((lpSwitchState) => !lpSwitchState)\r\n    },\r\n    [dispatchToastAction]\r\n  )\r\n\r\n  const handleToggleToast = useCallback(() => {\r\n    dispatchToastAction(toastActionCreators.closeToast())\r\n  }, [dispatchToastAction])\r\n\r\n  useEffect(() => {\r\n    // do nothing on mount\r\n    if (isMounting.current) isMounting.current = false\r\n    // at any other instance, if a log state toggles ON/OFF, play the SFX\r\n    else switchSFX.play()\r\n  }, [diceLog.logState, lpLog.logState, coinLog.logState, log.logState])\r\n\r\n  return (\r\n    <>\r\n      <Toast\r\n        show={\r\n          toastState.isActive &&\r\n          toastState.type === uiConfigs.togglers.toast.logSwitches\r\n        }\r\n        toggler={handleToggleToast}\r\n        inactiveTimeout={uiConfigs.timeouts.toast.inactiveConfigsSwitches}\r\n        refreshTimeoutOn={toastState.refreshTimeoutToggler}\r\n      >\r\n        <div className={styles.ToastText}>\r\n          {toastState.text} <br />\r\n          <TransitionGroup component={null}>\r\n            {toastState.logTypeArray.map((log) => (\r\n              <CSSTransition\r\n                key={log}\r\n                component={null}\r\n                timeout={500}\r\n                classNames=\"log-type-in-out\"\r\n              >\r\n                <span className={styles.ToastLogItems}> {log} </span>\r\n              </CSSTransition>\r\n            ))}\r\n          </TransitionGroup>\r\n        </div>\r\n      </Toast>\r\n      <OptionSwitchesCategory width={width}>\r\n        <div className={styles.Title}> Logs </div>\r\n        {getSVGImgJSX(\r\n          \"lifepoints\",\r\n          lpLog.logState,\r\n          handleDispatchToggleLogAction,\r\n          dispatchLogAction,\r\n          setSwitch\r\n        )}\r\n        {getSVGImgJSX(\r\n          \"dice\",\r\n          diceLog.logState,\r\n          handleDispatchToggleLogAction,\r\n          dispatchDiceLogAction\r\n        )}\r\n        {getSVGImgJSX(\r\n          \"coins\",\r\n          coinLog.logState,\r\n          handleDispatchToggleLogAction,\r\n          dispatchCoinLogAction\r\n        )}\r\n        {getSVGImgJSX(\r\n          \"timer\",\r\n          log.logState,\r\n          handleDispatchToggleLogAction,\r\n          logDispatch\r\n        )}\r\n      </OptionSwitchesCategory>\r\n    </>\r\n  )\r\n}\r\n\r\nLogSwitches.propTypes = {\r\n  width: PropTypes.number,\r\n  switchSFX: PropTypes.object.isRequired,\r\n  toastState: PropTypes.object.isRequired,\r\n  dispatchToastAction: PropTypes.func.isRequired\r\n}\r\n\r\nexport default memo(LogSwitches)\r\n","import styles from \"./SFXSwitch.module.css\"\r\n\r\nexport const classes = {\r\n  text: (playSFXs) =>\r\n    [styles.ToastText, playSFXs ? \"\" : styles.ToastTextInactive].join(\" \"),\r\n  svgImage: (playSFXs) => [styles.SfxSVG, playSFXs ? styles.Active : \"\"]\r\n}\r\n","import React, { memo, useEffect, useCallback, useRef } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { CSSTransition } from \"react-transition-group\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport Toast from \"../../UI/Toast/Toast\"\r\nimport OptionSwitchesCategory from \"../../../wrappers/OptionSwitchesCategory/OptionSwitchesCategory\"\r\nimport SVGImage from \"../../UI/SVGImage/SVGImage\"\r\nimport musicNote from \"../../../assets/uiIcons/musicNote.svg\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport { classes } from \"./SFXSwitch.utils\"\r\nimport styles from \"./SFXSwitch.module.css\"\r\n\r\nfunction SFXSwitch({\r\n  width, // <number> OptionSwitchesCategory's width\r\n  switchSFX, // <object> useAudioControls object for switch toggle\r\n  playSFXs, // <boolean> global ON/OFF boolean switch for audios\r\n  togglePlaySFXs, // <function> global ON/OFF toggler function for sound effects\r\n  toastState, // <object> <Toast /> reducer state in UIContext\r\n  dispatchToastAction // <function> <Toast /> action dispatcher\r\n}) {\r\n  // isMounting ref will prevent <Toast /> sfx to play at mount phase\r\n  const isMounting = useRef(true)\r\n\r\n  const handleToggleSFXs = useCallback(() => {\r\n    // the toast triggered for universal sound effect state here will have\r\n    // a different format than the one on log switches, that's why we keep\r\n    // its logic separated. This dispatch is used to clear toast state and\r\n    // trigger the toast with nothing on it but {children} assigned in JSX\r\n    dispatchToastAction(\r\n      toastActionCreators.setToastState(\r\n        \"\",\r\n        null,\r\n        uiConfigs.togglers.toast.sfxSwitch\r\n      )\r\n    )\r\n    togglePlaySFXs()\r\n  }, [dispatchToastAction, togglePlaySFXs])\r\n\r\n  const handleToggleToast = useCallback(() => {\r\n    // close <Toast /> action dispatcher to assign to \"Dismiss\" (\"X\")\r\n    dispatchToastAction(toastActionCreators.closeToast())\r\n  }, [dispatchToastAction])\r\n\r\n  useEffect(() => {\r\n    // do nothing at mount phase\r\n    if (isMounting.current) isMounting.current = false\r\n    // any other case, when master ON/OFF switch toggles, play the SFX only\r\n    // if it is ON. We have to force play it since when state changes to\r\n    // isOn = true, it will be queued, and thus too late for playSFX's listener\r\n    // to catch it, missing the chance to play it on time.\r\n    else if (!switchSFX.isOn) switchSFX.forcePlay()\r\n  }, [playSFXs])\r\n\r\n  return (\r\n    <>\r\n      <Toast\r\n        show={\r\n          toastState.isActive &&\r\n          toastState.type === uiConfigs.togglers.toast.sfxSwitch\r\n        }\r\n        toggler={handleToggleToast}\r\n        inactiveTimeout={uiConfigs.timeouts.toast.inactiveConfigsSwitches}\r\n        refreshTimeoutOn={toastState.refreshTimeoutToggler}\r\n      >\r\n        <CSSTransition\r\n          in={playSFXs}\r\n          component={null}\r\n          timeout={300}\r\n          classNames=\"sfx-in-out\"\r\n        >\r\n          <span className={classes.text(playSFXs)}>\r\n            Sound Effects {playSFXs ? \"ON\" : \"OFF\"}\r\n          </span>\r\n        </CSSTransition>\r\n      </Toast>\r\n      <OptionSwitchesCategory width={width}>\r\n        <div className={styles.Title}> SFX </div>\r\n        <SVGImage\r\n          src={musicNote}\r\n          alt={`Sound effects ${playSFXs ? \"ON\" : \"OFF\"}`}\r\n          type={`${playSFXs ? \"primary\" : \"disabled\"}`}\r\n          role=\"button\"\r\n          ariaPressed={playSFXs}\r\n          classNames={classes.svgImage(playSFXs)}\r\n          onClick={handleToggleSFXs}\r\n        />\r\n      </OptionSwitchesCategory>\r\n    </>\r\n  )\r\n}\r\n\r\nSFXSwitch.propTypes = {\r\n  width: PropTypes.number,\r\n  switchSFX: PropTypes.object.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired,\r\n  togglePlaySFXs: PropTypes.func.isRequired,\r\n  toastState: PropTypes.object.isRequired,\r\n  dispatchToastAction: PropTypes.func.isRequired\r\n}\r\n\r\nexport default memo(SFXSwitch)\r\n","import React, { useContext, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { MediaQuery } from \"../../../contexts/MediaQueryContext\"\r\nimport { UIContext } from \"../../../contexts/UIContext\"\r\nimport useAudio from \"../../../hooks/useAudio\"\r\nimport UICardContainer from \"../../../wrappers/UICardContainer/UICardContainer\"\r\nimport OptionTitle from \"../../../wrappers/OptionTitle/OptionTitle\"\r\nimport OptionBody from \"../../../wrappers/OptionBody/OptionBody\"\r\nimport LogSwitches from \"../LogSwitches/LogSwitches\"\r\nimport SFXSwitch from \"../SFXSwitch/SFXSwitch\"\r\nimport switchmp3 from \"../../../assets/audios/switch.mp3\"\r\n// import styles from \"./Switches.module.css\"\r\n\r\nfunction Switches({ playSFXs, togglePlaySFXs }) {\r\n  // switches will fire <Toast />s when toggling, so bring reducer state\r\n  // and action dispatcher for them, from UIContext\r\n  const { toastState, dispatchToastAction } = useContext(UIContext)\r\n  // also, SFX switch's \"width\" prop adapts to media query, so we use that\r\n  // state from context too\r\n  const { mq } = useContext(MediaQuery)\r\n  // audio JSX and controls object for log and SFX toggle SFX\r\n  const [switchAudioJSX, switchSFX] = useAudio(switchmp3, {\r\n    toggleOn: playSFXs\r\n  })\r\n\r\n  return (\r\n    <UICardContainer>\r\n      <OptionTitle> Log/SFX switches </OptionTitle>\r\n      <OptionBody>\r\n        <LogSwitches\r\n          width={70}\r\n          switchSFX={switchSFX}\r\n          toastState={toastState}\r\n          dispatchToastAction={dispatchToastAction}\r\n        />\r\n        <SFXSwitch\r\n          width={mq.portrait ? 30 : 20}\r\n          switchSFX={switchSFX}\r\n          playSFXs={playSFXs}\r\n          togglePlaySFXs={togglePlaySFXs}\r\n          toastState={toastState}\r\n          dispatchToastAction={dispatchToastAction}\r\n        />\r\n      </OptionBody>\r\n      {switchAudioJSX}\r\n    </UICardContainer>\r\n  )\r\n}\r\n\r\nSwitches.propTypes = {\r\n  playSFXs: PropTypes.bool.isRequired,\r\n  togglePlaySFXs: PropTypes.func.isRequired\r\n}\r\n\r\nexport default memo(Switches)\r\n","import styles from \"./DiceLimits.module.css\"\r\n\r\nexport const classes = {\r\n  diceInput: {\r\n    input: [styles.DiceInput]\r\n  },\r\n  die: [styles.Die]\r\n}\r\n","import React, { useRef, useReducer, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport useAudio from \"../../../hooks/useAudio\"\r\nimport usePlayerConfigInputHandler from \"../../../hooks/usePlayerConfigInputHandler\"\r\nimport coinDieTokenReducer from \"../../../store/CoinDieToken/coinDieTokenReducer\"\r\nimport UICardContainer from \"../../../wrappers/UICardContainer/UICardContainer\"\r\nimport OptionTitle from \"../../../wrappers/OptionTitle/OptionTitle\"\r\nimport OptionBody from \"../../../wrappers/OptionBody/OptionBody\"\r\nimport InputWithSubmit from \"../../UI/InputWithSubmit/InputWithSubmit\"\r\nimport Die from \"../../LifePointsCounter/Die/Die\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport dicemp3 from \"../../../assets/audios/dice.mp3\"\r\nimport { classes } from \"./DiceLimits.utils\"\r\nimport styles from \"./DiceLimits.module.css\"\r\n\r\nfunction DiceLimits({\r\n  updateLSandGetLSasJSObj, // <function> LocalStorageContext's function to update LS\r\n  getLSasJSObject, // <function> LocalStorageContext's function to retrieve LS\r\n  soundEffects, // <object> sound effect object with audio objects, one for \"OK\", one for \"cancel\"\r\n  playSFXs // <boolean> global ON/OFF state for audios\r\n}) {\r\n  // grab player configurations from \"Configs\" local storage key\r\n  const { playerConfigs } = getLSasJSObject()\r\n  // initialize the hook that controls player names' or dice limits' <InputWithSubmit />\r\n  const {\r\n    configState,\r\n    handleInputChange,\r\n    handleSubmit,\r\n    updateLSWithPlayerConfigs\r\n  } = usePlayerConfigInputHandler(\r\n    playerConfigs.diceConfig,\r\n    uiConfigs.diceConfig,\r\n    updateLSandGetLSasJSObj,\r\n    soundEffects\r\n  )\r\n  // handleSubmit() in usePlayerConfigInputHandler() needs references to the\r\n  // affected inputs in order to perform before-submission actions on them\r\n  // (in this case, if values need to be exchanged between inputs)\r\n  const minRollInputRef = useRef()\r\n  const maxRollInputRef = useRef()\r\n  // create a reducer for testing dice here. Since their logic is not\r\n  // important enough to be kept through components\r\n  const [diceState, diceDispatch] = useReducer(coinDieTokenReducer, {\r\n    items: [\r\n      { id: uuidv4(), res: [] },\r\n      { id: uuidv4(), res: [] },\r\n      { id: uuidv4(), res: [] }\r\n    ]\r\n  })\r\n  // audio JSX and controls object for dice roll SFX\r\n  const [diceAudioJSX, diceSFX] = useAudio(dicemp3, {\r\n    toggleOn: playSFXs,\r\n    playbackRate: 0.7\r\n  })\r\n\r\n  function updateLS(e) {\r\n    // perform usePlayerConfigInputHandler's updateLSWithPlayerConfigs using\r\n    // diceConfig's key in localstorage's PlayerConfigs. Pass the input\r\n    // references since it is probable we might exchange their values.\r\n    updateLSWithPlayerConfigs(\r\n      e,\r\n      uiConfigs.localStorageConfigsObjectKeys.playerConfigs,\r\n      \"diceConfig\",\r\n      {\r\n        reverseInputs: true,\r\n        inputRefOne: minRollInputRef,\r\n        inputRefTwo: maxRollInputRef\r\n      }\r\n    )\r\n  }\r\n\r\n  function handleChangeInput(e) {\r\n    // perform usePlayerConfigInputHandler's handleChangeInput with\r\n    // a max of 2 characters per input as a rule\r\n    handleInputChange(e, 2)\r\n  }\r\n\r\n  return (\r\n    <UICardContainer>\r\n      <OptionTitle> Dice roll range </OptionTitle>\r\n      <OptionBody>\r\n        <span className={styles.LimitAndTestTag}> Min </span>\r\n        <InputWithSubmit\r\n          type=\"tel\"\r\n          name=\"minRoll\"\r\n          ariaLabel=\"Minimum roll input\"\r\n          value={configState.minRoll}\r\n          reference={minRollInputRef}\r\n          autoComplete=\"off\"\r\n          preventDefault\r\n          onChange={handleChangeInput}\r\n          onBlur={updateLS}\r\n          onSubmit={(e) => handleSubmit(e, minRollInputRef)}\r\n          classNames={classes.diceInput}\r\n        />\r\n        <span className={styles.LimitAndTestTag}> Max </span>\r\n        <InputWithSubmit\r\n          type=\"tel\"\r\n          name=\"maxRoll\"\r\n          ariaLabel=\"Maximum roll input\"\r\n          value={configState.maxRoll}\r\n          reference={maxRollInputRef}\r\n          autoComplete=\"off\"\r\n          preventDefault\r\n          onChange={handleChangeInput}\r\n          onBlur={updateLS}\r\n          onSubmit={(e) => handleSubmit(e, maxRollInputRef)}\r\n          classNames={classes.diceInput}\r\n        />\r\n        <span className={styles.LimitAndTestTag}> Test </span>\r\n        {diceState.items.map((item) => (\r\n          <Die\r\n            key={item.id}\r\n            item={item}\r\n            playerConfigs={playerConfigs}\r\n            diceDispatch={diceDispatch}\r\n            diceSFX={diceSFX}\r\n            classNames={classes.die}\r\n          />\r\n        ))}\r\n        {diceAudioJSX}\r\n      </OptionBody>\r\n    </UICardContainer>\r\n  )\r\n}\r\n\r\nDiceLimits.propTypes = {\r\n  updateLSandGetLSasJSObj: PropTypes.func.isRequired,\r\n  getLSasJSObject: PropTypes.func.isRequired,\r\n  soundEffects: PropTypes.shape({\r\n    ok: PropTypes.object.isRequired,\r\n    cancel: PropTypes.object.isRequired\r\n  }).isRequired,\r\n  playSFXs: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default memo(DiceLimits)\r\n","export const classes = {\r\n  button: [\"width30\", \"bold\", \"italic\", \"inlineBlock\", \"letterSpacing015\"]\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { classes } from \"./DangerZoneSecondaryScreen.utils\"\r\nimport styles from \"./DangerZoneSecondaryScreen.module.css\"\r\n\r\nexport default function DangerZoneSecondaryScreen({\r\n  onProceed, // <function> callback to assign to \"Proceed\" <Button />\r\n  onCancel, // <function> callback to assign to \"Cancel\" <Button />\r\n  proceedDisabled, // <boolean> on true, \"Proceed\" <Button /> is disabled\r\n  children // <function> dangerZoneChildrenJSX's getter function in utilityObject.js\r\n}) {\r\n  return (\r\n    <div className={styles.Container}>\r\n      {children({ styles, classes, onProceed, onCancel, proceedDisabled })}\r\n    </div>\r\n  )\r\n}\r\n\r\nDangerZoneSecondaryScreen.propTypes = {\r\n  onProceed: PropTypes.func.isRequired,\r\n  onCancel: PropTypes.func.isRequired,\r\n  proceedDisabled: PropTypes.bool.isRequired,\r\n  children: PropTypes.func.isRequired\r\n}\r\n","import React from \"react\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport Button from \"../../UI/Button/Button\"\r\nimport tick from \"../../../assets/uiIcons/tick.svg\"\r\nimport cross from \"../../../assets/uiIcons/cross.svg\"\r\n\r\n/**\r\n * dangerZoneChildrenJSX's helper object with JSX getter functions. Just to dry code\r\n */\r\nconst dangerZoneChildrenInnerJSX = {\r\n  proceedButton: (classes, styles, onClick, disabled) => (\r\n    <Button\r\n      type={disabled ? \"disabled\" : \"primary\"}\r\n      disabled={disabled}\r\n      classNames={classes.button}\r\n      onClick={onClick}\r\n    >\r\n      Proceed\r\n      <img\r\n        className={disabled ? styles.TickImageDisabled : styles.TickImage}\r\n        src={tick}\r\n        alt=\"confirm\"\r\n      />\r\n    </Button>\r\n  ),\r\n  cancelButton: (classes, styles, onClick) => (\r\n    <Button type=\"secondary\" classNames={classes.button} onClick={onClick}>\r\n      Cancel\r\n      <img className={styles.CancelImage} src={cross} alt=\"cancel\" />\r\n    </Button>\r\n  )\r\n}\r\n\r\n/**\r\n * <DangerZoneSecondaryScreen />'s object with JSX getter functions\r\n */\r\nexport const dangerZoneChildrenJSX = {\r\n  getRefetchCardsJSX: ({\r\n    styles, // <object> styles object (created by importing css modules)\r\n    classes, // <object> classes object manually created inside the component\r\n    onProceed, // <function> onProceed's callback\r\n    onCancel, // <function> onCancel's callback\r\n    proceedDisabled // <boolean> on true, proceed button should disable\r\n  }) => (\r\n    <>\r\n      <div className={styles.Title}> Reload Deck Builder's card list</div>\r\n      <div className={styles.Content}>\r\n        You are attempting to re-fetch from YGORPODeck's database the card list\r\n        being used to create decks in Deck Builder (\"Decks\") section.\r\n      </div>\r\n      <div className={styles.Content}>\r\n        If you succeed, all cards in the database will be restored to the card\r\n        selection area of that section (it should work if you can read \"Cards\r\n        loaded!\" there). All card prices loaded from card \"info\" will be updated\r\n        too.\r\n      </div>\r\n      <div className={[styles.Content, styles.Center].join(\" \")}>\r\n        <span className={styles.Important}>Warning!</span>\r\n        <br />\r\n        <strong>Do not do this frequently.</strong>{\" \"}\r\n      </div>\r\n      <div className={styles.Content}>\r\n        If you abuse this feature,{\" \"}\r\n        <b>YGOPRODeck's servers can blacklist your IP address</b>, thus\r\n        preventing your device from accessing card data and restricting this\r\n        app's experience for you.{\" \"}\r\n      </div>\r\n      <div className={styles.Content}>\r\n        Cards should have loaded by default when you opened the app, so unless\r\n        you got an error and you need to refresh the card list, do not proceed.\r\n      </div>\r\n      <div className={styles.Content}>\r\n        If you do so, keep in mind that{\" \"}\r\n        <u>this operation requires you to be connected to internet</u>, and\r\n        could take some seconds (you are retrieving data of 10.000+ cards).\r\n        Also, once you restore the list,{\" \"}\r\n        <strong>\r\n          this option will be blocked for{\" \"}\r\n          {Number.parseInt(\r\n            uiConfigs.apiConfigs.cardRefetchBlockTimeout / 1000 / 60\r\n          )}{\" \"}\r\n          minutes\r\n        </strong>{\" \"}\r\n        as not to overload YGOPRODeck's servers.\r\n      </div>\r\n      <div className={styles.Buttons}>\r\n        {dangerZoneChildrenInnerJSX.proceedButton(\r\n          classes,\r\n          styles,\r\n          onProceed,\r\n          proceedDisabled\r\n        )}\r\n        {dangerZoneChildrenInnerJSX.cancelButton(classes, styles, onCancel)}\r\n      </div>\r\n    </>\r\n  ),\r\n  getResetAppJSX: ({\r\n    styles, // <object> styles object (created by importing css modules)\r\n    classes, // <object> classes object manually created inside the component\r\n    onProceed, // <function> onProceed's callback\r\n    onCancel, // <function> onCancel's callback\r\n    proceedDisabled // <boolean> on true, proceed button should disable\r\n  }) => (\r\n    <>\r\n      <div className={styles.Title}>Reset app</div>\r\n      <div className={styles.Content}>\r\n        By proceeding, all of these changes will apply:\r\n      </div>\r\n      <ul className={styles.List}>\r\n        <li>\r\n          Calculator will be reset (current life points are to be restored to\r\n          their default, as well as coin, dice, token and timer screens).\r\n        </li>\r\n        <li>Log history will be cleared.</li>\r\n        <li>\r\n          Deck builder section will be cleaned up (all decks there are to be\r\n          removed).\r\n        </li>\r\n        <li>\r\n          Customized initial life points, log/SFX switches and dice roll ranges\r\n          will be restored to default.\r\n        </li>\r\n      </ul>\r\n      <div className={[styles.Content, styles.Center].join(\" \")}>\r\n        <span className={styles.Important}>Warning!</span>\r\n        <br />\r\n        <strong>This action cannot be reverted.</strong>\r\n      </div>\r\n      <div className={styles.Content}>\r\n        Make sure this is what you want to do before continuing. Once you\r\n        commit, there is no way back.\r\n      </div>\r\n      <div className={styles.Buttons}>\r\n        {dangerZoneChildrenInnerJSX.proceedButton(\r\n          classes,\r\n          styles,\r\n          onProceed,\r\n          proceedDisabled\r\n        )}\r\n        {dangerZoneChildrenInnerJSX.cancelButton(classes, styles, onCancel)}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import React, { useContext, useCallback, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { UIContext } from \"../../../contexts/UIContext\"\r\nimport { DeckBuilderContext } from \"../../../contexts/DeckBuilderContext\"\r\nimport * as toastActionCreators from \"../../../store/Toast/toastActionCreators\"\r\nimport Toast from \"../../UI/Toast/Toast\"\r\nimport SecondaryScreen from \"../../UI/SecondaryScreen/SecondaryScreen\"\r\nimport DangerZoneSecondaryScreen from \"../../../wrappers/DangerZoneSecondaryScreen/DangerZoneSecondaryScreen\"\r\nimport { dangerZoneChildrenJSX } from \"./DangerZoneSecondaryScreens.utils\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport styles from \"./DangerZoneSecondaryScreens.module.css\"\r\n\r\nfunction DangerZoneSecondaryScreens({ modalSFX }) {\r\n  // bring everything required to manipulate UI from UIContext\r\n  const {\r\n    toastState,\r\n    dispatchToastAction,\r\n    secondScreenState,\r\n    secondScreenType,\r\n    toggleSecondScreen,\r\n    appIsLoadingSomething,\r\n    setAppIsLoadingSomething,\r\n    setScreenIsFrozen\r\n  } = useContext(UIContext)\r\n  // and card fetch objects and function to handle database re-fetching\r\n  const { fetchCardList, cardFetchLastDate, setFetchCardsNewDate } = useContext(\r\n    DeckBuilderContext\r\n  )\r\n  // save togglers in variables to dry code\r\n  const cardRefetchToggler = uiConfigs.togglers.secondaryScreens.reloadCardList\r\n  const resetAppToggler = uiConfigs.togglers.secondaryScreens.resetApp\r\n  // we disable card fetching in UI if timeout from last re-fetch has not\r\n  // expired at the time this component is rendered. If timeout was still not set\r\n  // (cardFetchLastDate === null), then hard-code false, which enables re-fetch\r\n  const isFetchCardsDisabled = cardFetchLastDate\r\n    ? new Date() - new Date(cardFetchLastDate) <\r\n      uiConfigs.apiConfigs.cardRefetchBlockTimeout\r\n    : false\r\n\r\n  const handleToggleToast = useCallback(() => {\r\n    // Toast reducer action to force-close the toast\r\n    dispatchToastAction(toastActionCreators.closeToast())\r\n  }, [dispatchToastAction])\r\n\r\n  const handleFetchCards = useCallback(() => {\r\n    // if card fetching \"Proceed\" <Button /> was pressed, close secondary screen\r\n    toggleSecondScreen()\r\n    // safeguard here. If by any means the <Button /> was enabled while it should\r\n    // not have been (a bug or glitch), then just return out of the function\r\n    if (isFetchCardsDisabled) return\r\n    // from here on, we are successfully re-fetching cards. Toggle a <Toast /> to\r\n    // notify the user to wait, and set the whole app into loading state\r\n    dispatchToastAction(\r\n      toastActionCreators.setToastState(\r\n        \"Retrieving cards from database. Please wait...\",\r\n        null,\r\n        uiConfigs.togglers.toast.cardRefetch\r\n      )\r\n    )\r\n    setAppIsLoadingSomething(true)\r\n    // trigger useFetch()'s fetching function on the already set database url\r\n    fetchCardList()\r\n      .then(() => {\r\n        // on fetch success, notify the user with a Toast, cancel the app's loading\r\n        // state and assign a new date on localstorage to use as a timeout to\r\n        // re-enable fetch option\r\n        dispatchToastAction(\r\n          toastActionCreators.setToastState(\r\n            'Cards reloaded! Filter them in \"Decks\" section',\r\n            null,\r\n            uiConfigs.togglers.toast.cardRefetch\r\n          )\r\n        )\r\n        setAppIsLoadingSomething(false)\r\n        setFetchCardsNewDate()\r\n      })\r\n      .catch(() => {\r\n        // on fetch fail, notify the user with a Toast and cancel the app's loading\r\n        // state\r\n        dispatchToastAction(\r\n          toastActionCreators.setToastState(\r\n            \"Error loading cards. Please, try again later.\",\r\n            null,\r\n            uiConfigs.togglers.toast.cardRefetch\r\n          )\r\n        )\r\n        setAppIsLoadingSomething(false)\r\n      })\r\n  }, [\r\n    fetchCardList,\r\n    dispatchToastAction,\r\n    setAppIsLoadingSomething,\r\n    toggleSecondScreen\r\n  ])\r\n\r\n  const handleResetApp = useCallback(() => {\r\n    // on app resetting \"Proceed\" <Button /> press, set global app loading state\r\n    // to true and freeze swiping. Upon refreshing the app below, they will be\r\n    // re-mounted, thus self-resetted to false\r\n    setAppIsLoadingSomething(true)\r\n    setScreenIsFrozen(true)\r\n    // remove everything from local storage, which in term clears all saved data\r\n    window.localStorage.clear()\r\n    // set a temporary new key to true, which will flag App.js to trigger a Toast\r\n    // upon reloading the page, notifying the user of a successful reset action\r\n    window.localStorage.setItem(uiConfigs.localStorageResetKeyName, true)\r\n    // finally, hard refresh the app. Doing so will re-mount it from root, resetting\r\n    // all states and creating new default local storage keys\r\n    window.location.reload()\r\n  }, [setAppIsLoadingSomething, setScreenIsFrozen])\r\n\r\n  return (\r\n    <>\r\n      <Toast\r\n        show={\r\n          // show <Toast /> on cardRefetch trigger. appReset <Toast /> will trigger\r\n          // on App.js\r\n          toastState.isActive &&\r\n          toastState.type === uiConfigs.togglers.toast.cardRefetch\r\n        }\r\n        toggler={handleToggleToast}\r\n        inactiveTimeout={uiConfigs.timeouts.toast.inactiveCardRefetch}\r\n        refreshTimeoutOn={toastState.refreshTimeoutToggler}\r\n      >\r\n        <div className={styles.ToastText}>{toastState.text}</div>\r\n      </Toast>\r\n      {secondScreenState &&\r\n        (secondScreenType === cardRefetchToggler ||\r\n          secondScreenType === resetAppToggler) && (\r\n          <SecondaryScreen\r\n            toggle={toggleSecondScreen}\r\n            animation=\"fade\"\r\n            scrollable\r\n            sfxObj={modalSFX}\r\n          >\r\n            {secondScreenType === cardRefetchToggler && (\r\n              <DangerZoneSecondaryScreen\r\n                onProceed={handleFetchCards}\r\n                onCancel={toggleSecondScreen}\r\n                // disable \"Proceed\" <Button /> if no internet connection of\r\n                // if timeout from last re-fetch has not expired yet\r\n                proceedDisabled={!navigator.onLine || isFetchCardsDisabled}\r\n              >\r\n                {\r\n                  // children is a \"render-props\" function in <DangerZoneSecondaryScreen />\r\n                  (incomingProps) =>\r\n                    dangerZoneChildrenJSX.getRefetchCardsJSX(incomingProps)\r\n                }\r\n              </DangerZoneSecondaryScreen>\r\n            )}\r\n            {secondScreenType === resetAppToggler && (\r\n              <DangerZoneSecondaryScreen\r\n                onProceed={handleResetApp}\r\n                onCancel={toggleSecondScreen}\r\n                // disable \"Proceed\" <Button /> if global app state is loading (which\r\n                // means we are re-fetching cards or we already clicked on reset app)\r\n                proceedDisabled={appIsLoadingSomething}\r\n              >\r\n                {\r\n                  // children is a \"render-props\" function in <DangerZoneSecondaryScreen />\r\n                  (incomingProps) =>\r\n                    dangerZoneChildrenJSX.getResetAppJSX(incomingProps)\r\n                }\r\n              </DangerZoneSecondaryScreen>\r\n            )}\r\n          </SecondaryScreen>\r\n        )}\r\n    </>\r\n  )\r\n}\r\n\r\nDangerZoneSecondaryScreens.propTypes = {\r\n  modalSFX: PropTypes.object.isRequired\r\n}\r\n\r\nexport default memo(DangerZoneSecondaryScreens)\r\n","import styles from \"./DangerZone.module.css\"\r\n\r\nexport const classes = {\r\n  optionBody: [styles.OptionBody],\r\n  optionRefresh: [\"width65\", \"bold\", \"italic\"],\r\n  optionReset: [\"width25\", \"bold\", \"italic\"]\r\n}\r\n","import React, { memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport DangerZoneSecondaryScreens from \"../DangerZoneSecondaryScreens/DangerZoneSecondaryScreens\"\r\nimport Button from \"../../UI/Button/Button\"\r\nimport UICardContainer from \"../../../wrappers/UICardContainer/UICardContainer\"\r\nimport OptionTitle from \"../../../wrappers/OptionTitle/OptionTitle\"\r\nimport OptionBody from \"../../../wrappers/OptionBody/OptionBody\"\r\nimport uiConfigs from \"../../../utils/ui.configs.json\"\r\nimport { classes } from \"./DangerZone.utils\"\r\n\r\nfunction DangerZone({ modalSFX, toggleSecondScreen }) {\r\n  return (\r\n    <>\r\n      <DangerZoneSecondaryScreens modalSFX={modalSFX} />\r\n      <UICardContainer>\r\n        <OptionTitle> Danger Zone </OptionTitle>\r\n        <OptionBody classNames={classes.optionBody}>\r\n          <Button\r\n            type={navigator.onLine ? \"secondary\" : \"disabled\"}\r\n            disabled={!navigator.onLine} // disable refetch option if no internet connection\r\n            sutileAnimation\r\n            onClick={() =>\r\n              toggleSecondScreen(\r\n                uiConfigs.togglers.secondaryScreens.reloadCardList\r\n              )\r\n            }\r\n            classNames={classes.optionRefresh}\r\n          >\r\n            {navigator.onLine\r\n              ? \"Refresh deck builder's card list\"\r\n              : \"Connect to internet to reload cards\"}\r\n          </Button>\r\n          <Button\r\n            type=\"secondary\"\r\n            sutileAnimation\r\n            onClick={() =>\r\n              toggleSecondScreen(uiConfigs.togglers.secondaryScreens.resetApp)\r\n            }\r\n            classNames={classes.optionReset}\r\n          >\r\n            Reset app\r\n          </Button>\r\n        </OptionBody>\r\n      </UICardContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nDangerZone.propTypes = {\r\n  modalSFX: PropTypes.object.isRequired,\r\n  toggleSecondScreen: PropTypes.func.isRequired\r\n}\r\n\r\nexport default memo(DangerZone)\r\n","import styles from \"./Configs.module.css\"\r\n\r\nexport const classes = {\r\n  card: [styles.Card]\r\n}\r\n","import React, { useContext, memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { LocalStorageContext } from \"../../../contexts/LocalStorageContext\"\r\nimport useAudio from \"../../../hooks/useAudio\"\r\nimport OptionsTitle from \"../../../wrappers/OptionsTitle/OptionsTitle\"\r\nimport Card from \"../../UI/Card/Card\"\r\nimport LifePoints from \"../LifePoints/LifePoints\"\r\nimport Switches from \"../Switches/Switches\"\r\nimport DiceLimits from \"../DiceLimits/DiceLimits\"\r\nimport DangerZone from \"../DangerZone/DangerZone\"\r\nimport clickOKmp3 from \"../../../assets/audios/clickOK.mp3\"\r\nimport clickCancelmp3 from \"../../../assets/audios/clickCancel.mp3\"\r\nimport { classes } from \"./Configs.utils\"\r\nimport styles from \"./Configs.module.css\"\r\n\r\nfunction Configs({ playSFXs, togglePlaySFXs, toggleSecondScreen, modalSFX }) {\r\n  // getter and updating function for local storage \"configs\" key\r\n  const { updateLSandGetLSasJSObj, getLSasJSObject } = useContext(\r\n    LocalStorageContext\r\n  )\r\n  // audio JSX and controls object for \"confirm\" and \"OK\" SFX\r\n  const [clickOKAudioJSX, clickOKSFX] = useAudio(clickOKmp3, {\r\n    toggleOn: playSFXs\r\n  })\r\n  // audio JSX and controls object for \"cancel\" SFX\r\n  const [clickCancelAudioJSX, clickCancelSFX] = useAudio(clickCancelmp3, {\r\n    toggleOn: playSFXs\r\n  })\r\n  // usePlayerConfigInputHandler takes an object with two SFX useAudioControl's\r\n  // objects in it: one for \"ok\" and the other for \"cancel\" actions.\r\n  const soundEffects = { ok: clickOKSFX, cancel: clickCancelSFX }\r\n\r\n  return (\r\n    <section className={styles.Container}>\r\n      <OptionsTitle> Configs </OptionsTitle>\r\n      <div className={styles.Options}>\r\n        <Card type=\"secondary\" classNames={classes.card}>\r\n          <LifePoints\r\n            getLSasJSObject={getLSasJSObject}\r\n            updateLSandGetLSasJSObj={updateLSandGetLSasJSObj}\r\n            soundEffects={soundEffects}\r\n          />\r\n        </Card>\r\n        <Card type=\"secondary\" classNames={classes.card}>\r\n          <Switches playSFXs={playSFXs} togglePlaySFXs={togglePlaySFXs} />\r\n        </Card>\r\n        <Card type=\"secondary\" classNames={classes.card}>\r\n          <DiceLimits\r\n            getLSasJSObject={getLSasJSObject}\r\n            updateLSandGetLSasJSObj={updateLSandGetLSasJSObj}\r\n            soundEffects={soundEffects}\r\n            playSFXs={playSFXs}\r\n          />\r\n        </Card>\r\n        <Card type=\"danger\" classNames={classes.card}>\r\n          <DangerZone\r\n            playSFXs={playSFXs}\r\n            modalSFX={modalSFX}\r\n            toggleSecondScreen={toggleSecondScreen}\r\n          />\r\n        </Card>\r\n      </div>\r\n      {clickOKAudioJSX}\r\n      {clickCancelAudioJSX}\r\n    </section>\r\n  )\r\n}\r\n\r\nConfigs.propTypes = {\r\n  playSFXs: PropTypes.bool.isRequired,\r\n  togglePlaySFXs: PropTypes.func.isRequired,\r\n  toggleSecondScreen: PropTypes.func.isRequired,\r\n  modalSFX: PropTypes.object.isRequired\r\n}\r\n\r\nexport default memo(Configs)\r\n","import styles from \"./Credits.module.css\"\r\n\r\nexport const classes = {\r\n  card: [styles.Card]\r\n}\r\n","import React, { memo } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport OptionsTitle from \"../../../wrappers/OptionsTitle/OptionsTitle\"\r\nimport Card from \"../../UI/Card/Card\"\r\nimport { classes } from \"./Credits.utils\"\r\nimport styles from \"./Credits.module.css\"\r\n\r\nfunction Credits({ toggleSecondScreen, creditsScreens }) {\r\n  return (\r\n    <section className={styles.Container}>\r\n      <OptionsTitle> Credits </OptionsTitle>\r\n      <div className={styles.Options}>\r\n        {creditsScreens.map((ss, i) => (\r\n          <Card\r\n            key={i}\r\n            type=\"secondary\"\r\n            role=\"button\"\r\n            classNames={classes.card}\r\n            onClick={() => toggleSecondScreen(ss[1].toggler)}\r\n          >\r\n            {ss[1].displayTitle}\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nCredits.propTypes = {\r\n  toggleSecondScreen: PropTypes.func.isRequired,\r\n  creditsScreens: PropTypes.arrayOf(PropTypes.array.isRequired).isRequired\r\n}\r\n\r\nexport default memo(Credits)\r\n","import React, { useEffect } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport useAudio from \"../../hooks/useAudio\"\r\nimport SecondaryScreens from \"../../components/Options/SecondaryScreens/SecondaryScreens\"\r\nimport Configs from \"../../components/Options/Configs/Configs\"\r\nimport Credits from \"../../components/Options/Credits/Credits\"\r\nimport { secondaryScreensData } from \"../../utils/utilityObjects\"\r\nimport toastmp3 from \"../../assets/audios/toast.mp3\"\r\nimport styles from \"./OptionsPage.module.css\"\r\n\r\n// construct an array of \"Credits\" object's keys and values as entries.\r\n// They will be mapped as <SelectionMenuScreen /> titles and content in\r\n// <SecondaryScreens />, and as children of <Credits />'s <Card />s\r\nconst creditsScreens = Object.entries(secondaryScreensData.credits)\r\n\r\nexport default function OptionsPage({\r\n  toggleSecondScreen, // <function> UIContext's Secondary Screen toggler\r\n  secondScreenState, // <boolean> UIContext's Secondary Screen state\r\n  secondScreenType, // <boolean> UIContext's Secondary Screen type\r\n  toastState, // <object> UIContext's toast reducer state\r\n  dispatchToastAction, // <function> UIContext's toast reducer action dispatcher\r\n  playSFXs, // <boolean> UIContext's universal ON/OFF sfx switch\r\n  togglePlaySFXs, // <function> UIContext's playSFXs toggler\r\n  modalSFX // <object> useAudio()'s modal SFX controls object\r\n}) {\r\n  // useAudio JSX and controls object for <Toast /> sfx\r\n  const [toastAudioJSX, toastSFX] = useAudio(toastmp3, {\r\n    toggleOn: playSFXs,\r\n    playbackRate: 1.2\r\n  })\r\n\r\n  useEffect(() => {\r\n    // is <Toast /> becomes active, play its SFX only if a <SecondaryScreen />\r\n    // is also active. This is such because the only instances where <Toast />\r\n    // triggers while not in a <SecondaryScreen /> is when toggling log/SFX switches.\r\n    // They have their own SFX for <Toast />, so block this one to avoid collision.\r\n    if (toastState.isActive && secondScreenState) toastSFX.restart()\r\n  }, [toastState.isActive])\r\n\r\n  return (\r\n    <>\r\n      <main className={styles.Container}>\r\n        <Configs\r\n          playSFXs={playSFXs}\r\n          togglePlaySFXs={togglePlaySFXs}\r\n          toggleSecondScreen={toggleSecondScreen}\r\n          modalSFX={modalSFX}\r\n        />\r\n        <Credits\r\n          toggleSecondScreen={toggleSecondScreen}\r\n          creditsScreens={creditsScreens}\r\n        />\r\n      </main>\r\n      <SecondaryScreens\r\n        creditsScreens={creditsScreens}\r\n        toggleSecondScreen={toggleSecondScreen}\r\n        secondScreenState={secondScreenState}\r\n        secondScreenType={secondScreenType}\r\n        toastState={toastState}\r\n        dispatchToastAction={dispatchToastAction}\r\n        playSFXs={playSFXs}\r\n        modalSFX={modalSFX}\r\n        toastSFX={toastSFX}\r\n      />\r\n      {toastAudioJSX}\r\n    </>\r\n  )\r\n}\r\n\r\nOptionsPage.propTypes = {\r\n  secondScreenState: PropTypes.bool.isRequired,\r\n  secondScreenType: PropTypes.string.isRequired,\r\n  toggleSecondScreen: PropTypes.func.isRequired,\r\n  toastState: PropTypes.object.isRequired,\r\n  dispatchToastAction: PropTypes.func.isRequired,\r\n  playSFXs: PropTypes.bool.isRequired,\r\n  togglePlaySFXs: PropTypes.func.isRequired,\r\n  modalSFX: PropTypes.object.isRequired\r\n}\r\n","import React from \"react\"\r\n// import React, { lazy, Suspense } from \"react\"\r\nimport { Route, Switch, Redirect, withRouter } from \"react-router-dom\"\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\"\r\nimport PropTypes from \"prop-types\"\r\nimport useAudio from \"../../hooks/useAudio\"\r\n// import Spinner from \"../../components/UI/Spinner/Spinner\"\r\nimport openModalmp3 from \"../../assets/audios/openModal.mp3\"\r\nimport closeModalmp3 from \"../../assets/audios/closeModal.mp3\"\r\nimport uiConfigs from \"../../utils/ui.configs.json\"\r\nimport ErrorBoundary from \"../../components/UI/ErrorBoundary/ErrorBoundary\"\r\nimport GenericErrorMessage from \"../../components/UI/GenericErrorMessage/GenericErrorMessage\"\r\nimport LifePointsCounterPage from \"../../pages/LifePointsCounterPage/LifePointsCounterPage\"\r\nimport \"./RouteComponents.module.css\"\r\nimport LogPage from \"../../pages/LogPage/LogPage\"\r\nimport CardSearchPage from \"../../pages/CardSearchPage/CardSearchPage\"\r\nimport DeckBuilderPage from \"../../pages/DeckBuilderPage/DeckBuilderPage\"\r\nimport OptionsPage from \"../../pages/OptionsPage/OptionsPage\"\r\n\r\n// I decided not to use lazy loading as this was supposed to be a PWA. Thus,\r\n// it is better to load everything up front. You can enable it by uncommenting\r\n// each this code below, the imports above and enabling <Suspense /> in return.\r\n// You will also have to comment manual imports above.\r\n//\r\n// const LifePointsCounterPage = lazy(() =>\r\n//   import(\"../../pages/LifePointsCounterPage/LifePointsCounterPage\")\r\n// )\r\n// const LogPage = lazy(() => import(\"../../pages/LogPage/LogPage\"))\r\n// const CardSearchPage = lazy(() =>\r\n//   import(\"../../pages/CardSearchPage/CardSearchPage\")\r\n// )\r\n// const DeckBuilderPage = lazy(() =>\r\n//   import(\"../../pages/DeckBuilderPage/DeckBuilderPage\")\r\n// )\r\n// const OptionsPage = lazy(() => import(\"../../pages/OptionsPage/OptionsPage\"))\r\n\r\nfunction RouteComponents({\r\n  fallbackRoute, // <string> the front element of pageArray in PageSwipe reducer\r\n  slideClassName, // <string> current \"swipe\" className (left-slide or right-slide)\r\n  uiContextObject, // <object> UIContext's passed object to consume as context\r\n  swipe, // <function> App.js swipe callback function\r\n  location // <object> location object passed by withRouter\r\n}) {\r\n  // useAudio JSX and audio controls object for <SecondaryScreen /> toggling sfx\r\n  const [modalAudioJSX, modalSFX] = useAudio(openModalmp3, {\r\n    toggleOn: uiContextObject.playSFXs,\r\n    sources: [openModalmp3, closeModalmp3],\r\n    playbackRate: 0.7\r\n  })\r\n\r\n  return (\r\n    <>\r\n      {/* uncaught errors triggered anywhere in the app will fall back here, rendering\r\n    <GenericErrorMessage /> as a <SecondaryScreen /> component */}\r\n      <ErrorBoundary\r\n        {...uiContextObject}\r\n        modalSFX={modalSFX}\r\n        errorMessageComponent={GenericErrorMessage}\r\n      >\r\n        {/* TransitionGroup + CSSTransition combo wrapping Switch will add the proper\r\n        slide classes route components to perform slide transitioning */}\r\n        <TransitionGroup component={null}>\r\n          <CSSTransition\r\n            key={location.key}\r\n            timeout={250}\r\n            classNames={slideClassName}\r\n            component={null}\r\n            mountOnEnter\r\n            unmountOnExit\r\n          >\r\n            {/* <Suspense\r\n                  fallback={\r\n                    <div className={styles.SpinnerContainer}>\r\n                      <Spinner classNames={classes.spinner} />\r\n                    </div>\r\n                  }\r\n                > */}\r\n            <Switch location={location}>\r\n              <Route\r\n                // page 0 is \"/calc\"\r\n                path={`/${uiConfigs.pageNames[0]}`}\r\n                render={() => (\r\n                  <LifePointsCounterPage\r\n                    {...uiContextObject}\r\n                    modalSFX={modalSFX}\r\n                  />\r\n                )}\r\n              />\r\n              <Route\r\n                // page 1 is \"/log\"\r\n                path={`/${uiConfigs.pageNames[1]}`}\r\n                render={() => (\r\n                  <LogPage {...uiContextObject} modalSFX={modalSFX} />\r\n                )}\r\n              />\r\n              <Route\r\n                // page 2 is \"/search\"\r\n                path={`/${uiConfigs.pageNames[2]}`}\r\n                render={(routeProps) => (\r\n                  <CardSearchPage\r\n                    {...uiContextObject}\r\n                    modalSFX={modalSFX}\r\n                    {...routeProps}\r\n                  />\r\n                )}\r\n              />\r\n              <Route\r\n                // page 3 is \"/decks\"\r\n                path={`/${uiConfigs.pageNames[3]}`}\r\n                render={() => (\r\n                  <DeckBuilderPage\r\n                    {...uiContextObject}\r\n                    swipe={swipe}\r\n                    modalSFX={modalSFX}\r\n                  />\r\n                )}\r\n              />\r\n              <Route\r\n                // page 4 is \"/configs\"\r\n                path={`/${uiConfigs.pageNames[4]}`}\r\n                render={() => (\r\n                  <OptionsPage {...uiContextObject} modalSFX={modalSFX} />\r\n                )}\r\n              />\r\n              {/* fallback will always render the page at index 0 of pageArray \r\n              in pageSwipe reducer */}\r\n              <Route render={() => <Redirect to={fallbackRoute} />} />\r\n            </Switch>\r\n          </CSSTransition>\r\n          {/* </Suspense> */}\r\n        </TransitionGroup>\r\n      </ErrorBoundary>\r\n      {modalAudioJSX}\r\n    </>\r\n  )\r\n}\r\n\r\nRouteComponents.propTypes = {\r\n  fallbackRoute: PropTypes.string.isRequired,\r\n  slideClassName: PropTypes.string.isRequired,\r\n  uiContextObject: PropTypes.shape({\r\n    secondScreenState: PropTypes.bool.isRequired,\r\n    secondScreenType: PropTypes.string.isRequired,\r\n    toggleSecondScreen: PropTypes.func.isRequired,\r\n    playSFXs: PropTypes.bool.isRequired,\r\n    togglePlaySFXs: PropTypes.func.isRequired\r\n  }).isRequired,\r\n  swipe: PropTypes.func.isRequired\r\n}\r\n\r\nexport default withRouter(RouteComponents)\r\n\r\n// const classes = {\r\n//   spinner: {\r\n//     container: [styles.Spinner]\r\n//   }\r\n// }\r\n","import React from \"react\"\r\nimport ArrowIcon from \"./components/UI/ArrowIcon/ArrowIcon\"\r\nimport Arrow from \"./assets/uiIcons/arrowPage.svg\"\r\nimport styles from \"./App.module.css\"\r\n\r\nexport const classes = {\r\n  arrowLeft: {\r\n    container: [styles.ArrowContainer],\r\n    arrow: [styles.ArrowImage],\r\n    text: [styles.ArrowText]\r\n  },\r\n  arrowRight: {\r\n    container: [styles.ArrowContainer, styles.ArrowContainerLeft],\r\n    arrow: [styles.ArrowImage],\r\n    text: [styles.ArrowText, styles.ArrowTextLeft]\r\n  },\r\n  spinner: {\r\n    container: [styles.SpinnerContainer]\r\n  }\r\n}\r\n\r\nexport function getNavigationArrowJSX(\r\n  direction,\r\n  destination,\r\n  screenIsFrozen,\r\n  onClick\r\n) {\r\n  return (\r\n    <ArrowIcon\r\n      component=\"nav\"\r\n      pointing={direction}\r\n      arrowImage={Arrow}\r\n      extraText={destination}\r\n      alt={`Go to ${destination}`}\r\n      role=\"navigation\"\r\n      isClickable\r\n      disabled={screenIsFrozen}\r\n      onClick={onClick}\r\n      dataId={direction}\r\n      classNames={\r\n        classes[\r\n          `arrow${\r\n            direction[0].toUpperCase() + direction.slice(1).toLowerCase()\r\n          }`\r\n        ]\r\n      }\r\n    />\r\n  )\r\n}\r\n","import React, {\n  useState,\n  useContext,\n  useEffect,\n  memo,\n  useCallback\n} from \"react\"\nimport { withRouter } from \"react-router-dom\"\nimport { Swipeable } from \"react-swipeable\"\nimport { UIContext } from \"./contexts/UIContext\"\nimport * as pageSwipeActionCreators from \"./store/PageSwipe/pageSwipeActionCreators\"\nimport * as toastActionCreators from \"./store/Toast/toastActionCreators\"\nimport useAudio from \"./hooks/useAudio\"\nimport RouteComponents from \"./wrappers/RouteComponents/RouteComponents\"\nimport Toast from \"./components/UI/Toast/Toast\"\nimport Spinner from \"./components/UI/Spinner/Spinner\"\nimport uiConfigs from \"./utils/ui.configs.json\"\nimport swipemp3 from \"./assets/audios/swipe.mp3\"\nimport { classes, getNavigationArrowJSX } from \"./App.utils\"\nimport styles from \"./App.module.css\"\n\nfunction App({ history }) {\n  // bring the whole context object being provided by UIContext\n  const uiContextObject = useContext(UIContext)\n  // get pageArray and slide className from pageState\n  const { pageArray, slide } = uiContextObject.pageState\n  // state and setter to prevent the user from swiping\n  const [isSwipeFrozen, setIsSwipeFrozen] = useState(false)\n  // audio JSX and controls object for swiping sfx\n  const [swipeAudioJSX, swipeSFX] = useAudio(swipemp3, {\n    toggleOn: uiContextObject.playSFXs\n  })\n\n  const onArrowClick = useCallback(\n    // when clicking on arrows to move from component to component, trigger swipe()\n    (e) => {\n      swipe(e.target.dataset.id)\n    },\n    [swipe]\n  )\n\n  const handleCloseToast = useCallback(() => {\n    // toast action dispatcher to force-close it\n    uiContextObject.dispatchToastAction(toastActionCreators.closeToast())\n  }, [uiContextObject.dispatchToastAction])\n\n  function swipe(direction) {\n    // if user should not swipe, or should not click on anything or any secondary\n    // screen is toggled on, swiping will do nothing\n    if (\n      uiContextObject.secondScreenState ||\n      uiContextObject.screenIsFrozen ||\n      isSwipeFrozen\n    ) {\n      return\n    }\n    // from here on, swipe was triggered. Freeze further swiping actions\n    setIsSwipeFrozen(true)\n    // sync page state with the page to be loaded due to swiping\n    uiContextObject.dispatchPageAction(\n      pageSwipeActionCreators[\n        `${direction === \"left\" ? \"goForward\" : \"goBack\"}`\n      ]()\n    )\n    // push history to render the component the user swiped for\n    history.push(\n      direction === \"left\" ? pageArray[1] : pageArray[pageArray.length - 1]\n    )\n    // play a swipe sfx and force-close opened <Toast />s, if any\n    swipeSFX.play()\n    handleCloseToast()\n  }\n\n  useEffect(() => {\n    // mounting the app from any path besides root ('/') triggers this useEffect,\n    // which sync's pageArray to the current loaded path\n    history.location.pathname &&\n      uiContextObject.dispatchPageAction(\n        pageSwipeActionCreators.syncStartingURLwithPageArray(\n          history.location.pathname\n        )\n      )\n  }, [])\n\n  useEffect(() => {\n    // at any time app swiping action freezes, set a timeout to unfreeze it.\n    // This is such so that state in reducer, UI and sfx can all play with no\n    // interruptions\n    const freezeSwipeTimeout = setTimeout(() => {\n      setIsSwipeFrozen(false)\n    }, uiConfigs.timeouts.freezeSwipe)\n    return () => freezeSwipeTimeout && clearTimeout(freezeSwipeTimeout)\n  }, [isSwipeFrozen])\n\n  useEffect(() => {\n    // on mount, look for \"resetApp\" local storage item\n    const appWasResetted = window.localStorage.getItem(\n      uiConfigs.localStorageResetKeyName\n    )\n    // if it exists, it means the app was hard refreshed and thus re-mounted due\n    // to the user having resetted it from \"Danger Zone\" in \"configs\" page.\n    // Remove that local storage flag so this does not trigger on further mounts,\n    // and toggle the <Toast /> here to notify the user of a successful reset.\n    if (appWasResetted) {\n      window.localStorage.removeItem(uiConfigs.localStorageResetKeyName)\n      uiContextObject.dispatchToastAction(\n        toastActionCreators.setToastState(\n          \"App resetted successfully!\",\n          null,\n          uiConfigs.togglers.toast.appReset\n        )\n      )\n    }\n  }, [uiContextObject.dispatchToastAction])\n\n  return (\n    <Swipeable\n      onSwipedRight={() => swipe(\"right\")}\n      onSwipedLeft={() => swipe(\"left\")}\n      delta={uiConfigs.swipeDelta}\n      className={styles.App}\n    >\n      {\n        // if anywhere in this app appIsLoadingSomething === true, a <Spinner />\n        // is shown on the top-right side of the screen\n        uiContextObject.appIsLoadingSomething && (\n          <Spinner classNames={classes.spinner} />\n        )\n      }\n      <Toast\n        show={\n          uiContextObject.toastState.isActive &&\n          uiContextObject.toastState.type === uiConfigs.togglers.toast.appReset\n        }\n        toggler={handleCloseToast}\n        inactiveTimeout={uiConfigs.timeouts.toast.inactiveAppReset}\n      >\n        <div className={styles.ToastText}>\n          {uiContextObject.toastState.text}\n        </div>\n      </Toast>\n      {getNavigationArrowJSX(\n        \"left\",\n        pageArray[1],\n        uiContextObject.screenIsFrozen,\n        onArrowClick\n      )}\n      {getNavigationArrowJSX(\n        \"right\",\n        pageArray[pageArray.length - 1],\n        uiContextObject.screenIsFrozen,\n        onArrowClick\n      )}\n      <RouteComponents\n        uiContextObject={uiContextObject}\n        fallbackRoute={pageArray[0]}\n        slideClassName={slide}\n        swipe={swipe}\n      />\n      {swipeAudioJSX}\n    </Swipeable>\n  )\n}\n\nexport default memo(withRouter(App))\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { LPContextProvider } from \"../../contexts/LPContext\"\r\nimport { PlayerContextProvider } from \"../../contexts/PlayerContext\"\r\nimport { UIContextProvider } from \"../../contexts/UIContext\"\r\nimport { LocalStorageContextProvider } from \"../../contexts/LocalStorageContext\"\r\nimport { TimerContextProvider } from \"../../contexts/TimerContext\"\r\nimport { CoinDieTokenContextProvider } from \"../../contexts/CoinDieTokenContext\"\r\nimport { CardSearchContextProvider } from \"../../contexts/CardSearchContext\"\r\nimport { MediaQueryProvider } from \"../../contexts/MediaQueryContext\"\r\nimport { LogContextProvider } from \"../../contexts/LogContext\"\r\nimport { DeckBuilderContextProvider } from \"../../contexts/DeckBuilderContext\"\r\n\r\nexport default function ContextProviders({ children }) {\r\n  // yes, I know. I should have used redux. I never thought the app would\r\n  // turn out to be this big. I did my best to optimize re-renders, though c:\r\n  return (\r\n    <MediaQueryProvider>\r\n      <LocalStorageContextProvider>\r\n        <CardSearchContextProvider>\r\n          <UIContextProvider>\r\n            <LogContextProvider>\r\n              <DeckBuilderContextProvider>\r\n                <LPContextProvider>\r\n                  <CoinDieTokenContextProvider>\r\n                    <PlayerContextProvider>\r\n                      <TimerContextProvider>{children}</TimerContextProvider>\r\n                    </PlayerContextProvider>\r\n                  </CoinDieTokenContextProvider>\r\n                </LPContextProvider>\r\n              </DeckBuilderContextProvider>\r\n            </LogContextProvider>\r\n          </UIContextProvider>\r\n        </CardSearchContextProvider>\r\n      </LocalStorageContextProvider>\r\n    </MediaQueryProvider>\r\n  )\r\n}\r\n\r\nContextProviders.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { BrowserRouter } from \"react-router-dom\"\nimport App from \"./App\"\nimport ContextProviders from \"./wrappers/ContextProviders/ContextProviders\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport \"./index.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <ContextProviders>\n        <App />\n      </ContextProviders>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}